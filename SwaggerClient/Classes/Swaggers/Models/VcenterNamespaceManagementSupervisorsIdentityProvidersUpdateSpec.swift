//
// VcenterNamespaceManagementSupervisorsIdentityProvidersUpdateSpec.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct VcenterNamespaceManagementSupervisorsIdentityProvidersUpdateSpec: Codable {

    /** A name to be used for the given identity provider. This name will be displayed in the vCenter UI. if unset, the name will remained unchanged. */
    public var displayName: String?
    /** The URL to the identity provider issuing tokens. The OIDC discovery URL will be derived from the issuer URL, according to RFC8414: https://issuerURL/.well-known/openid-configuration. This must use HTTPS as the scheme. If unset, the issuer URL will not be updated. */
    public var issuerURL: String?
    /** The claim from the upstream identity provider ID token or user info endpoint to inspect to obtain the username for the given user. If unset, the username claim will not be updated. */
    public var usernameClaim: String?
    /** This represents the intent of the change to Providers.UpdateSpec.username-claim. If this field is set to true, the existing &#39;usernameClaim&#39; value will be removed. If this field is set to false, the existing username claim will be changed to the value specified in Providers.UpdateSpec.username-claim, if any. If unset, the existing &#39;usernameClaim&#39; value will be changed to the value specified in Providers.UpdateSpec.username-claim, if any. */
    public var unsetUsernameClaim: Bool?
    /** The claim from the upstream identity provider ID token or user info endpoint to inspect to obtain the groups for the given user. If unset, the groups claim will not be updated. */
    public var groupsClaim: String?
    /** This represents the intent of the change to Providers.UpdateSpec.groups-claim. If this field is set to true, the existing &#39;groupsClaim&#39; value will be removed. If this field is set to false, the existing groups claim will be changed to the value specified in Providers.UpdateSpec.groups-claim, if any. If unset, the existing &#39;groupsClaim&#39; value will be changed to the value specified in Providers.UpdateSpec.groups-claim, if any. */
    public var unsetGroupsClaim: Bool?
    /** The clientID is the OAuth 2.0 client ID registered in the upstream identity provider and used by the Supervisor. If unset, the client ID will not be updated. */
    public var clientID: String?
    /** The OAuth 2.0 client secret to be used by the Supervisor when authenticating to the upstream identity provider. If unset, the client secret will not be updated. */
    public var clientSecret: String?
    /** Certificate authority data to be used to establish HTTPS connections with the identity provider. This must be a PEM-encoded value. If unset, the certificate authority data will not be updated. */
    public var certificateAuthorityData: String?
    /** This represents the intent of the change to Providers.UpdateSpec.certificate-authority-data. If this field is set to true, the existing &#39;certificateAuthorityData&#39; value will be removed. If this field is set to false, the existing certificate authority data will be changed to the value specified in Providers.UpdateSpec.certificate-authority-data, if any. If unset, the existing &#39;certificateAuthorityData&#39; value will be changed to the value specified in Providers.UpdateSpec.certificate-authority-data, if any. */
    public var unsetCertificateAuthorityData: Bool?
    /** Additional scopes to be requested in tokens issued by this identity provider. If unset, the additional scopes will not be updated. */
    public var additionalScopes: [String]?
    /** Any additional parameters to be sent to the upstream identity provider during the authorize request in the OAuth2 authorization code flow. One use case is to pass in a default tenant ID if you have a multi-tenant identity provider. For instance, with VMware&#39;s Cloud Services Platform, if your organization ID is &#39;long-form-org-id&#39;, the &#39;orgLink&#39; parameter can be set to \&quot;/csp/gateway/am/api/orgs/long-form-org-id\&quot; to allow users logging in to leverage that organization. If unset, the additional parameters will not be updated. */
    public var additionalAuthorizeParameters: [String:String]?

    public init(displayName: String?, issuerURL: String?, usernameClaim: String?, unsetUsernameClaim: Bool?, groupsClaim: String?, unsetGroupsClaim: Bool?, clientID: String?, clientSecret: String?, certificateAuthorityData: String?, unsetCertificateAuthorityData: Bool?, additionalScopes: [String]?, additionalAuthorizeParameters: [String:String]?) {
        self.displayName = displayName
        self.issuerURL = issuerURL
        self.usernameClaim = usernameClaim
        self.unsetUsernameClaim = unsetUsernameClaim
        self.groupsClaim = groupsClaim
        self.unsetGroupsClaim = unsetGroupsClaim
        self.clientID = clientID
        self.clientSecret = clientSecret
        self.certificateAuthorityData = certificateAuthorityData
        self.unsetCertificateAuthorityData = unsetCertificateAuthorityData
        self.additionalScopes = additionalScopes
        self.additionalAuthorizeParameters = additionalAuthorizeParameters
    }

    public enum CodingKeys: String, CodingKey { 
        case displayName = "display_name"
        case issuerURL = "issuer_URL"
        case usernameClaim = "username_claim"
        case unsetUsernameClaim = "unset_username_claim"
        case groupsClaim = "groups_claim"
        case unsetGroupsClaim = "unset_groups_claim"
        case clientID = "client_ID"
        case clientSecret = "client_secret"
        case certificateAuthorityData = "certificate_authority_data"
        case unsetCertificateAuthorityData = "unset_certificate_authority_data"
        case additionalScopes = "additional_scopes"
        case additionalAuthorizeParameters = "additional_authorize_parameters"
    }


}

