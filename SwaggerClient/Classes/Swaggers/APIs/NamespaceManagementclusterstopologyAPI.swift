//
// NamespaceManagementclusterstopologyAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class NamespaceManagementclusterstopologyAPI {
    /**
     Queries the Supervisor ID that is currently running on the given vSphere Cluster ID, if there's any. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters.
     
     - parameter cluster: (path) Identifier for a vSphere Cluster. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(cluster: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(cluster: cluster).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Queries the Supervisor ID that is currently running on the given vSphere Cluster ID, if there's any. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters.
     - GET /api/vcenter/namespace-management/clusters/{cluster}/topology
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter cluster: (path) Identifier for a vSphere Cluster. The parameter must be an identifier for the resource type: ClusterComputeResource. 

     - returns: RequestBuilder<String> 
     */
    open class func callGetWithRequestBuilder(cluster: String) -> RequestBuilder<String> {
        var path = "/api/vcenter/namespace-management/clusters/{cluster}/topology"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
