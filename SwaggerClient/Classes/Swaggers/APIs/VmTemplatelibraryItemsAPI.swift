//
// VmTemplatelibraryItemsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class VmTemplatelibraryItemsAPI {
    /**
     Returns information about a virtual machine template contained in the library item specified by {@param.name templateLibraryItem}
     
     - parameter templateLibraryItem: (path) identifier of the library item containing the virtual machine template. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(templateLibraryItem: String, completion: @escaping ((_ data: VcenterVmTemplateLibraryItemsInfo?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(templateLibraryItem: templateLibraryItem).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about a virtual machine template contained in the library item specified by {@param.name templateLibraryItem}
     - GET /api/vcenter/vm-template/library-items/{template_library_item}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter templateLibraryItem: (path) identifier of the library item containing the virtual machine template. 

     - returns: RequestBuilder<VcenterVmTemplateLibraryItemsInfo> 
     */
    open class func callGetWithRequestBuilder(templateLibraryItem: String) -> RequestBuilder<VcenterVmTemplateLibraryItemsInfo> {
        var path = "/api/vcenter/vm-template/library-items/{template_library_item}"
        let templateLibraryItemPreEscape = "\(templateLibraryItem)"
        let templateLibraryItemPostEscape = templateLibraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_library_item}", with: templateLibraryItemPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterVmTemplateLibraryItemsInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns information about a virtual machine template contained in the library item specified by {@param.name templateLibraryItem}
     
     - parameter templateLibraryItem: (path) identifier of the library item containing the virtual machine template. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet_0(templateLibraryItem: String, completion: @escaping ((_ data: VcenterVmTemplateLibraryItemsResp?,_ error: Error?) -> Void)) {
        callGet_0WithRequestBuilder(templateLibraryItem: templateLibraryItem).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about a virtual machine template contained in the library item specified by {@param.name templateLibraryItem}
     - GET /rest/vcenter/vm-template/library-items/{template_library_item}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter templateLibraryItem: (path) identifier of the library item containing the virtual machine template. 

     - returns: RequestBuilder<VcenterVmTemplateLibraryItemsResp> 
     */
    open class func callGet_0WithRequestBuilder(templateLibraryItem: String) -> RequestBuilder<VcenterVmTemplateLibraryItemsResp> {
        var path = "/rest/vcenter/vm-template/library-items/{template_library_item}"
        let templateLibraryItemPreEscape = "\(templateLibraryItem)"
        let templateLibraryItemPostEscape = templateLibraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_library_item}", with: templateLibraryItemPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterVmTemplateLibraryItemsResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Creates a library item in content library from a virtual machine. This {@term operation} creates a library item in content library whose content is a virtual machine template created from the source virtual machine, using the supplied create specification. The virtual machine template is stored in a newly created library item.
     
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(requestBody: VcenterVmTemplateLibraryItemsCreate? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates a library item in content library from a virtual machine. This {@term operation} creates a library item in content library whose content is a virtual machine template created from the source virtual machine, using the supplied create specification. The virtual machine template is stored in a newly created library item.
     - POST /api/vcenter/vm-template/library-items
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func createWithRequestBuilder(requestBody: VcenterVmTemplateLibraryItemsCreate? = nil) -> RequestBuilder<String> {
        let path = "/api/vcenter/vm-template/library-items"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Creates a library item in content library from a virtual machine. This {@term operation} creates a library item in content library whose content is a virtual machine template created from the source virtual machine, using the supplied create specification. The virtual machine template is stored in a newly created library item.
     
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create_0(requestBody: VcenterVmTemplateLibraryItemsCreate, completion: @escaping ((_ data: VcenterVmTemplateLibraryItemsCreateResp?,_ error: Error?) -> Void)) {
        create_0WithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates a library item in content library from a virtual machine. This {@term operation} creates a library item in content library whose content is a virtual machine template created from the source virtual machine, using the supplied create specification. The virtual machine template is stored in a newly created library item.
     - POST /rest/vcenter/vm-template/library-items
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter requestBody: (body)  

     - returns: RequestBuilder<VcenterVmTemplateLibraryItemsCreateResp> 
     */
    open class func create_0WithRequestBuilder(requestBody: VcenterVmTemplateLibraryItemsCreate) -> RequestBuilder<VcenterVmTemplateLibraryItemsCreateResp> {
        let path = "/rest/vcenter/vm-template/library-items"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterVmTemplateLibraryItemsCreateResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Deploys a virtual machine as a copy of the source virtual machine template contained in the library item specified by {@param.name templateLibraryItem}. It uses the deployment specification in {@param.name spec}. If {@link DeploySpec#poweredOn} and/or {@link DeploySpec#guestCustomization} are specified, the server triggers the power on and/or guest customization operations, which are executed asynchronously.
     
     - parameter templateLibraryItem: (path) identifier of the content library item containing the source virtual machine template to be deployed. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deploy(templateLibraryItem: String, requestBody: VcenterVmTemplateLibraryItemsDeploy? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        deployWithRequestBuilder(templateLibraryItem: templateLibraryItem, requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Deploys a virtual machine as a copy of the source virtual machine template contained in the library item specified by {@param.name templateLibraryItem}. It uses the deployment specification in {@param.name spec}. If {@link DeploySpec#poweredOn} and/or {@link DeploySpec#guestCustomization} are specified, the server triggers the power on and/or guest customization operations, which are executed asynchronously.
     - POST /api/vcenter/vm-template/library-items/{template_library_item}?action=deploy
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter templateLibraryItem: (path) identifier of the content library item containing the source virtual machine template to be deployed. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func deployWithRequestBuilder(templateLibraryItem: String, requestBody: VcenterVmTemplateLibraryItemsDeploy? = nil) -> RequestBuilder<String> {
        var path = "/api/vcenter/vm-template/library-items/{template_library_item}?action=deploy"
        let templateLibraryItemPreEscape = "\(templateLibraryItem)"
        let templateLibraryItemPostEscape = templateLibraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_library_item}", with: templateLibraryItemPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Deploys a virtual machine as a copy of the source virtual machine template contained in the library item specified by {@param.name templateLibraryItem}. It uses the deployment specification in {@param.name spec}. If {@link DeploySpec#poweredOn} and/or {@link DeploySpec#guestCustomization} are specified, the server triggers the power on and/or guest customization operations, which are executed asynchronously.
     
     - parameter templateLibraryItem: (path) identifier of the content library item containing the source virtual machine template to be deployed. 
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deploy_0(templateLibraryItem: String, requestBody: VcenterVmTemplateLibraryItemsDeploy, completion: @escaping ((_ data: VcenterVmTemplateLibraryItemsDeployResp?,_ error: Error?) -> Void)) {
        deploy_0WithRequestBuilder(templateLibraryItem: templateLibraryItem, requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Deploys a virtual machine as a copy of the source virtual machine template contained in the library item specified by {@param.name templateLibraryItem}. It uses the deployment specification in {@param.name spec}. If {@link DeploySpec#poweredOn} and/or {@link DeploySpec#guestCustomization} are specified, the server triggers the power on and/or guest customization operations, which are executed asynchronously.
     - POST /rest/vcenter/vm-template/library-items/{template_library_item}?action=deploy
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter templateLibraryItem: (path) identifier of the content library item containing the source virtual machine template to be deployed. 
     - parameter requestBody: (body)  

     - returns: RequestBuilder<VcenterVmTemplateLibraryItemsDeployResp> 
     */
    open class func deploy_0WithRequestBuilder(templateLibraryItem: String, requestBody: VcenterVmTemplateLibraryItemsDeploy) -> RequestBuilder<VcenterVmTemplateLibraryItemsDeployResp> {
        var path = "/rest/vcenter/vm-template/library-items/{template_library_item}?action=deploy"
        let templateLibraryItemPreEscape = "\(templateLibraryItem)"
        let templateLibraryItemPostEscape = templateLibraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_library_item}", with: templateLibraryItemPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterVmTemplateLibraryItemsDeployResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
