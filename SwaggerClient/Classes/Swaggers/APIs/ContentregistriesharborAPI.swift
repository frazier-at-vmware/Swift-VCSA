//
// ContentregistriesharborAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ContentregistriesharborAPI {
    /**
     Get detailed information of the Harbor registry.
     
     - parameter registry: (path) Identifier of the registry. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(registry: String, completion: @escaping ((_ data: VcenterContentRegistriesHarborInfo?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(registry: registry).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get detailed information of the Harbor registry.
     - GET /api/vcenter/content/registries/harbor/{registry}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter registry: (path) Identifier of the registry. 

     - returns: RequestBuilder<VcenterContentRegistriesHarborInfo> 
     */
    open class func callGetWithRequestBuilder(registry: String) -> RequestBuilder<VcenterContentRegistriesHarborInfo> {
        var path = "/api/vcenter/content/registries/harbor/{registry}"
        let registryPreEscape = "\(registry)"
        let registryPostEscape = registryPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{registry}", with: registryPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterContentRegistriesHarborInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get detailed information of the Harbor registry.
     
     - parameter registry: (path) Identifier of the registry. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet_0(registry: String, completion: @escaping ((_ data: VcenterContentRegistriesHarborResp?,_ error: Error?) -> Void)) {
        callGet_0WithRequestBuilder(registry: registry).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get detailed information of the Harbor registry.
     - GET /rest/vcenter/content/registries/harbor/{registry}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter registry: (path) Identifier of the registry. 

     - returns: RequestBuilder<VcenterContentRegistriesHarborResp> 
     */
    open class func callGet_0WithRequestBuilder(registry: String) -> RequestBuilder<VcenterContentRegistriesHarborResp> {
        var path = "/rest/vcenter/content/registries/harbor/{registry}"
        let registryPreEscape = "\(registry)"
        let registryPostEscape = registryPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{registry}", with: registryPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterContentRegistriesHarborResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Creates a Harbor registry in the cluster.
     
     - parameter requestBody: (body)  (optional)
     - parameter clientToken: (query) A unique token generated on the client for each creation request. The token should be a universally unique identifier (UUID), for example: {@code b8a2a2e3-2314-43cd-a871-6ede0f429751}. This token can be used to guarantee idempotent creation. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(requestBody: VcenterContentRegistriesHarborCreate? = nil, clientToken: String? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(requestBody: requestBody, clientToken: clientToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates a Harbor registry in the cluster.
     - POST /api/vcenter/content/registries/harbor
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter requestBody: (body)  (optional)
     - parameter clientToken: (query) A unique token generated on the client for each creation request. The token should be a universally unique identifier (UUID), for example: {@code b8a2a2e3-2314-43cd-a871-6ede0f429751}. This token can be used to guarantee idempotent creation. (optional)

     - returns: RequestBuilder<String> 
     */
    open class func createWithRequestBuilder(requestBody: VcenterContentRegistriesHarborCreate? = nil, clientToken: String? = nil) -> RequestBuilder<String> {
        let path = "/api/vcenter/content/registries/harbor"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "client_token": clientToken
        ])

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Creates a Harbor registry in the cluster.
     
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create_0(requestBody: VcenterContentRegistriesHarborCreate, completion: @escaping ((_ data: VcenterContentRegistriesHarborCreateResp?,_ error: Error?) -> Void)) {
        create_0WithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates a Harbor registry in the cluster.
     - POST /rest/vcenter/content/registries/harbor
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter requestBody: (body)  

     - returns: RequestBuilder<VcenterContentRegistriesHarborCreateResp> 
     */
    open class func create_0WithRequestBuilder(requestBody: VcenterContentRegistriesHarborCreate) -> RequestBuilder<VcenterContentRegistriesHarborCreateResp> {
        let path = "/rest/vcenter/content/registries/harbor"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterContentRegistriesHarborCreateResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete the Harbor registry in the cluster. All Harbor projects, repositories and images will be deleted upon Harbor registry deletion.
     
     - parameter registry: (path) Identifier of the registry. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(registry: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(registry: registry).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete the Harbor registry in the cluster. All Harbor projects, repositories and images will be deleted upon Harbor registry deletion.
     - DELETE /api/vcenter/content/registries/harbor/{registry}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter registry: (path) Identifier of the registry. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(registry: String) -> RequestBuilder<Void> {
        var path = "/api/vcenter/content/registries/harbor/{registry}"
        let registryPreEscape = "\(registry)"
        let registryPostEscape = registryPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{registry}", with: registryPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete the Harbor registry in the cluster. All Harbor projects, repositories and images will be deleted upon Harbor registry deletion.
     
     - parameter registry: (path) Identifier of the registry. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete_0(registry: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        delete_0WithRequestBuilder(registry: registry).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete the Harbor registry in the cluster. All Harbor projects, repositories and images will be deleted upon Harbor registry deletion.
     - DELETE /rest/vcenter/content/registries/harbor/{registry}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter registry: (path) Identifier of the registry. 

     - returns: RequestBuilder<Void> 
     */
    open class func delete_0WithRequestBuilder(registry: String) -> RequestBuilder<Void> {
        var path = "/rest/vcenter/content/registries/harbor/{registry}"
        let registryPreEscape = "\(registry)"
        let registryPostEscape = registryPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{registry}", with: registryPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns basic information of all Harbor registries.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(completion: @escaping ((_ data: [VcenterContentRegistriesHarborSummary]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns basic information of all Harbor registries.
     - GET /api/vcenter/content/registries/harbor
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]

     - returns: RequestBuilder<[VcenterContentRegistriesHarborSummary]> 
     */
    open class func listWithRequestBuilder() -> RequestBuilder<[VcenterContentRegistriesHarborSummary]> {
        let path = "/api/vcenter/content/registries/harbor"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[VcenterContentRegistriesHarborSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns basic information of all Harbor registries.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list_0(completion: @escaping ((_ data: VcenterContentRegistriesHarborListResp?,_ error: Error?) -> Void)) {
        list_0WithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns basic information of all Harbor registries.
     - GET /rest/vcenter/content/registries/harbor
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]

     - returns: RequestBuilder<VcenterContentRegistriesHarborListResp> 
     */
    open class func list_0WithRequestBuilder() -> RequestBuilder<VcenterContentRegistriesHarborListResp> {
        let path = "/rest/vcenter/content/registries/harbor"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterContentRegistriesHarborListResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
