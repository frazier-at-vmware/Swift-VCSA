//
// InventorydatastoreAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class InventorydatastoreAPI {
    /**
     Returns datastore information for the specified datastores. The key in the {@term result} {@term map} is the datastore identifier and the value in the {@term map} is the datastore information.
     
     - parameter datastores: (query) Identifiers of the datastores for which information will be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func find(datastores: [String], completion: @escaping ((_ data: [String:VcenterInventoryDatastoreInfo]?,_ error: Error?) -> Void)) {
        findWithRequestBuilder(datastores: datastores).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns datastore information for the specified datastores. The key in the {@term result} {@term map} is the datastore identifier and the value in the {@term map} is the datastore information.
     - GET /api/vcenter/inventory/datastore
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter datastores: (query) Identifiers of the datastores for which information will be returned. 

     - returns: RequestBuilder<[String:VcenterInventoryDatastoreInfo]> 
     */
    open class func findWithRequestBuilder(datastores: [String]) -> RequestBuilder<[String:VcenterInventoryDatastoreInfo]> {
        let path = "/api/vcenter/inventory/datastore"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "datastores": datastores
        ])

        let requestBuilder: RequestBuilder<[String:VcenterInventoryDatastoreInfo]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns datastore information for the specified datastores. The key in the {@term result} {@term map} is the datastore identifier and the value in the {@term map} is the datastore information.
     
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func find_0(requestBody: VcenterInventoryDatastoreFind, completion: @escaping ((_ data: VcenterInventoryDatastoreFindResp?,_ error: Error?) -> Void)) {
        find_0WithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns datastore information for the specified datastores. The key in the {@term result} {@term map} is the datastore identifier and the value in the {@term map} is the datastore information.
     - POST /rest/com/vmware/vcenter/inventory/datastore?~action=find
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter requestBody: (body)  

     - returns: RequestBuilder<VcenterInventoryDatastoreFindResp> 
     */
    open class func find_0WithRequestBuilder(requestBody: VcenterInventoryDatastoreFind) -> RequestBuilder<VcenterInventoryDatastoreFindResp> {
        let path = "/rest/com/vmware/vcenter/inventory/datastore?~action=find"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterInventoryDatastoreFindResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
