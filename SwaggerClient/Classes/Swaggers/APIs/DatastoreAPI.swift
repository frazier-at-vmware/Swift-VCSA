//
// DatastoreAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DatastoreAPI {
    /**
     Retrieves information about the datastore indicated by datastore.
     
     - parameter datastore: (path) Identifier of the datastore for which information should be retrieved. The parameter must be an identifier for the resource type: Datastore. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(datastore: String, completion: @escaping ((_ data: VcenterDatastoreInfo?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(datastore: datastore).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves information about the datastore indicated by datastore.
     - GET /api/vcenter/datastore/{datastore}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter datastore: (path) Identifier of the datastore for which information should be retrieved. The parameter must be an identifier for the resource type: Datastore. 

     - returns: RequestBuilder<VcenterDatastoreInfo> 
     */
    open class func callGetWithRequestBuilder(datastore: String) -> RequestBuilder<VcenterDatastoreInfo> {
        var path = "/api/vcenter/datastore/{datastore}"
        let datastorePreEscape = "\(datastore)"
        let datastorePostEscape = datastorePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{datastore}", with: datastorePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterDatastoreInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves information about the datastore indicated by datastore.
     
     - parameter datastore: (path) Identifier of the datastore for which information should be retrieved. The parameter must be an identifier for the resource type: Datastore. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet_0(datastore: String, completion: @escaping ((_ data: VcenterDatastoreResp?,_ error: Error?) -> Void)) {
        callGet_0WithRequestBuilder(datastore: datastore).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves information about the datastore indicated by datastore.
     - GET /rest/vcenter/datastore/{datastore}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter datastore: (path) Identifier of the datastore for which information should be retrieved. The parameter must be an identifier for the resource type: Datastore. 

     - returns: RequestBuilder<VcenterDatastoreResp> 
     */
    open class func callGet_0WithRequestBuilder(datastore: String) -> RequestBuilder<VcenterDatastoreResp> {
        var path = "/rest/vcenter/datastore/{datastore}"
        let datastorePreEscape = "\(datastore)"
        let datastorePostEscape = datastorePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{datastore}", with: datastorePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterDatastoreResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter types
     */
    public enum Types_list: String { 
        case vmfs = "VMFS"
        case nfs = "NFS"
        case nfs41 = "NFS41"
        case cifs = "CIFS"
        case vsan = "VSAN"
        case vffs = "VFFS"
        case vvol = "VVOL"
    }

    /**
     Returns information about at most 2500 visible (subject to permission checks) datastores in vCenter matching the Datastore.FilterSpec.
     
     - parameter datastores: (query) Identifiers of datastores that can match the filter. If unset or empty, datastores with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datastore. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datastore. (optional)
     - parameter names: (query) Names that datastores must have to match the filter (see Datastore.Info.name). If unset or empty, datastores with any name match the filter. (optional)
     - parameter types: (query) Types that datastores must have to match the filter (see Datastore.Summary.type). If unset or empty, datastores with any type match the filter. (optional)
     - parameter folders: (query) Folders that must contain the datastore for the datastore to match the filter. If unset or empty, datastores in any folder match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. (optional)
     - parameter datacenters: (query) Datacenters that must contain the datastore for the datastore to match the filter. If unset or empty, datastores in any datacenter match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(datastores: [String]? = nil, names: [String]? = nil, types: [String]? = nil, folders: [String]? = nil, datacenters: [String]? = nil, completion: @escaping ((_ data: [VcenterDatastoreSummary]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(datastores: datastores, names: names, types: types, folders: folders, datacenters: datacenters).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about at most 2500 visible (subject to permission checks) datastores in vCenter matching the Datastore.FilterSpec.
     - GET /api/vcenter/datastore
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]
     
     - parameter datastores: (query) Identifiers of datastores that can match the filter. If unset or empty, datastores with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datastore. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datastore. (optional)
     - parameter names: (query) Names that datastores must have to match the filter (see Datastore.Info.name). If unset or empty, datastores with any name match the filter. (optional)
     - parameter types: (query) Types that datastores must have to match the filter (see Datastore.Summary.type). If unset or empty, datastores with any type match the filter. (optional)
     - parameter folders: (query) Folders that must contain the datastore for the datastore to match the filter. If unset or empty, datastores in any folder match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. (optional)
     - parameter datacenters: (query) Datacenters that must contain the datastore for the datastore to match the filter. If unset or empty, datastores in any datacenter match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter. (optional)

     - returns: RequestBuilder<[VcenterDatastoreSummary]> 
     */
    open class func listWithRequestBuilder(datastores: [String]? = nil, names: [String]? = nil, types: [String]? = nil, folders: [String]? = nil, datacenters: [String]? = nil) -> RequestBuilder<[VcenterDatastoreSummary]> {
        let path = "/api/vcenter/datastore"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "datastores": datastores, 
            "names": names, 
            "types": types, 
            "folders": folders, 
            "datacenters": datacenters
        ])

        let requestBuilder: RequestBuilder<[VcenterDatastoreSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter filterTypes
     */
    public enum FilterTypes_list_0: String { 
        case vmfs = "VMFS"
        case nfs = "NFS"
        case nfs41 = "NFS41"
        case cifs = "CIFS"
        case vsan = "VSAN"
        case vffs = "VFFS"
        case vvol = "VVOL"
    }

    /**
     Returns information about at most 2500 visible (subject to permission checks) datastores in vCenter matching the Datastore.FilterSpec.
     
     - parameter filterDatastores: (query) Identifiers of datastores that can match the filter. If unset or empty, datastores with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datastore. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datastore. (optional)
     - parameter filterNames: (query) Names that datastores must have to match the filter (see Datastore.Info.name). If unset or empty, datastores with any name match the filter. (optional)
     - parameter filterTypes: (query) Types that datastores must have to match the filter (see Datastore.Summary.type). If unset or empty, datastores with any type match the filter. (optional)
     - parameter filterFolders: (query) Folders that must contain the datastore for the datastore to match the filter. If unset or empty, datastores in any folder match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. (optional)
     - parameter filterDatacenters: (query) Datacenters that must contain the datastore for the datastore to match the filter. If unset or empty, datastores in any datacenter match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list_0(filterDatastores: [String]? = nil, filterNames: [String]? = nil, filterTypes: [String]? = nil, filterFolders: [String]? = nil, filterDatacenters: [String]? = nil, completion: @escaping ((_ data: VcenterDatastoreListResp?,_ error: Error?) -> Void)) {
        list_0WithRequestBuilder(filterDatastores: filterDatastores, filterNames: filterNames, filterTypes: filterTypes, filterFolders: filterFolders, filterDatacenters: filterDatacenters).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about at most 2500 visible (subject to permission checks) datastores in vCenter matching the Datastore.FilterSpec.
     - GET /rest/vcenter/datastore
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter filterDatastores: (query) Identifiers of datastores that can match the filter. If unset or empty, datastores with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datastore. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datastore. (optional)
     - parameter filterNames: (query) Names that datastores must have to match the filter (see Datastore.Info.name). If unset or empty, datastores with any name match the filter. (optional)
     - parameter filterTypes: (query) Types that datastores must have to match the filter (see Datastore.Summary.type). If unset or empty, datastores with any type match the filter. (optional)
     - parameter filterFolders: (query) Folders that must contain the datastore for the datastore to match the filter. If unset or empty, datastores in any folder match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. (optional)
     - parameter filterDatacenters: (query) Datacenters that must contain the datastore for the datastore to match the filter. If unset or empty, datastores in any datacenter match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter. (optional)

     - returns: RequestBuilder<VcenterDatastoreListResp> 
     */
    open class func list_0WithRequestBuilder(filterDatastores: [String]? = nil, filterNames: [String]? = nil, filterTypes: [String]? = nil, filterFolders: [String]? = nil, filterDatacenters: [String]? = nil) -> RequestBuilder<VcenterDatastoreListResp> {
        let path = "/rest/vcenter/datastore"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.datastores": filterDatastores, 
            "filter.names": filterNames, 
            "filter.types": filterTypes, 
            "filter.folders": filterFolders, 
            "filter.datacenters": filterDatacenters
        ])

        let requestBuilder: RequestBuilder<VcenterDatastoreListResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
