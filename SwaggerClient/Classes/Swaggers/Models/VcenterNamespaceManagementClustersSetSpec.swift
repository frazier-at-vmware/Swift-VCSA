//
// VcenterNamespaceManagementClustersSetSpec.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct VcenterNamespaceManagementClustersSetSpec: Codable {

    /** This affects the size and resources allocated to the Kubernetes API server. */
    public var sizeHint: VcenterNamespaceManagementSizingHint
    /** Optionally, you can edit the floating IP address that is assigned to the Supervisor in case the DHCP server fails during the Supervisor enablement process. The field is only relevant when the DHCP mode of the Supervisor management network is set with Clusters.EnableSpec.master-management-network. Set this floating IP parameter to remediate a supervisor enablement failure in the case where it was detected that the DHCP server does not support DHCP client identifiers. If unset, the existing effective management network floating IP will not be modified. */
    public var floatingIP: String?
    /** The provider of cluster networking for this vSphere Namespaces cluster. */
    public var networkProvider: VcenterNamespaceManagementClustersNetworkProvider
    /** Specification for the NSX Container Plugin cluster network. This field is optional and it is only relevant when the value of Clusters.SetSpec.network-provider is NSXT_CONTAINER_PLUGIN. */
    public var ncpClusterNetworkSpec: VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec?
    /** List of DNS server IP addresses to use on Kubernetes API server, specified in order of preference. If unset, DNS servers set on Kubernetes API server will be cleared. */
    public var masterDNS: [String]?
    /** List of DNS server IP addresses to use on the worker nodes, specified in order of preference. If unset, DNS servers set on worker nodes will be cleared. */
    public var workerDNS: [String]?
    /** List of domains (for example \&quot;vmware.com\&quot;) to be searched when trying to lookup a host name on Kubernetes API server, specified in order of preference. If unset, DNS search domains set on Kubernetes API server will be cleared. */
    public var masterDNSSearchDomains: [String]?
    /** List of NTP server DNS names or IP addresses to use on Kubernetes API server, specified in order of preference. If unset, VMware Tools based time synchronization is enabled and any set NTP servers are cleared. */
    public var masterNTPServers: [String]?
    /** Identifier of storage policy associated with Kubernetes API server. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: SpsStorageProfile. When operations return a value of this structure as a result, the field will be an identifier for the resource type: SpsStorageProfile. */
    public var masterStoragePolicy: String
    /** Identifier of storage policy associated with ephemeral disks of all the Kubernetes Pods in the cluster. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: SpsStorageProfile. When operations return a value of this structure as a result, the field will be an identifier for the resource type: SpsStorageProfile. */
    public var ephemeralStoragePolicy: String
    /** Specification for configuring Cloud Native Storage file volume support on Supervisor. This feature provides support for provisioning ReadWriteMany persistent volumes on this cluster and/or external clusters. If unset, file volume support will not be enabled on this Supervisor. */
    public var cnsFileConfig: VcenterNamespaceManagementCNSFileConfig?
    /** Disclaimer to be displayed prior to login via the Kubectl plugin. If unset, disclaimer to be displayed prior to login via the Kubectl plugin will be cleared. */
    public var loginBanner: String?
    /** Specification for storage to be used for container images. */
    public var imageStorage: VcenterNamespaceManagementClustersImageStorageSpec
    /** Default image registry to use when Kubernetes Pod container specification does not specify it as part of the container image name. If unset, default image registry will be set to Docker Hub. */
    public var defaultImageRegistry: VcenterNamespaceManagementClustersImageRegistry?
    /** Default image repository to use when Kubernetes Pod container specification does not specify it as part of the container image name. If unset, default image repository will be set to Docker Hub official repository in case of Docker Hub image registry, otherwise will be set to empty string. */
    public var defaultImageRepository: String?
    /** Identifier of the Content Library which holds the VM Images for vSphere Kubernetes Service. This Content Library should be subscribed to VMware&#39;s hosted vSphere Kubernetes Service Repository. Modifying or clearing the Content Library identifier will not affect existing vSphere Kubernetes Service clusters. However, upgrades or scale-out of existing clusters may be affected if the new Content Library doesn&#39;t have the necessary VM Images. If unset, the Content Library identifier will be cleared. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: content.Library. When operations return a value of this structure as a result, the field will be an identifier for the resource type: content.Library. */
    public var defaultKubernetesServiceContentLibrary: String?
    /** List of NTP server DNS names or IP addresses to use for workloads such as Tanzu Kubernetes Grid VMs, specified in order of preference. If unset, NTP for Kubernetes API servers will be used. */
    public var workloadNtpServers: [String]?
    /** Proxy configuration that will be applied to the Supervisor. The proxy should be reachable from the management network and will be used for image pulling and container traffic exiting out of the Supervisor. Modifying these settings will result in a restart of the container runtime. Workloads might fail to pull their images for a short period of time. There will be no effect on the currently running containers. If unset the settings will be inherited from the vCenter settings if available. */
    public var clusterProxyConfig: VcenterNamespaceManagementProxyConfiguration?

    public init(sizeHint: VcenterNamespaceManagementSizingHint, floatingIP: String?, networkProvider: VcenterNamespaceManagementClustersNetworkProvider, ncpClusterNetworkSpec: VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec?, masterDNS: [String]?, workerDNS: [String]?, masterDNSSearchDomains: [String]?, masterNTPServers: [String]?, masterStoragePolicy: String, ephemeralStoragePolicy: String, cnsFileConfig: VcenterNamespaceManagementCNSFileConfig?, loginBanner: String?, imageStorage: VcenterNamespaceManagementClustersImageStorageSpec, defaultImageRegistry: VcenterNamespaceManagementClustersImageRegistry?, defaultImageRepository: String?, defaultKubernetesServiceContentLibrary: String?, workloadNtpServers: [String]?, clusterProxyConfig: VcenterNamespaceManagementProxyConfiguration?) {
        self.sizeHint = sizeHint
        self.floatingIP = floatingIP
        self.networkProvider = networkProvider
        self.ncpClusterNetworkSpec = ncpClusterNetworkSpec
        self.masterDNS = masterDNS
        self.workerDNS = workerDNS
        self.masterDNSSearchDomains = masterDNSSearchDomains
        self.masterNTPServers = masterNTPServers
        self.masterStoragePolicy = masterStoragePolicy
        self.ephemeralStoragePolicy = ephemeralStoragePolicy
        self.cnsFileConfig = cnsFileConfig
        self.loginBanner = loginBanner
        self.imageStorage = imageStorage
        self.defaultImageRegistry = defaultImageRegistry
        self.defaultImageRepository = defaultImageRepository
        self.defaultKubernetesServiceContentLibrary = defaultKubernetesServiceContentLibrary
        self.workloadNtpServers = workloadNtpServers
        self.clusterProxyConfig = clusterProxyConfig
    }

    public enum CodingKeys: String, CodingKey { 
        case sizeHint = "size_hint"
        case floatingIP = "floating_IP"
        case networkProvider = "network_provider"
        case ncpClusterNetworkSpec = "ncp_cluster_network_spec"
        case masterDNS = "master_DNS"
        case workerDNS = "worker_DNS"
        case masterDNSSearchDomains = "master_DNS_search_domains"
        case masterNTPServers = "master_NTP_servers"
        case masterStoragePolicy = "master_storage_policy"
        case ephemeralStoragePolicy = "ephemeral_storage_policy"
        case cnsFileConfig = "cns_file_config"
        case loginBanner = "login_banner"
        case imageStorage = "image_storage"
        case defaultImageRegistry = "default_image_registry"
        case defaultImageRepository = "default_image_repository"
        case defaultKubernetesServiceContentLibrary = "default_kubernetes_service_content_library"
        case workloadNtpServers = "workload_ntp_servers"
        case clusterProxyConfig = "cluster_proxy_config"
    }


}

