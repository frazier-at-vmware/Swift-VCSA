//
// VcenterIdentityProvidersOauth2CreateSpec.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct VcenterIdentityProvidersOauth2CreateSpec: Codable {

    /** Authentication/authorization endpoint of the provider */
    public var authEndpoint: String
    /** Token endpoint of the provider */
    public var tokenEndpoint: String
    /** Endpoint to retrieve the provider public key for validation */
    public var publicKeyUri: String
    /** Client identifier to connect to the provider */
    public var clientId: String
    /** The secret shared between the client and the provider */
    public var clientSecret: String
    /** The map used to transform an OAuth2 claim to a corresponding claim that vCenter Server understands. Currently only the key \&quot;perms\&quot; is supported. The key \&quot;perms\&quot; is used for mapping the \&quot;perms\&quot; claim of incoming JWT. The value is another map with an external group as the key and a vCenter Server group as value. */
    public var claimMap: [VcenterIdentityProvidersOauth2CreateSpecClaimMap]
    /** The identity provider namespace. It is used to validate the issuer in the acquired OAuth2 token. */
    public var issuer: String
    /** Authentication method used by the provider */
    public var authenticationMethod: VcenterIdentityProvidersOauth2AuthenticationMethod
    /**  key/value pairs that are to be appended to the authEndpoint request.   How to append to authEndpoint request:  If the map is not empty, a \&quot;?\&quot; is added to the endpoint URL, and combination of each k and each string in the v is added with an \&quot;&amp;\&quot; delimiter. Details:    - If the value contains only one string, then the key is added with \&quot;k&#x3D;v\&quot;.    - If the value is an empty list, then the key is added without a \&quot;&#x3D;v\&quot;.    - If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.  If unset, the map will be empty. */
    public var authQueryParams: [VcenterIdentityProvidersCreateSpecAuthQueryParams]?

    public init(authEndpoint: String, tokenEndpoint: String, publicKeyUri: String, clientId: String, clientSecret: String, claimMap: [VcenterIdentityProvidersOauth2CreateSpecClaimMap], issuer: String, authenticationMethod: VcenterIdentityProvidersOauth2AuthenticationMethod, authQueryParams: [VcenterIdentityProvidersCreateSpecAuthQueryParams]?) {
        self.authEndpoint = authEndpoint
        self.tokenEndpoint = tokenEndpoint
        self.publicKeyUri = publicKeyUri
        self.clientId = clientId
        self.clientSecret = clientSecret
        self.claimMap = claimMap
        self.issuer = issuer
        self.authenticationMethod = authenticationMethod
        self.authQueryParams = authQueryParams
    }

    public enum CodingKeys: String, CodingKey { 
        case authEndpoint = "auth_endpoint"
        case tokenEndpoint = "token_endpoint"
        case publicKeyUri = "public_key_uri"
        case clientId = "client_id"
        case clientSecret = "client_secret"
        case claimMap = "claim_map"
        case issuer
        case authenticationMethod = "authentication_method"
        case authQueryParams = "auth_query_params"
    }


}

