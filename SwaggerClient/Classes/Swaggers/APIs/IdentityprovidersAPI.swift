//
// IdentityprovidersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class IdentityprovidersAPI {
    /**
     Retrieve detailed information of the specified identity provider. if you do not have all of the privileges described as follows:     -  Operation execution requires VcIdentityProviders.Read and VcIdentityProviders.Manage.  
     
     - parameter provider: (path) the identifier of the provider The parameter must be an identifier for the resource type: vcenter.identity.Providers. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(provider: String, completion: @escaping ((_ data: VcenterIdentityProvidersInfo?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(provider: provider).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve detailed information of the specified identity provider. if you do not have all of the privileges described as follows:     -  Operation execution requires VcIdentityProviders.Read and VcIdentityProviders.Manage.  
     - GET /api/vcenter/identity/providers/{provider}
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter provider: (path) the identifier of the provider The parameter must be an identifier for the resource type: vcenter.identity.Providers. 

     - returns: RequestBuilder<VcenterIdentityProvidersInfo> 
     */
    open class func callGetWithRequestBuilder(provider: String) -> RequestBuilder<VcenterIdentityProvidersInfo> {
        var path = "/api/vcenter/identity/providers/{provider}"
        let providerPreEscape = "\(provider)"
        let providerPostEscape = providerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{provider}", with: providerPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterIdentityProvidersInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve detailed information of the specified identity provider. if you do not have all of the privileges described as follows:     -  Operation execution requires VcIdentityProviders.Read and VcIdentityProviders.Manage.  
     
     - parameter provider: (path) the identifier of the provider The parameter must be an identifier for the resource type: vcenter.identity.Providers. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet_0(provider: String, completion: @escaping ((_ data: VcenterIdentityProvidersResp?,_ error: Error?) -> Void)) {
        callGet_0WithRequestBuilder(provider: provider).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve detailed information of the specified identity provider. if you do not have all of the privileges described as follows:     -  Operation execution requires VcIdentityProviders.Read and VcIdentityProviders.Manage.  
     - GET /rest/vcenter/identity/providers/{provider}
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter provider: (path) the identifier of the provider The parameter must be an identifier for the resource type: vcenter.identity.Providers. 

     - returns: RequestBuilder<VcenterIdentityProvidersResp> 
     */
    open class func callGet_0WithRequestBuilder(provider: String) -> RequestBuilder<VcenterIdentityProvidersResp> {
        var path = "/rest/vcenter/identity/providers/{provider}"
        let providerPreEscape = "\(provider)"
        let providerPostEscape = providerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{provider}", with: providerPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterIdentityProvidersResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a vCenter Server identity provider. if you do not have all of the privileges described as follows:     -  Operation execution requires VcIdentityProviders.Create and VcIdentityProviders.Manage.  
     
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(requestBody: VcenterIdentityProvidersCreate? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a vCenter Server identity provider. if you do not have all of the privileges described as follows:     -  Operation execution requires VcIdentityProviders.Create and VcIdentityProviders.Manage.  
     - POST /api/vcenter/identity/providers
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func createWithRequestBuilder(requestBody: VcenterIdentityProvidersCreate? = nil) -> RequestBuilder<String> {
        let path = "/api/vcenter/identity/providers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a vCenter Server identity provider. if you do not have all of the privileges described as follows:     -  Operation execution requires VcIdentityProviders.Create and VcIdentityProviders.Manage.  
     
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create_0(requestBody: VcenterIdentityProvidersCreate, completion: @escaping ((_ data: VcenterIdentityProvidersCreateResp?,_ error: Error?) -> Void)) {
        create_0WithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a vCenter Server identity provider. if you do not have all of the privileges described as follows:     -  Operation execution requires VcIdentityProviders.Create and VcIdentityProviders.Manage.  
     - POST /rest/vcenter/identity/providers
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter requestBody: (body)  

     - returns: RequestBuilder<VcenterIdentityProvidersCreateResp> 
     */
    open class func create_0WithRequestBuilder(requestBody: VcenterIdentityProvidersCreate) -> RequestBuilder<VcenterIdentityProvidersCreateResp> {
        let path = "/rest/vcenter/identity/providers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterIdentityProvidersCreateResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a vCenter Server identity provider. if you do not have all of the privileges described as follows:     -  Operation execution requires VcIdentityProviders.Manage.  
     
     - parameter provider: (path) the identifier of the provider to delete The parameter must be an identifier for the resource type: vcenter.identity.Providers. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(provider: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(provider: provider).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a vCenter Server identity provider. if you do not have all of the privileges described as follows:     -  Operation execution requires VcIdentityProviders.Manage.  
     - DELETE /api/vcenter/identity/providers/{provider}
     
     - parameter provider: (path) the identifier of the provider to delete The parameter must be an identifier for the resource type: vcenter.identity.Providers. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(provider: String) -> RequestBuilder<Void> {
        var path = "/api/vcenter/identity/providers/{provider}"
        let providerPreEscape = "\(provider)"
        let providerPostEscape = providerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{provider}", with: providerPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a vCenter Server identity provider. if you do not have all of the privileges described as follows:     -  Operation execution requires VcIdentityProviders.Manage.  
     
     - parameter provider: (path) the identifier of the provider to delete The parameter must be an identifier for the resource type: vcenter.identity.Providers. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete_0(provider: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        delete_0WithRequestBuilder(provider: provider).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a vCenter Server identity provider. if you do not have all of the privileges described as follows:     -  Operation execution requires VcIdentityProviders.Manage.  
     - DELETE /rest/vcenter/identity/providers/{provider}
     
     - parameter provider: (path) the identifier of the provider to delete The parameter must be an identifier for the resource type: vcenter.identity.Providers. 

     - returns: RequestBuilder<Void> 
     */
    open class func delete_0WithRequestBuilder(provider: String) -> RequestBuilder<Void> {
        var path = "/rest/vcenter/identity/providers/{provider}"
        let providerPreEscape = "\(provider)"
        let providerPostEscape = providerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{provider}", with: providerPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve all identity providers. if you do not have all of the privileges described as follows:     -  Operation execution requires VcIdentityProviders.Read and VcIdentityProviders.Manage.  
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(completion: @escaping ((_ data: [VcenterIdentityProvidersSummary]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve all identity providers. if you do not have all of the privileges described as follows:     -  Operation execution requires VcIdentityProviders.Read and VcIdentityProviders.Manage.  
     - GET /api/vcenter/identity/providers
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]

     - returns: RequestBuilder<[VcenterIdentityProvidersSummary]> 
     */
    open class func listWithRequestBuilder() -> RequestBuilder<[VcenterIdentityProvidersSummary]> {
        let path = "/api/vcenter/identity/providers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[VcenterIdentityProvidersSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve all identity providers. if you do not have all of the privileges described as follows:     -  Operation execution requires VcIdentityProviders.Read and VcIdentityProviders.Manage.  
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list_0(completion: @escaping ((_ data: VcenterIdentityProvidersListResp?,_ error: Error?) -> Void)) {
        list_0WithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve all identity providers. if you do not have all of the privileges described as follows:     -  Operation execution requires VcIdentityProviders.Read and VcIdentityProviders.Manage.  
     - GET /rest/vcenter/identity/providers
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]

     - returns: RequestBuilder<VcenterIdentityProvidersListResp> 
     */
    open class func list_0WithRequestBuilder() -> RequestBuilder<VcenterIdentityProvidersListResp> {
        let path = "/rest/vcenter/identity/providers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterIdentityProvidersListResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a vCenter Server identity provider. if you do not have all of the privileges described as follows:     -  Operation execution requires VcIdentityProviders.Manage.  
     
     - parameter provider: (path) the identifier of the provider to update The parameter must be an identifier for the resource type: vcenter.identity.Providers. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(provider: String, requestBody: VcenterIdentityProvidersUpdate? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(provider: provider, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update a vCenter Server identity provider. if you do not have all of the privileges described as follows:     -  Operation execution requires VcIdentityProviders.Manage.  
     - PATCH /api/vcenter/identity/providers/{provider}
     
     - parameter provider: (path) the identifier of the provider to update The parameter must be an identifier for the resource type: vcenter.identity.Providers. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateWithRequestBuilder(provider: String, requestBody: VcenterIdentityProvidersUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/api/vcenter/identity/providers/{provider}"
        let providerPreEscape = "\(provider)"
        let providerPostEscape = providerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{provider}", with: providerPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a vCenter Server identity provider. if you do not have all of the privileges described as follows:     -  Operation execution requires VcIdentityProviders.Manage.  
     
     - parameter provider: (path) the identifier of the provider to update The parameter must be an identifier for the resource type: vcenter.identity.Providers. 
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update_0(provider: String, requestBody: VcenterIdentityProvidersUpdate, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        update_0WithRequestBuilder(provider: provider, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update a vCenter Server identity provider. if you do not have all of the privileges described as follows:     -  Operation execution requires VcIdentityProviders.Manage.  
     - PATCH /rest/vcenter/identity/providers/{provider}
     
     - parameter provider: (path) the identifier of the provider to update The parameter must be an identifier for the resource type: vcenter.identity.Providers. 
     - parameter requestBody: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func update_0WithRequestBuilder(provider: String, requestBody: VcenterIdentityProvidersUpdate) -> RequestBuilder<Void> {
        var path = "/rest/vcenter/identity/providers/{provider}"
        let providerPreEscape = "\(provider)"
        let providerPostEscape = providerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{provider}", with: providerPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
