//
// VcenterNetworkFilterSpec.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct VcenterNetworkFilterSpec: Codable {

    /** Identifiers of networks that can match the filter. If unset or empty, networks with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Network. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Network. */
    public var networks: [String]?
    /** Names that networks must have to match the filter (see Network.Summary.name). If unset or empty, networks with any name match the filter. */
    public var names: [String]?
    /** Types that networks must have to match the filter (see Network.Summary.type). If unset, networks with any type match the filter. */
    public var types: [VcenterNetworkType]?
    /** Folders that must contain the network for the network to match the filter. If unset or empty, networks in any folder match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. */
    public var folders: [String]?
    /** Datacenters that must contain the network for the network to match the filter. If unset or empty, networks in any datacenter match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter. */
    public var datacenters: [String]?

    public init(networks: [String]?, names: [String]?, types: [VcenterNetworkType]?, folders: [String]?, datacenters: [String]?) {
        self.networks = networks
        self.names = names
        self.types = types
        self.folders = folders
        self.datacenters = datacenters
    }


}

