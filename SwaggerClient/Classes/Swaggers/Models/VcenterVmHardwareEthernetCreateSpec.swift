//
// VcenterVmHardwareEthernetCreateSpec.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct VcenterVmHardwareEthernetCreateSpec: Codable {

    /** Ethernet adapter emulation type. If unset, defaults to a guest-specific type. */
    public var type: VcenterVmHardwareEthernetEmulationType?
    /** Flag indicating whether Universal Pass-Through (UPT) compatibility is enabled on this virtual Ethernet adapter. If unset, UPT will not be enabled on the newly-created virtual Ethernet adapter. */
    public var uptCompatibilityEnabled: Bool?
    /** MAC address type. If unset, defaults to GENERATED. */
    public var macType: VcenterVmHardwareEthernetMacAddressType?
    /** MAC address. Workaround for PR1459647 */
    public var macAddress: String?
    /** Address of the virtual Ethernet adapter on the PCI bus. If the PCI address is invalid, the server will change when it the VM is started or as the device is hot added. If unset, the server will choose an available address when the virtual machine is powered on. */
    public var pciSlotNumber: Int64?
    /** Flag indicating whether wake-on-LAN is enabled on this virtual Ethernet adapter. Defaults to false if unset. */
    public var wakeOnLanEnabled: Bool?
    /** Physical resource backing for the virtual Ethernet adapter. If unset, the system may try to find an appropriate backing. If one is not found, the request will fail. */
    public var backing: VcenterVmHardwareEthernetBackingSpec?
    /** Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on. Defaults to false if unset. */
    public var startConnected: Bool?
    /** Flag indicating whether the guest can connect and disconnect the device. Defaults to false if unset. */
    public var allowGuestControl: Bool?

    public init(type: VcenterVmHardwareEthernetEmulationType?, uptCompatibilityEnabled: Bool?, macType: VcenterVmHardwareEthernetMacAddressType?, macAddress: String?, pciSlotNumber: Int64?, wakeOnLanEnabled: Bool?, backing: VcenterVmHardwareEthernetBackingSpec?, startConnected: Bool?, allowGuestControl: Bool?) {
        self.type = type
        self.uptCompatibilityEnabled = uptCompatibilityEnabled
        self.macType = macType
        self.macAddress = macAddress
        self.pciSlotNumber = pciSlotNumber
        self.wakeOnLanEnabled = wakeOnLanEnabled
        self.backing = backing
        self.startConnected = startConnected
        self.allowGuestControl = allowGuestControl
    }

    public enum CodingKeys: String, CodingKey { 
        case type
        case uptCompatibilityEnabled = "upt_compatibility_enabled"
        case macType = "mac_type"
        case macAddress = "mac_address"
        case pciSlotNumber = "pci_slot_number"
        case wakeOnLanEnabled = "wake_on_lan_enabled"
        case backing
        case startConnected = "start_connected"
        case allowGuestControl = "allow_guest_control"
    }


}

