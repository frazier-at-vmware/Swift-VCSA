//
// NamespaceManagementnetworksnsxdistributedSwitchescompatibilityAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class NamespaceManagementnetworksnsxdistributedSwitchescompatibilityAPI {
    /**
     Returns a list of Distributed Switches matching the given filter and their compatibility information.
     
     - parameter zones: (query) Zone compatibility criteria. If zones are specified, the common distributed switches across the given zones will returned. A distributed switch is considered common if it is present in all of the vSphere clusters in a given zone. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.consumption_domains.Zone. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.consumption_domains.Zone. 
     - parameter compatible: (query) Compatibility criteria. If true, only Distributed Switches compatible with the vSphere Namespaces will be returned. If false, only Distributed Switches incompatible with the vSphere Namespaces will be returned. If unset, both compatible and incompatible Distributed Switches will be returned. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func check(zones: [String], compatible: Bool? = nil, completion: @escaping ((_ data: [VcenterNamespaceManagementNetworksNsxDistributedSwitchesCompatibilitySummary]?,_ error: Error?) -> Void)) {
        checkWithRequestBuilder(zones: zones, compatible: compatible).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns a list of Distributed Switches matching the given filter and their compatibility information.
     - POST /api/vcenter/namespace-management/networks/nsx/distributed-switches?action=check_compatibility
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]
     
     - parameter zones: (query) Zone compatibility criteria. If zones are specified, the common distributed switches across the given zones will returned. A distributed switch is considered common if it is present in all of the vSphere clusters in a given zone. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.consumption_domains.Zone. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.consumption_domains.Zone. 
     - parameter compatible: (query) Compatibility criteria. If true, only Distributed Switches compatible with the vSphere Namespaces will be returned. If false, only Distributed Switches incompatible with the vSphere Namespaces will be returned. If unset, both compatible and incompatible Distributed Switches will be returned. (optional)

     - returns: RequestBuilder<[VcenterNamespaceManagementNetworksNsxDistributedSwitchesCompatibilitySummary]> 
     */
    open class func checkWithRequestBuilder(zones: [String], compatible: Bool? = nil) -> RequestBuilder<[VcenterNamespaceManagementNetworksNsxDistributedSwitchesCompatibilitySummary]> {
        let path = "/api/vcenter/namespace-management/networks/nsx/distributed-switches?action=check_compatibility"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "compatible": compatible, 
            "zones": zones
        ])

        let requestBuilder: RequestBuilder<[VcenterNamespaceManagementNetworksNsxDistributedSwitchesCompatibilitySummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
