//
// OvfimportFlagAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class OvfimportFlagAPI {
    /**
     Returns information about the import flags supported by the deployment platform. <p> The supported flags are: <dl> <dt>LAX</dt> <dd>Lax mode parsing of the OVF descriptor.</dd> </dl> <p> Future server versions might support additional flags.
     
     - parameter rp: (query) The identifier of resource pool target for retrieving the import flag(s). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(rp: String, completion: @escaping ((_ data: [VcenterOvfImportFlagInfo]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(rp: rp).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about the import flags supported by the deployment platform. <p> The supported flags are: <dl> <dt>LAX</dt> <dd>Lax mode parsing of the OVF descriptor.</dd> </dl> <p> Future server versions might support additional flags.
     - GET /api/vcenter/ovf/import-flag
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]
     
     - parameter rp: (query) The identifier of resource pool target for retrieving the import flag(s). 

     - returns: RequestBuilder<[VcenterOvfImportFlagInfo]> 
     */
    open class func listWithRequestBuilder(rp: String) -> RequestBuilder<[VcenterOvfImportFlagInfo]> {
        let path = "/api/vcenter/ovf/import-flag"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "rp": rp
        ])

        let requestBuilder: RequestBuilder<[VcenterOvfImportFlagInfo]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns information about the import flags supported by the deployment platform. <p> The supported flags are: <dl> <dt>LAX</dt> <dd>Lax mode parsing of the OVF descriptor.</dd> </dl> <p> Future server versions might support additional flags.
     
     - parameter rp: (query) The identifier of resource pool target for retrieving the import flag(s). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list_0(rp: String, completion: @escaping ((_ data: VcenterOvfImportFlagListResp?,_ error: Error?) -> Void)) {
        list_0WithRequestBuilder(rp: rp).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about the import flags supported by the deployment platform. <p> The supported flags are: <dl> <dt>LAX</dt> <dd>Lax mode parsing of the OVF descriptor.</dd> </dl> <p> Future server versions might support additional flags.
     - GET /rest/com/vmware/vcenter/ovf/import-flag
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter rp: (query) The identifier of resource pool target for retrieving the import flag(s). 

     - returns: RequestBuilder<VcenterOvfImportFlagListResp> 
     */
    open class func list_0WithRequestBuilder(rp: String) -> RequestBuilder<VcenterOvfImportFlagListResp> {
        let path = "/rest/com/vmware/vcenter/ovf/import-flag"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "rp": rp
        ])

        let requestBuilder: RequestBuilder<VcenterOvfImportFlagListResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
