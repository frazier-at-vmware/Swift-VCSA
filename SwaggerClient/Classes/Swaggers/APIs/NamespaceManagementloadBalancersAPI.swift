//
// NamespaceManagementloadBalancersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class NamespaceManagementloadBalancersAPI {
    /**
     Returns information LoadBalancers.Info about the load balancer associated with the given cluster. if you do not have all of the privileges described as follows:     -  The resource ClusterComputeResource referenced by the parameter cluster requires System.Read.  
     
     - parameter cluster: (path) Identifier of the cluster the load balancer is associated with. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter _id: (path) Identifier of the load balancer LoadBalancers.ConfigSpec.id. The parameter must be an identifier for the resource type: vcenter.namespace_management.LoadBalancerConfig. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(cluster: String, _id: String, completion: @escaping ((_ data: VcenterNamespaceManagementLoadBalancersInfo?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(cluster: cluster, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information LoadBalancers.Info about the load balancer associated with the given cluster. if you do not have all of the privileges described as follows:     -  The resource ClusterComputeResource referenced by the parameter cluster requires System.Read.  
     - GET /api/vcenter/namespace-management/clusters/{cluster}/load-balancers/{id}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter cluster: (path) Identifier of the cluster the load balancer is associated with. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter _id: (path) Identifier of the load balancer LoadBalancers.ConfigSpec.id. The parameter must be an identifier for the resource type: vcenter.namespace_management.LoadBalancerConfig. 

     - returns: RequestBuilder<VcenterNamespaceManagementLoadBalancersInfo> 
     */
    open class func callGetWithRequestBuilder(cluster: String, _id: String) -> RequestBuilder<VcenterNamespaceManagementLoadBalancersInfo> {
        var path = "/api/vcenter/namespace-management/clusters/{cluster}/load-balancers/{id}"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterNamespaceManagementLoadBalancersInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Applies the entire load balancer spec to an existing load balancer configuration. if you do not have all of the privileges described as follows:     -  The resource ClusterComputeResource referenced by the parameter cluster requires Namespaces.Manage.  
     
     - parameter cluster: (path) Identifier of the cluster the load balancer is associated with. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter _id: (path) Identifier of the load balancer. The parameter must be an identifier for the resource type: vcenter.namespace_management.LoadBalancerConfig. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callSet(cluster: String, _id: String, requestBody: VcenterNamespaceManagementLoadBalancersSet? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        callSetWithRequestBuilder(cluster: cluster, _id: _id, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Applies the entire load balancer spec to an existing load balancer configuration. if you do not have all of the privileges described as follows:     -  The resource ClusterComputeResource referenced by the parameter cluster requires Namespaces.Manage.  
     - PUT /api/vcenter/namespace-management/clusters/{cluster}/load-balancers/{id}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter cluster: (path) Identifier of the cluster the load balancer is associated with. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter _id: (path) Identifier of the load balancer. The parameter must be an identifier for the resource type: vcenter.namespace_management.LoadBalancerConfig. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func callSetWithRequestBuilder(cluster: String, _id: String, requestBody: VcenterNamespaceManagementLoadBalancersSet? = nil) -> RequestBuilder<Void> {
        var path = "/api/vcenter/namespace-management/clusters/{cluster}/load-balancers/{id}"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Returns information about all load balancers associated with the given cluster. if you do not have all of the privileges described as follows:     -  The resource ClusterComputeResource referenced by the parameter cluster requires System.Read.  
     
     - parameter cluster: (path) Identifier of the cluster the load balancers are associated with. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(cluster: String, completion: @escaping ((_ data: [VcenterNamespaceManagementLoadBalancersSummary]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(cluster: cluster).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about all load balancers associated with the given cluster. if you do not have all of the privileges described as follows:     -  The resource ClusterComputeResource referenced by the parameter cluster requires System.Read.  
     - GET /api/vcenter/namespace-management/clusters/{cluster}/load-balancers
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]
     
     - parameter cluster: (path) Identifier of the cluster the load balancers are associated with. The parameter must be an identifier for the resource type: ClusterComputeResource. 

     - returns: RequestBuilder<[VcenterNamespaceManagementLoadBalancersSummary]> 
     */
    open class func listWithRequestBuilder(cluster: String) -> RequestBuilder<[VcenterNamespaceManagementLoadBalancersSummary]> {
        var path = "/api/vcenter/namespace-management/clusters/{cluster}/load-balancers"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[VcenterNamespaceManagementLoadBalancersSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Updates the load balancer configuration. The specified configuration is applied partially and unset fields in spec will leave those parts of configuration as-is. if you do not have all of the privileges described as follows:     -  The resource ClusterComputeResource referenced by the parameter cluster requires Namespaces.Manage.  
     
     - parameter cluster: (path) Identifier of the cluster the load balancer is associated with. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter _id: (path) Identifier of the load balancer. The parameter must be an identifier for the resource type: vcenter.namespace_management.LoadBalancerConfig. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(cluster: String, _id: String, requestBody: VcenterNamespaceManagementLoadBalancersUpdate? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(cluster: cluster, _id: _id, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates the load balancer configuration. The specified configuration is applied partially and unset fields in spec will leave those parts of configuration as-is. if you do not have all of the privileges described as follows:     -  The resource ClusterComputeResource referenced by the parameter cluster requires Namespaces.Manage.  
     - PATCH /api/vcenter/namespace-management/clusters/{cluster}/load-balancers/{id}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter cluster: (path) Identifier of the cluster the load balancer is associated with. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter _id: (path) Identifier of the load balancer. The parameter must be an identifier for the resource type: vcenter.namespace_management.LoadBalancerConfig. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateWithRequestBuilder(cluster: String, _id: String, requestBody: VcenterNamespaceManagementLoadBalancersUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/api/vcenter/namespace-management/clusters/{cluster}/load-balancers/{id}"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
