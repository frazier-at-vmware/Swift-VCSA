//
// VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesSetSpec.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesSetSpec: Codable {

    /** Identifier of the Supervisor Service version which contains the service definition. This Supervisor Service version must be in the ACTIVATED state. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespace_management.supervisor_services.Version. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespace_management.supervisor_services.Version. */
    public var version: String
    /** A generic key-value map for additional configuration parameters required during service upgrade. As an example, a third party operator might reference a private registry using parameters such as \&quot;registryName\&quot; for the registry name, \&quot;registryUsername\&quot; and \&quot;registryPassword\&quot; for the registry credentials. If unset, no additional configuration parameters will be applied when upgrading a Supervisor Service in the vSphere Supervisor. */
    public var serviceConfig: [String:String]?
    /** A set of additional configuration parameters to be applied during service upgrade. These parameters should be formatted as a base64 encoded YAML document.   Parameters should be set in at most one of ClusterSupervisorServices.SetSpec.service-config or ClusterSupervisorServices.SetSpec.yaml-service-config, and not both. The ClusterSupervisorServices.SetSpec.yaml-service-config supports complex data types and nested properties.  If unset, no additional configuration parameters will be applied when upgrading a Supervisor Service in the vSphere Supervisor. */
    public var yamlServiceConfig: String?

    public init(version: String, serviceConfig: [String:String]?, yamlServiceConfig: String?) {
        self.version = version
        self.serviceConfig = serviceConfig
        self.yamlServiceConfig = yamlServiceConfig
    }

    public enum CodingKeys: String, CodingKey { 
        case version
        case serviceConfig = "service_config"
        case yamlServiceConfig = "yaml_service_config"
    }


}

