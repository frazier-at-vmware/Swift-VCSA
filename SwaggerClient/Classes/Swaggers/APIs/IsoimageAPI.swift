//
// IsoimageAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class IsoimageAPI {
    /**
     Mounts an ISO image from a content library on a virtual machine.
     
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func mount(requestBody: VcenterIsoImageMount, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        mountWithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Mounts an ISO image from a content library on a virtual machine.
     - POST /api/vcenter/iso/image?action=mount
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter requestBody: (body)  

     - returns: RequestBuilder<String> 
     */
    open class func mountWithRequestBuilder(requestBody: VcenterIsoImageMount) -> RequestBuilder<String> {
        let path = "/api/vcenter/iso/image?action=mount"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Mounts an ISO image from a content library on a virtual machine.
     
     - parameter libraryItem: (path) The identifier of the library item having the ISO image to mount on the virtual machine. 
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func mount_0(libraryItem: String, requestBody: VcenterIsoImageMount, completion: @escaping ((_ data: VcenterIsoImageMountResp?,_ error: Error?) -> Void)) {
        mount_0WithRequestBuilder(libraryItem: libraryItem, requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Mounts an ISO image from a content library on a virtual machine.
     - POST /rest/com/vmware/vcenter/iso/image/id:{library_item}?~action=mount
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter libraryItem: (path) The identifier of the library item having the ISO image to mount on the virtual machine. 
     - parameter requestBody: (body)  

     - returns: RequestBuilder<VcenterIsoImageMountResp> 
     */
    open class func mount_0WithRequestBuilder(libraryItem: String, requestBody: VcenterIsoImageMount) -> RequestBuilder<VcenterIsoImageMountResp> {
        var path = "/rest/com/vmware/vcenter/iso/image/id:{library_item}?~action=mount"
        let libraryItemPreEscape = "\(libraryItem)"
        let libraryItemPostEscape = libraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{library_item}", with: libraryItemPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterIsoImageMountResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Unmounts a previously mounted CD-ROM using an ISO image as a backing.
     
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unmount(requestBody: VcenterIsoImageUnmount, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        unmountWithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Unmounts a previously mounted CD-ROM using an ISO image as a backing.
     - POST /api/vcenter/iso/image?action=unmount
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter requestBody: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func unmountWithRequestBuilder(requestBody: VcenterIsoImageUnmount) -> RequestBuilder<Void> {
        let path = "/api/vcenter/iso/image?action=unmount"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Unmounts a previously mounted CD-ROM using an ISO image as a backing.
     
     - parameter vm: (path) The identifier of the virtual machine from which to unmount the virtual CD-ROM. 
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unmount_0(vm: String, requestBody: VcenterIsoImageUnmount, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        unmount_0WithRequestBuilder(vm: vm, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Unmounts a previously mounted CD-ROM using an ISO image as a backing.
     - POST /rest/com/vmware/vcenter/iso/image/id:{vm}?~action=unmount
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter vm: (path) The identifier of the virtual machine from which to unmount the virtual CD-ROM. 
     - parameter requestBody: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func unmount_0WithRequestBuilder(vm: String, requestBody: VcenterIsoImageUnmount) -> RequestBuilder<Void> {
        var path = "/rest/com/vmware/vcenter/iso/image/id:{vm}?~action=unmount"
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
