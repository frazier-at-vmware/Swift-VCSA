//
// VmhardwareadaptersataAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class VmhardwareadaptersataAPI {
    /**
     Returns information about a virtual SATA adapter.
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter adapter: (path) Virtual SATA adapter identifier. The parameter must be an identifier for the resource type: vcenter.vm.hardware.SataAdapter. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(vm: String, adapter: String, completion: @escaping ((_ data: VcenterVmHardwareAdapterSataInfo?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(vm: vm, adapter: adapter).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about a virtual SATA adapter.
     - GET /api/vcenter/vm/{vm}/hardware/adapter/sata/{adapter}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter adapter: (path) Virtual SATA adapter identifier. The parameter must be an identifier for the resource type: vcenter.vm.hardware.SataAdapter. 

     - returns: RequestBuilder<VcenterVmHardwareAdapterSataInfo> 
     */
    open class func callGetWithRequestBuilder(vm: String, adapter: String) -> RequestBuilder<VcenterVmHardwareAdapterSataInfo> {
        var path = "/api/vcenter/vm/{vm}/hardware/adapter/sata/{adapter}"
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let adapterPreEscape = "\(adapter)"
        let adapterPostEscape = adapterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{adapter}", with: adapterPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterVmHardwareAdapterSataInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns information about a virtual SATA adapter.
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter adapter: (path) Virtual SATA adapter identifier. The parameter must be an identifier for the resource type: vcenter.vm.hardware.SataAdapter. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet_0(vm: String, adapter: String, completion: @escaping ((_ data: VcenterVmHardwareAdapterSataResp?,_ error: Error?) -> Void)) {
        callGet_0WithRequestBuilder(vm: vm, adapter: adapter).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about a virtual SATA adapter.
     - GET /rest/vcenter/vm/{vm}/hardware/adapter/sata/{adapter}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter adapter: (path) Virtual SATA adapter identifier. The parameter must be an identifier for the resource type: vcenter.vm.hardware.SataAdapter. 

     - returns: RequestBuilder<VcenterVmHardwareAdapterSataResp> 
     */
    open class func callGet_0WithRequestBuilder(vm: String, adapter: String) -> RequestBuilder<VcenterVmHardwareAdapterSataResp> {
        var path = "/rest/vcenter/vm/{vm}/hardware/adapter/sata/{adapter}"
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let adapterPreEscape = "\(adapter)"
        let adapterPostEscape = adapterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{adapter}", with: adapterPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterVmHardwareAdapterSataResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Adds a virtual SATA adapter to the virtual machine.
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(vm: String, requestBody: VcenterVmHardwareAdapterSataCreate? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(vm: vm, requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds a virtual SATA adapter to the virtual machine.
     - POST /api/vcenter/vm/{vm}/hardware/adapter/sata
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func createWithRequestBuilder(vm: String, requestBody: VcenterVmHardwareAdapterSataCreate? = nil) -> RequestBuilder<String> {
        var path = "/api/vcenter/vm/{vm}/hardware/adapter/sata"
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Adds a virtual SATA adapter to the virtual machine.
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create_0(vm: String, requestBody: VcenterVmHardwareAdapterSataCreate, completion: @escaping ((_ data: VcenterVmHardwareAdapterSataCreateResp?,_ error: Error?) -> Void)) {
        create_0WithRequestBuilder(vm: vm, requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds a virtual SATA adapter to the virtual machine.
     - POST /rest/vcenter/vm/{vm}/hardware/adapter/sata
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter requestBody: (body)  

     - returns: RequestBuilder<VcenterVmHardwareAdapterSataCreateResp> 
     */
    open class func create_0WithRequestBuilder(vm: String, requestBody: VcenterVmHardwareAdapterSataCreate) -> RequestBuilder<VcenterVmHardwareAdapterSataCreateResp> {
        var path = "/rest/vcenter/vm/{vm}/hardware/adapter/sata"
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterVmHardwareAdapterSataCreateResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Removes a virtual SATA adapter from the virtual machine.
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter adapter: (path) Virtual SATA adapter identifier. The parameter must be an identifier for the resource type: vcenter.vm.hardware.SataAdapter. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(vm: String, adapter: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(vm: vm, adapter: adapter).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Removes a virtual SATA adapter from the virtual machine.
     - DELETE /api/vcenter/vm/{vm}/hardware/adapter/sata/{adapter}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter adapter: (path) Virtual SATA adapter identifier. The parameter must be an identifier for the resource type: vcenter.vm.hardware.SataAdapter. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(vm: String, adapter: String) -> RequestBuilder<Void> {
        var path = "/api/vcenter/vm/{vm}/hardware/adapter/sata/{adapter}"
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let adapterPreEscape = "\(adapter)"
        let adapterPostEscape = adapterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{adapter}", with: adapterPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Removes a virtual SATA adapter from the virtual machine.
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter adapter: (path) Virtual SATA adapter identifier. The parameter must be an identifier for the resource type: vcenter.vm.hardware.SataAdapter. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete_0(vm: String, adapter: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        delete_0WithRequestBuilder(vm: vm, adapter: adapter).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Removes a virtual SATA adapter from the virtual machine.
     - DELETE /rest/vcenter/vm/{vm}/hardware/adapter/sata/{adapter}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter adapter: (path) Virtual SATA adapter identifier. The parameter must be an identifier for the resource type: vcenter.vm.hardware.SataAdapter. 

     - returns: RequestBuilder<Void> 
     */
    open class func delete_0WithRequestBuilder(vm: String, adapter: String) -> RequestBuilder<Void> {
        var path = "/rest/vcenter/vm/{vm}/hardware/adapter/sata/{adapter}"
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let adapterPreEscape = "\(adapter)"
        let adapterPostEscape = adapterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{adapter}", with: adapterPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns commonly used information about the virtual SATA adapters belonging to the virtual machine.
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(vm: String, completion: @escaping ((_ data: [VcenterVmHardwareAdapterSataSummary]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(vm: vm).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns commonly used information about the virtual SATA adapters belonging to the virtual machine.
     - GET /api/vcenter/vm/{vm}/hardware/adapter/sata
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 

     - returns: RequestBuilder<[VcenterVmHardwareAdapterSataSummary]> 
     */
    open class func listWithRequestBuilder(vm: String) -> RequestBuilder<[VcenterVmHardwareAdapterSataSummary]> {
        var path = "/api/vcenter/vm/{vm}/hardware/adapter/sata"
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[VcenterVmHardwareAdapterSataSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns commonly used information about the virtual SATA adapters belonging to the virtual machine.
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list_0(vm: String, completion: @escaping ((_ data: VcenterVmHardwareAdapterSataListResp?,_ error: Error?) -> Void)) {
        list_0WithRequestBuilder(vm: vm).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns commonly used information about the virtual SATA adapters belonging to the virtual machine.
     - GET /rest/vcenter/vm/{vm}/hardware/adapter/sata
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 

     - returns: RequestBuilder<VcenterVmHardwareAdapterSataListResp> 
     */
    open class func list_0WithRequestBuilder(vm: String) -> RequestBuilder<VcenterVmHardwareAdapterSataListResp> {
        var path = "/rest/vcenter/vm/{vm}/hardware/adapter/sata"
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterVmHardwareAdapterSataListResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
