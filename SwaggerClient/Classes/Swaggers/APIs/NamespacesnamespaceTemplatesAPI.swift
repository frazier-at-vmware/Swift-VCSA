//
// NamespacesnamespaceTemplatesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class NamespacesnamespaceTemplatesAPI {
    /**
     Get the information about a namespace template on given cluster. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.NamespaceTemplate referenced by the parameter template requires System.Read.  
     
     - parameter cluster: (path) Identifier for the cluster on which vSphere Namespaces are enabled. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter template: (path) Name of the namespace template. The parameter must be an identifier for the resource type: vcenter.namespaces.NamespaceTemplate. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(cluster: String, template: String, completion: @escaping ((_ data: VcenterNamespacesNamespaceTemplatesInfo?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(cluster: cluster, template: template).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the information about a namespace template on given cluster. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.NamespaceTemplate referenced by the parameter template requires System.Read.  
     - GET /api/vcenter/namespaces/namespace-templates/clusters/{cluster}/{template}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter cluster: (path) Identifier for the cluster on which vSphere Namespaces are enabled. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter template: (path) Name of the namespace template. The parameter must be an identifier for the resource type: vcenter.namespaces.NamespaceTemplate. 

     - returns: RequestBuilder<VcenterNamespacesNamespaceTemplatesInfo> 
     */
    open class func callGetWithRequestBuilder(cluster: String, template: String) -> RequestBuilder<VcenterNamespacesNamespaceTemplatesInfo> {
        var path = "/api/vcenter/namespaces/namespace-templates/clusters/{cluster}/{template}"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let templatePreEscape = "\(template)"
        let templatePostEscape = templatePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template}", with: templatePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterNamespacesNamespaceTemplatesInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the information about a namespace template on given cluster. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.NamespaceTemplate referenced by the parameter template requires System.Read.  
     
     - parameter cluster: (path) Identifier for the cluster on which vSphere Namespaces are enabled. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter template: (path) Name of the namespace template. The parameter must be an identifier for the resource type: vcenter.namespaces.NamespaceTemplate. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet_0(cluster: String, template: String, completion: @escaping ((_ data: VcenterNamespacesNamespaceTemplatesResp?,_ error: Error?) -> Void)) {
        callGet_0WithRequestBuilder(cluster: cluster, template: template).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the information about a namespace template on given cluster. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.NamespaceTemplate referenced by the parameter template requires System.Read.  
     - GET /rest/vcenter/namespaces/namespace-templates/clusters/{cluster}/templates/{template}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter cluster: (path) Identifier for the cluster on which vSphere Namespaces are enabled. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter template: (path) Name of the namespace template. The parameter must be an identifier for the resource type: vcenter.namespaces.NamespaceTemplate. 

     - returns: RequestBuilder<VcenterNamespacesNamespaceTemplatesResp> 
     */
    open class func callGet_0WithRequestBuilder(cluster: String, template: String) -> RequestBuilder<VcenterNamespacesNamespaceTemplatesResp> {
        var path = "/rest/vcenter/namespaces/namespace-templates/clusters/{cluster}/templates/{template}"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let templatePreEscape = "\(template)"
        let templatePostEscape = templatePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template}", with: templatePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterNamespacesNamespaceTemplatesResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Creates a namespace template on a cluster on which vSphere Namespaces are enabled in this vCenter Server. This release supports creating a single namespace template, and the call fails if there is a request to make another one. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  Operation execution requires Namespaces.SelfServiceManage.  
     
     - parameter cluster: (path) Identifier for the cluster on which vSphere Namespaces are enabled. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(cluster: String, requestBody: VcenterNamespacesNamespaceTemplatesCreate? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(cluster: cluster, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Creates a namespace template on a cluster on which vSphere Namespaces are enabled in this vCenter Server. This release supports creating a single namespace template, and the call fails if there is a request to make another one. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  Operation execution requires Namespaces.SelfServiceManage.  
     - POST /api/vcenter/namespaces/namespace-templates/clusters/{cluster}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter cluster: (path) Identifier for the cluster on which vSphere Namespaces are enabled. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func createWithRequestBuilder(cluster: String, requestBody: VcenterNamespacesNamespaceTemplatesCreate? = nil) -> RequestBuilder<Void> {
        var path = "/api/vcenter/namespaces/namespace-templates/clusters/{cluster}"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Creates a namespace template on a Supervisor. This release supports creating a single namespace template, and the call fails if there is a request to make another one.
     
     - parameter supervisor: (path) Identifier for the Supervisor. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor.Supervisor. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createV2(supervisor: String, requestBody: VcenterNamespacesNamespaceTemplatesCreateV2? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createV2WithRequestBuilder(supervisor: supervisor, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Creates a namespace template on a Supervisor. This release supports creating a single namespace template, and the call fails if there is a request to make another one.
     - POST /api/vcenter/namespaces/namespace-templates/supervisors/{supervisor}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter supervisor: (path) Identifier for the Supervisor. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor.Supervisor. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func createV2WithRequestBuilder(supervisor: String, requestBody: VcenterNamespacesNamespaceTemplatesCreateV2? = nil) -> RequestBuilder<Void> {
        var path = "/api/vcenter/namespaces/namespace-templates/supervisors/{supervisor}"
        let supervisorPreEscape = "\(supervisor)"
        let supervisorPostEscape = supervisorPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{supervisor}", with: supervisorPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Creates a namespace template on a Supervisor. This release supports creating a single namespace template, and the call fails if there is a request to make another one.
     
     - parameter supervisor: (path) Identifier for the Supervisor. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor.Supervisor. 
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createV2_0(supervisor: String, requestBody: VcenterNamespacesNamespaceTemplatesCreateV2, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createV2_0WithRequestBuilder(supervisor: supervisor, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Creates a namespace template on a Supervisor. This release supports creating a single namespace template, and the call fails if there is a request to make another one.
     - POST /rest/vcenter/namespaces/namespace-templates/supervisors/{supervisor}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter supervisor: (path) Identifier for the Supervisor. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor.Supervisor. 
     - parameter requestBody: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func createV2_0WithRequestBuilder(supervisor: String, requestBody: VcenterNamespacesNamespaceTemplatesCreateV2) -> RequestBuilder<Void> {
        var path = "/rest/vcenter/namespaces/namespace-templates/supervisors/{supervisor}"
        let supervisorPreEscape = "\(supervisor)"
        let supervisorPostEscape = supervisorPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{supervisor}", with: supervisorPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Creates a namespace template on a cluster on which vSphere Namespaces are enabled in this vCenter Server. This release supports creating a single namespace template, and the call fails if there is a request to make another one. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  Operation execution requires Namespaces.SelfServiceManage.  
     
     - parameter cluster: (path) Identifier for the cluster on which vSphere Namespaces are enabled. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create_0(cluster: String, requestBody: VcenterNamespacesNamespaceTemplatesCreate, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        create_0WithRequestBuilder(cluster: cluster, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Creates a namespace template on a cluster on which vSphere Namespaces are enabled in this vCenter Server. This release supports creating a single namespace template, and the call fails if there is a request to make another one. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  Operation execution requires Namespaces.SelfServiceManage.  
     - POST /rest/vcenter/namespaces/namespace-templates/clusters/{cluster}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter cluster: (path) Identifier for the cluster on which vSphere Namespaces are enabled. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter requestBody: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func create_0WithRequestBuilder(cluster: String, requestBody: VcenterNamespacesNamespaceTemplatesCreate) -> RequestBuilder<Void> {
        var path = "/rest/vcenter/namespaces/namespace-templates/clusters/{cluster}"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get the information about a namespace template on a Supervisor. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.NamespaceTemplate referenced by the parameter template requires System.Read.  
     
     - parameter supervisor: (path) Identifier for the Supervisor. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor.Supervisor. 
     - parameter template: (path) Name of the namespace template. The parameter must be an identifier for the resource type: vcenter.namespaces.NamespaceTemplate. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getV2(supervisor: String, template: String, completion: @escaping ((_ data: VcenterNamespacesNamespaceTemplatesInfoV2?,_ error: Error?) -> Void)) {
        getV2WithRequestBuilder(supervisor: supervisor, template: template).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the information about a namespace template on a Supervisor. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.NamespaceTemplate referenced by the parameter template requires System.Read.  
     - GET /api/vcenter/namespaces/namespace-templates/supervisors/{supervisor}/{template}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter supervisor: (path) Identifier for the Supervisor. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor.Supervisor. 
     - parameter template: (path) Name of the namespace template. The parameter must be an identifier for the resource type: vcenter.namespaces.NamespaceTemplate. 

     - returns: RequestBuilder<VcenterNamespacesNamespaceTemplatesInfoV2> 
     */
    open class func getV2WithRequestBuilder(supervisor: String, template: String) -> RequestBuilder<VcenterNamespacesNamespaceTemplatesInfoV2> {
        var path = "/api/vcenter/namespaces/namespace-templates/supervisors/{supervisor}/{template}"
        let supervisorPreEscape = "\(supervisor)"
        let supervisorPostEscape = supervisorPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{supervisor}", with: supervisorPostEscape, options: .literal, range: nil)
        let templatePreEscape = "\(template)"
        let templatePostEscape = templatePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template}", with: templatePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterNamespacesNamespaceTemplatesInfoV2>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the information about a namespace template on a Supervisor. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.NamespaceTemplate referenced by the parameter template requires System.Read.  
     
     - parameter supervisor: (path) Identifier for the Supervisor. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor.Supervisor. 
     - parameter template: (path) Name of the namespace template. The parameter must be an identifier for the resource type: vcenter.namespaces.NamespaceTemplate. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getV2_0(supervisor: String, template: String, completion: @escaping ((_ data: VcenterNamespacesNamespaceTemplatesGetV2Resp?,_ error: Error?) -> Void)) {
        getV2_0WithRequestBuilder(supervisor: supervisor, template: template).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the information about a namespace template on a Supervisor. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.NamespaceTemplate referenced by the parameter template requires System.Read.  
     - GET /rest/vcenter/namespaces/namespace-templates/supervisors/{supervisor}/templates/{template}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter supervisor: (path) Identifier for the Supervisor. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor.Supervisor. 
     - parameter template: (path) Name of the namespace template. The parameter must be an identifier for the resource type: vcenter.namespaces.NamespaceTemplate. 

     - returns: RequestBuilder<VcenterNamespacesNamespaceTemplatesGetV2Resp> 
     */
    open class func getV2_0WithRequestBuilder(supervisor: String, template: String) -> RequestBuilder<VcenterNamespacesNamespaceTemplatesGetV2Resp> {
        var path = "/rest/vcenter/namespaces/namespace-templates/supervisors/{supervisor}/templates/{template}"
        let supervisorPreEscape = "\(supervisor)"
        let supervisorPostEscape = supervisorPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{supervisor}", with: supervisorPostEscape, options: .literal, range: nil)
        let templatePreEscape = "\(template)"
        let templatePostEscape = templatePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template}", with: templatePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterNamespacesNamespaceTemplatesGetV2Resp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns information about all the namespace templates associated with a cluster on which vSphere Namespaces are enabled in this vCenter Server. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Anonymous.  
     
     - parameter cluster: (path) Identifier for the cluster on which vSphere Namespaces are enabled. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(cluster: String, completion: @escaping ((_ data: [VcenterNamespacesNamespaceTemplatesSummary]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(cluster: cluster).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about all the namespace templates associated with a cluster on which vSphere Namespaces are enabled in this vCenter Server. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Anonymous.  
     - GET /api/vcenter/namespaces/namespace-templates/clusters/{cluster}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]
     
     - parameter cluster: (path) Identifier for the cluster on which vSphere Namespaces are enabled. The parameter must be an identifier for the resource type: ClusterComputeResource. 

     - returns: RequestBuilder<[VcenterNamespacesNamespaceTemplatesSummary]> 
     */
    open class func listWithRequestBuilder(cluster: String) -> RequestBuilder<[VcenterNamespacesNamespaceTemplatesSummary]> {
        var path = "/api/vcenter/namespaces/namespace-templates/clusters/{cluster}"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[VcenterNamespacesNamespaceTemplatesSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns information about all the namespace templates associated with a Supervisor. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Anonymous.  
     
     - parameter supervisor: (path) Identifier for the Supervisor. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor.Supervisor. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listV2(supervisor: String, completion: @escaping ((_ data: [VcenterNamespacesNamespaceTemplatesSummaryV2]?,_ error: Error?) -> Void)) {
        listV2WithRequestBuilder(supervisor: supervisor).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about all the namespace templates associated with a Supervisor. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Anonymous.  
     - GET /api/vcenter/namespaces/namespace-templates/supervisors/{supervisor}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]
     
     - parameter supervisor: (path) Identifier for the Supervisor. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor.Supervisor. 

     - returns: RequestBuilder<[VcenterNamespacesNamespaceTemplatesSummaryV2]> 
     */
    open class func listV2WithRequestBuilder(supervisor: String) -> RequestBuilder<[VcenterNamespacesNamespaceTemplatesSummaryV2]> {
        var path = "/api/vcenter/namespaces/namespace-templates/supervisors/{supervisor}"
        let supervisorPreEscape = "\(supervisor)"
        let supervisorPostEscape = supervisorPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{supervisor}", with: supervisorPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[VcenterNamespacesNamespaceTemplatesSummaryV2]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns information about all the namespace templates associated with a Supervisor. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Anonymous.  
     
     - parameter supervisor: (path) Identifier for the Supervisor. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor.Supervisor. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listV2_0(supervisor: String, completion: @escaping ((_ data: VcenterNamespacesNamespaceTemplatesListV2Resp?,_ error: Error?) -> Void)) {
        listV2_0WithRequestBuilder(supervisor: supervisor).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about all the namespace templates associated with a Supervisor. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Anonymous.  
     - GET /rest/vcenter/namespaces/namespace-templates/supervisors/{supervisor}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter supervisor: (path) Identifier for the Supervisor. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor.Supervisor. 

     - returns: RequestBuilder<VcenterNamespacesNamespaceTemplatesListV2Resp> 
     */
    open class func listV2_0WithRequestBuilder(supervisor: String) -> RequestBuilder<VcenterNamespacesNamespaceTemplatesListV2Resp> {
        var path = "/rest/vcenter/namespaces/namespace-templates/supervisors/{supervisor}"
        let supervisorPreEscape = "\(supervisor)"
        let supervisorPostEscape = supervisorPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{supervisor}", with: supervisorPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterNamespacesNamespaceTemplatesListV2Resp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns information about all the namespace templates associated with a cluster on which vSphere Namespaces are enabled in this vCenter Server. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Anonymous.  
     
     - parameter cluster: (path) Identifier for the cluster on which vSphere Namespaces are enabled. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list_0(cluster: String, completion: @escaping ((_ data: VcenterNamespacesNamespaceTemplatesListResp?,_ error: Error?) -> Void)) {
        list_0WithRequestBuilder(cluster: cluster).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about all the namespace templates associated with a cluster on which vSphere Namespaces are enabled in this vCenter Server. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Anonymous.  
     - GET /rest/vcenter/namespaces/namespace-templates/clusters/{cluster}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter cluster: (path) Identifier for the cluster on which vSphere Namespaces are enabled. The parameter must be an identifier for the resource type: ClusterComputeResource. 

     - returns: RequestBuilder<VcenterNamespacesNamespaceTemplatesListResp> 
     */
    open class func list_0WithRequestBuilder(cluster: String) -> RequestBuilder<VcenterNamespacesNamespaceTemplatesListResp> {
        var path = "/rest/vcenter/namespaces/namespace-templates/clusters/{cluster}"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterNamespacesNamespaceTemplatesListResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Updates a namespace template associated with cluster on which vSphere Namespaces are enabled in this vCenter Server. The specified configuration is applied partially and unset fields in spec will leave those parts of configuration as-is. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.NamespaceTemplate referenced by the parameter template requires Namespaces.SelfServiceManage.  
     
     - parameter cluster: (path) Identifier for cluster on which vSphere Namespaces are enabled. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter template: (path) Name of the namespace template. The parameter must be an identifier for the resource type: vcenter.namespaces.NamespaceTemplate. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(cluster: String, template: String, requestBody: VcenterNamespacesNamespaceTemplatesUpdate? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(cluster: cluster, template: template, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates a namespace template associated with cluster on which vSphere Namespaces are enabled in this vCenter Server. The specified configuration is applied partially and unset fields in spec will leave those parts of configuration as-is. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.NamespaceTemplate referenced by the parameter template requires Namespaces.SelfServiceManage.  
     - PATCH /api/vcenter/namespaces/namespace-templates/clusters/{cluster}/{template}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter cluster: (path) Identifier for cluster on which vSphere Namespaces are enabled. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter template: (path) Name of the namespace template. The parameter must be an identifier for the resource type: vcenter.namespaces.NamespaceTemplate. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateWithRequestBuilder(cluster: String, template: String, requestBody: VcenterNamespacesNamespaceTemplatesUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/api/vcenter/namespaces/namespace-templates/clusters/{cluster}/{template}"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let templatePreEscape = "\(template)"
        let templatePostEscape = templatePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template}", with: templatePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Updates a namespace template associated with a Supervisor. The specified configuration is applied partially and unset fields in spec will leave those parts of configuration as-is. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.NamespaceTemplate referenced by the parameter template requires Namespaces.SelfServiceManage.  
     
     - parameter supervisor: (path) Identifier for the Supervisor. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor.Supervisor. 
     - parameter template: (path) Name of the namespace template. The parameter must be an identifier for the resource type: vcenter.namespaces.NamespaceTemplate. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateV2(supervisor: String, template: String, requestBody: VcenterNamespacesNamespaceTemplatesUpdateV2? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateV2WithRequestBuilder(supervisor: supervisor, template: template, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates a namespace template associated with a Supervisor. The specified configuration is applied partially and unset fields in spec will leave those parts of configuration as-is. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.NamespaceTemplate referenced by the parameter template requires Namespaces.SelfServiceManage.  
     - PATCH /api/vcenter/namespaces/namespace-templates/supervisors/{supervisor}/{template}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter supervisor: (path) Identifier for the Supervisor. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor.Supervisor. 
     - parameter template: (path) Name of the namespace template. The parameter must be an identifier for the resource type: vcenter.namespaces.NamespaceTemplate. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateV2WithRequestBuilder(supervisor: String, template: String, requestBody: VcenterNamespacesNamespaceTemplatesUpdateV2? = nil) -> RequestBuilder<Void> {
        var path = "/api/vcenter/namespaces/namespace-templates/supervisors/{supervisor}/{template}"
        let supervisorPreEscape = "\(supervisor)"
        let supervisorPostEscape = supervisorPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{supervisor}", with: supervisorPostEscape, options: .literal, range: nil)
        let templatePreEscape = "\(template)"
        let templatePostEscape = templatePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template}", with: templatePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Updates a namespace template associated with a Supervisor. The specified configuration is applied partially and unset fields in spec will leave those parts of configuration as-is. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.NamespaceTemplate referenced by the parameter template requires Namespaces.SelfServiceManage.  
     
     - parameter supervisor: (path) Identifier for the Supervisor. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor.Supervisor. 
     - parameter template: (path) Name of the namespace template. The parameter must be an identifier for the resource type: vcenter.namespaces.NamespaceTemplate. 
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateV2_0(supervisor: String, template: String, requestBody: VcenterNamespacesNamespaceTemplatesUpdateV2, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateV2_0WithRequestBuilder(supervisor: supervisor, template: template, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates a namespace template associated with a Supervisor. The specified configuration is applied partially and unset fields in spec will leave those parts of configuration as-is. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.NamespaceTemplate referenced by the parameter template requires Namespaces.SelfServiceManage.  
     - PATCH /rest/vcenter/namespaces/namespace-templates/supervisors/{supervisor}/templates/{template}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter supervisor: (path) Identifier for the Supervisor. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor.Supervisor. 
     - parameter template: (path) Name of the namespace template. The parameter must be an identifier for the resource type: vcenter.namespaces.NamespaceTemplate. 
     - parameter requestBody: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateV2_0WithRequestBuilder(supervisor: String, template: String, requestBody: VcenterNamespacesNamespaceTemplatesUpdateV2) -> RequestBuilder<Void> {
        var path = "/rest/vcenter/namespaces/namespace-templates/supervisors/{supervisor}/templates/{template}"
        let supervisorPreEscape = "\(supervisor)"
        let supervisorPostEscape = supervisorPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{supervisor}", with: supervisorPostEscape, options: .literal, range: nil)
        let templatePreEscape = "\(template)"
        let templatePostEscape = templatePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template}", with: templatePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Updates a namespace template associated with cluster on which vSphere Namespaces are enabled in this vCenter Server. The specified configuration is applied partially and unset fields in spec will leave those parts of configuration as-is. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.NamespaceTemplate referenced by the parameter template requires Namespaces.SelfServiceManage.  
     
     - parameter cluster: (path) Identifier for cluster on which vSphere Namespaces are enabled. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter template: (path) Name of the namespace template. The parameter must be an identifier for the resource type: vcenter.namespaces.NamespaceTemplate. 
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update_0(cluster: String, template: String, requestBody: VcenterNamespacesNamespaceTemplatesUpdate, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        update_0WithRequestBuilder(cluster: cluster, template: template, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates a namespace template associated with cluster on which vSphere Namespaces are enabled in this vCenter Server. The specified configuration is applied partially and unset fields in spec will leave those parts of configuration as-is. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.NamespaceTemplate referenced by the parameter template requires Namespaces.SelfServiceManage.  
     - PATCH /rest/vcenter/namespaces/namespace-templates/clusters/{cluster}/templates/{template}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter cluster: (path) Identifier for cluster on which vSphere Namespaces are enabled. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter template: (path) Name of the namespace template. The parameter must be an identifier for the resource type: vcenter.namespaces.NamespaceTemplate. 
     - parameter requestBody: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func update_0WithRequestBuilder(cluster: String, template: String, requestBody: VcenterNamespacesNamespaceTemplatesUpdate) -> RequestBuilder<Void> {
        var path = "/rest/vcenter/namespaces/namespace-templates/clusters/{cluster}/templates/{template}"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let templatePreEscape = "\(template)"
        let templatePostEscape = templatePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template}", with: templatePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
