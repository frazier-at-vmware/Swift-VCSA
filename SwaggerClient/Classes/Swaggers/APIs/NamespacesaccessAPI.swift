//
// NamespacesaccessAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class NamespacesaccessAPI {
    /**
     * enum for parameter type
     */
    public enum ModelType_callGet: String { 
        case user = "USER"
        case group = "GROUP"
    }

    /**
     Get the information about the access control of the subject on given domain on the namespace. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.Instance referenced by the parameter namespace requires System.Read.  
     
     - parameter namespace: (path) Identifier for the namespace. The parameter must be an identifier for the resource type: vcenter.namespaces.Instance. 
     - parameter domain: (path) The domain of the subject. 
     - parameter subject: (path) The principal for this operation. 
     - parameter type: (query) { 1. The Access.SubjectType enumerated type lists the types of subjects who can be associated with a Access.Role on the namespace. }, { 2. The type of subject (USER or GROUP). } 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(namespace: String, domain: String, subject: String, type: ModelType_callGet, completion: @escaping ((_ data: VcenterNamespacesAccessInfo?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(namespace: namespace, domain: domain, subject: subject, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the information about the access control of the subject on given domain on the namespace. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.Instance referenced by the parameter namespace requires System.Read.  
     - GET /api/vcenter/namespaces/instances/{namespace}/access/{domain}/{subject}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter namespace: (path) Identifier for the namespace. The parameter must be an identifier for the resource type: vcenter.namespaces.Instance. 
     - parameter domain: (path) The domain of the subject. 
     - parameter subject: (path) The principal for this operation. 
     - parameter type: (query) { 1. The Access.SubjectType enumerated type lists the types of subjects who can be associated with a Access.Role on the namespace. }, { 2. The type of subject (USER or GROUP). } 

     - returns: RequestBuilder<VcenterNamespacesAccessInfo> 
     */
    open class func callGetWithRequestBuilder(namespace: String, domain: String, subject: String, type: ModelType_callGet) -> RequestBuilder<VcenterNamespacesAccessInfo> {
        var path = "/api/vcenter/namespaces/instances/{namespace}/access/{domain}/{subject}"
        let namespacePreEscape = "\(namespace)"
        let namespacePostEscape = namespacePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{namespace}", with: namespacePostEscape, options: .literal, range: nil)
        let domainPreEscape = "\(domain)"
        let domainPostEscape = domainPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domain}", with: domainPostEscape, options: .literal, range: nil)
        let subjectPreEscape = "\(subject)"
        let subjectPostEscape = subjectPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subject}", with: subjectPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type.rawValue
        ])

        let requestBuilder: RequestBuilder<VcenterNamespacesAccessInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_callSet: String { 
        case user = "USER"
        case group = "GROUP"
    }

    /**
     Set new access control on the namespace for the subject on given domain. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.Instance referenced by the parameter namespace requires Namespaces.Configure.  
     
     - parameter namespace: (path) Identifier for the namespace. The parameter must be an identifier for the resource type: vcenter.namespaces.Instance. 
     - parameter domain: (path) The domain of the subject. 
     - parameter subject: (path) The principal for this operation. 
     - parameter type: (query) { 1. The Access.SubjectType enumerated type lists the types of subjects who can be associated with a Access.Role on the namespace. }, { 2. The type of subject (USER or GROUP). } 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callSet(namespace: String, domain: String, subject: String, type: ModelType_callSet, requestBody: VcenterNamespacesAccessSet? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        callSetWithRequestBuilder(namespace: namespace, domain: domain, subject: subject, type: type, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Set new access control on the namespace for the subject on given domain. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.Instance referenced by the parameter namespace requires Namespaces.Configure.  
     - PUT /api/vcenter/namespaces/instances/{namespace}/access/{domain}/{subject}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter namespace: (path) Identifier for the namespace. The parameter must be an identifier for the resource type: vcenter.namespaces.Instance. 
     - parameter domain: (path) The domain of the subject. 
     - parameter subject: (path) The principal for this operation. 
     - parameter type: (query) { 1. The Access.SubjectType enumerated type lists the types of subjects who can be associated with a Access.Role on the namespace. }, { 2. The type of subject (USER or GROUP). } 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func callSetWithRequestBuilder(namespace: String, domain: String, subject: String, type: ModelType_callSet, requestBody: VcenterNamespacesAccessSet? = nil) -> RequestBuilder<Void> {
        var path = "/api/vcenter/namespaces/instances/{namespace}/access/{domain}/{subject}"
        let namespacePreEscape = "\(namespace)"
        let namespacePostEscape = namespacePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{namespace}", with: namespacePostEscape, options: .literal, range: nil)
        let domainPreEscape = "\(domain)"
        let domainPostEscape = domainPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domain}", with: domainPostEscape, options: .literal, range: nil)
        let subjectPreEscape = "\(subject)"
        let subjectPostEscape = subjectPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subject}", with: subjectPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type.rawValue
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_create: String { 
        case user = "USER"
        case group = "GROUP"
    }

    /**
     Set up access control for the subject on given domain on the namespace. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.Instance referenced by the parameter namespace requires Namespaces.Configure.  
     
     - parameter namespace: (path) Identifier for the namespace. The parameter must be an identifier for the resource type: vcenter.namespaces.Instance. 
     - parameter domain: (path) The domain of the subject. 
     - parameter subject: (path) The principal for this operation. 
     - parameter type: (query) { 1. The Access.SubjectType enumerated type lists the types of subjects who can be associated with a Access.Role on the namespace. }, { 2. The type of subject (USER or GROUP). } 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(namespace: String, domain: String, subject: String, type: ModelType_create, requestBody: VcenterNamespacesAccessCreate? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(namespace: namespace, domain: domain, subject: subject, type: type, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Set up access control for the subject on given domain on the namespace. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.Instance referenced by the parameter namespace requires Namespaces.Configure.  
     - POST /api/vcenter/namespaces/instances/{namespace}/access/{domain}/{subject}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter namespace: (path) Identifier for the namespace. The parameter must be an identifier for the resource type: vcenter.namespaces.Instance. 
     - parameter domain: (path) The domain of the subject. 
     - parameter subject: (path) The principal for this operation. 
     - parameter type: (query) { 1. The Access.SubjectType enumerated type lists the types of subjects who can be associated with a Access.Role on the namespace. }, { 2. The type of subject (USER or GROUP). } 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func createWithRequestBuilder(namespace: String, domain: String, subject: String, type: ModelType_create, requestBody: VcenterNamespacesAccessCreate? = nil) -> RequestBuilder<Void> {
        var path = "/api/vcenter/namespaces/instances/{namespace}/access/{domain}/{subject}"
        let namespacePreEscape = "\(namespace)"
        let namespacePostEscape = namespacePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{namespace}", with: namespacePostEscape, options: .literal, range: nil)
        let domainPreEscape = "\(domain)"
        let domainPostEscape = domainPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domain}", with: domainPostEscape, options: .literal, range: nil)
        let subjectPreEscape = "\(subject)"
        let subjectPostEscape = subjectPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subject}", with: subjectPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type.rawValue
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_delete: String { 
        case user = "USER"
        case group = "GROUP"
    }

    /**
     Remove access control of the subject on given domain from the namespace. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.Instance referenced by the parameter namespace requires Namespaces.Configure.  
     
     - parameter namespace: (path) Identifier for the namespace. The parameter must be an identifier for the resource type: vcenter.namespaces.Instance. 
     - parameter domain: (path) The domain of the subject. 
     - parameter subject: (path) The principal for this operation. 
     - parameter type: (query) { 1. The Access.SubjectType enumerated type lists the types of subjects who can be associated with a Access.Role on the namespace. }, { 2. The type of subject (USER or GROUP). } 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(namespace: String, domain: String, subject: String, type: ModelType_delete, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(namespace: namespace, domain: domain, subject: subject, type: type).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Remove access control of the subject on given domain from the namespace. if you do not have all of the privileges described as follows:     -  The resource vcenter.namespaces.Instance referenced by the parameter namespace requires Namespaces.Configure.  
     - DELETE /api/vcenter/namespaces/instances/{namespace}/access/{domain}/{subject}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter namespace: (path) Identifier for the namespace. The parameter must be an identifier for the resource type: vcenter.namespaces.Instance. 
     - parameter domain: (path) The domain of the subject. 
     - parameter subject: (path) The principal for this operation. 
     - parameter type: (query) { 1. The Access.SubjectType enumerated type lists the types of subjects who can be associated with a Access.Role on the namespace. }, { 2. The type of subject (USER or GROUP). } 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(namespace: String, domain: String, subject: String, type: ModelType_delete) -> RequestBuilder<Void> {
        var path = "/api/vcenter/namespaces/instances/{namespace}/access/{domain}/{subject}"
        let namespacePreEscape = "\(namespace)"
        let namespacePostEscape = namespacePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{namespace}", with: namespacePostEscape, options: .literal, range: nil)
        let domainPreEscape = "\(domain)"
        let domainPostEscape = domainPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domain}", with: domainPostEscape, options: .literal, range: nil)
        let subjectPreEscape = "\(subject)"
        let subjectPostEscape = subjectPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subject}", with: subjectPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type.rawValue
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
