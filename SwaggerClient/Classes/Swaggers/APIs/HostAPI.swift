//
// HostAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class HostAPI {
    /**
     Connect to the host corresponding to host previously added to the vCenter server.
     
     - parameter host: (path) Identifier of the host to be reconnected. The parameter must be an identifier for the resource type: HostSystem. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func connect(host: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        connectWithRequestBuilder(host: host).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Connect to the host corresponding to host previously added to the vCenter server.
     - POST /api/vcenter/host/{host}?action=connect
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter host: (path) Identifier of the host to be reconnected. The parameter must be an identifier for the resource type: HostSystem. 

     - returns: RequestBuilder<Void> 
     */
    open class func connectWithRequestBuilder(host: String) -> RequestBuilder<Void> {
        var path = "/api/vcenter/host/{host}?action=connect"
        let hostPreEscape = "\(host)"
        let hostPostEscape = hostPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{host}", with: hostPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Connect to the host corresponding to host previously added to the vCenter server.
     
     - parameter host: (path) Identifier of the host to be reconnected. The parameter must be an identifier for the resource type: HostSystem. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func connect_0(host: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        connect_0WithRequestBuilder(host: host).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Connect to the host corresponding to host previously added to the vCenter server.
     - POST /rest/vcenter/host/{host}/connect
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter host: (path) Identifier of the host to be reconnected. The parameter must be an identifier for the resource type: HostSystem. 

     - returns: RequestBuilder<Void> 
     */
    open class func connect_0WithRequestBuilder(host: String) -> RequestBuilder<Void> {
        var path = "/rest/vcenter/host/{host}/connect"
        let hostPreEscape = "\(host)"
        let hostPostEscape = hostPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{host}", with: hostPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Add a new standalone host in the vCenter inventory. The newly connected host will be in connected state. The vCenter Server will verify the SSL certificate before adding the host to its inventory. In the case where the SSL certificate cannot be verified because the Certificate Authority is not recognized or the certificate is self signed, the vCenter Server will fall back to thumbprint verification mode as defined by Host.CreateSpec.ThumbprintVerification.
     
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(requestBody: VcenterHostCreate? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add a new standalone host in the vCenter inventory. The newly connected host will be in connected state. The vCenter Server will verify the SSL certificate before adding the host to its inventory. In the case where the SSL certificate cannot be verified because the Certificate Authority is not recognized or the certificate is self signed, the vCenter Server will fall back to thumbprint verification mode as defined by Host.CreateSpec.ThumbprintVerification.
     - POST /api/vcenter/host
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func createWithRequestBuilder(requestBody: VcenterHostCreate? = nil) -> RequestBuilder<String> {
        let path = "/api/vcenter/host"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add a new standalone host in the vCenter inventory. The newly connected host will be in connected state. The vCenter Server will verify the SSL certificate before adding the host to its inventory. In the case where the SSL certificate cannot be verified because the Certificate Authority is not recognized or the certificate is self signed, the vCenter Server will fall back to thumbprint verification mode as defined by Host.CreateSpec.ThumbprintVerification.
     
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create_0(requestBody: VcenterHostCreate, completion: @escaping ((_ data: VcenterHostCreateResp?,_ error: Error?) -> Void)) {
        create_0WithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add a new standalone host in the vCenter inventory. The newly connected host will be in connected state. The vCenter Server will verify the SSL certificate before adding the host to its inventory. In the case where the SSL certificate cannot be verified because the Certificate Authority is not recognized or the certificate is self signed, the vCenter Server will fall back to thumbprint verification mode as defined by Host.CreateSpec.ThumbprintVerification.
     - POST /rest/vcenter/host
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter requestBody: (body)  

     - returns: RequestBuilder<VcenterHostCreateResp> 
     */
    open class func create_0WithRequestBuilder(requestBody: VcenterHostCreate) -> RequestBuilder<VcenterHostCreateResp> {
        let path = "/rest/vcenter/host"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterHostCreateResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Remove a standalone host from the vCenter Server.
     
     - parameter host: (path) Identifier of the host to be deleted. The parameter must be an identifier for the resource type: HostSystem. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(host: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(host: host).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Remove a standalone host from the vCenter Server.
     - DELETE /api/vcenter/host/{host}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter host: (path) Identifier of the host to be deleted. The parameter must be an identifier for the resource type: HostSystem. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(host: String) -> RequestBuilder<Void> {
        var path = "/api/vcenter/host/{host}"
        let hostPreEscape = "\(host)"
        let hostPostEscape = hostPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{host}", with: hostPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove a standalone host from the vCenter Server.
     
     - parameter host: (path) Identifier of the host to be deleted. The parameter must be an identifier for the resource type: HostSystem. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete_0(host: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        delete_0WithRequestBuilder(host: host).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Remove a standalone host from the vCenter Server.
     - DELETE /rest/vcenter/host/{host}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter host: (path) Identifier of the host to be deleted. The parameter must be an identifier for the resource type: HostSystem. 

     - returns: RequestBuilder<Void> 
     */
    open class func delete_0WithRequestBuilder(host: String) -> RequestBuilder<Void> {
        var path = "/rest/vcenter/host/{host}"
        let hostPreEscape = "\(host)"
        let hostPostEscape = hostPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{host}", with: hostPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Disconnect the host corresponding to host from the vCenter server
     
     - parameter host: (path) Identifier of the host to be disconnected. The parameter must be an identifier for the resource type: HostSystem. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disconnect(host: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        disconnectWithRequestBuilder(host: host).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Disconnect the host corresponding to host from the vCenter server
     - POST /api/vcenter/host/{host}?action=disconnect
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter host: (path) Identifier of the host to be disconnected. The parameter must be an identifier for the resource type: HostSystem. 

     - returns: RequestBuilder<Void> 
     */
    open class func disconnectWithRequestBuilder(host: String) -> RequestBuilder<Void> {
        var path = "/api/vcenter/host/{host}?action=disconnect"
        let hostPreEscape = "\(host)"
        let hostPostEscape = hostPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{host}", with: hostPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Disconnect the host corresponding to host from the vCenter server
     
     - parameter host: (path) Identifier of the host to be disconnected. The parameter must be an identifier for the resource type: HostSystem. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disconnect_0(host: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        disconnect_0WithRequestBuilder(host: host).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Disconnect the host corresponding to host from the vCenter server
     - POST /rest/vcenter/host/{host}/disconnect
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter host: (path) Identifier of the host to be disconnected. The parameter must be an identifier for the resource type: HostSystem. 

     - returns: RequestBuilder<Void> 
     */
    open class func disconnect_0WithRequestBuilder(host: String) -> RequestBuilder<Void> {
        var path = "/rest/vcenter/host/{host}/disconnect"
        let hostPreEscape = "\(host)"
        let hostPostEscape = hostPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{host}", with: hostPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter connectionStates
     */
    public enum ConnectionStates_list: String { 
        case connected = "CONNECTED"
        case disconnected = "DISCONNECTED"
        case notResponding = "NOT_RESPONDING"
    }

    /**
     Returns information about at most 2500 visible (subject to permission checks) hosts in vCenter matching the Host.FilterSpec.
     
     - parameter hosts: (query) Identifiers of hosts that can match the filter. If unset or empty, hosts with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem. (optional)
     - parameter names: (query) Names that hosts must have to match the filter (see Host.Summary.name). If unset or empty, hosts with any name match the filter. (optional)
     - parameter folders: (query) Folders that must contain the hosts for the hosts to match the filter. If unset or empty, hosts in any folder match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. (optional)
     - parameter datacenters: (query) Datacenters that must contain the hosts for the hosts to match the filter. If unset or empty, hosts in any datacenter match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter. (optional)
     - parameter standalone: (query) If true, only hosts that are not part of a cluster can match the filter, and if false, only hosts that are are part of a cluster can match the filter. If unset Hosts can match filter independent of whether they are part of a cluster or not. If this field is true and Host.FilterSpec.clusters os not empty, no hosts will match the filter. (optional)
     - parameter clusters: (query) Clusters that must contain the hosts for the hosts to match the filter. If unset or empty, hosts in any cluster and hosts that are not in a cluster match the filter. If this field is not empty and Host.FilterSpec.standalone is true, no hosts will match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource. (optional)
     - parameter connectionStates: (query) Connection states that a host must be in to match the filter (see Host.Summary.connection-state. If unset or empty, hosts in any connection state match the filter. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(hosts: [String]? = nil, names: [String]? = nil, folders: [String]? = nil, datacenters: [String]? = nil, standalone: Bool? = nil, clusters: [String]? = nil, connectionStates: [String]? = nil, completion: @escaping ((_ data: [VcenterHostSummary]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(hosts: hosts, names: names, folders: folders, datacenters: datacenters, standalone: standalone, clusters: clusters, connectionStates: connectionStates).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about at most 2500 visible (subject to permission checks) hosts in vCenter matching the Host.FilterSpec.
     - GET /api/vcenter/host
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]
     
     - parameter hosts: (query) Identifiers of hosts that can match the filter. If unset or empty, hosts with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem. (optional)
     - parameter names: (query) Names that hosts must have to match the filter (see Host.Summary.name). If unset or empty, hosts with any name match the filter. (optional)
     - parameter folders: (query) Folders that must contain the hosts for the hosts to match the filter. If unset or empty, hosts in any folder match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. (optional)
     - parameter datacenters: (query) Datacenters that must contain the hosts for the hosts to match the filter. If unset or empty, hosts in any datacenter match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter. (optional)
     - parameter standalone: (query) If true, only hosts that are not part of a cluster can match the filter, and if false, only hosts that are are part of a cluster can match the filter. If unset Hosts can match filter independent of whether they are part of a cluster or not. If this field is true and Host.FilterSpec.clusters os not empty, no hosts will match the filter. (optional)
     - parameter clusters: (query) Clusters that must contain the hosts for the hosts to match the filter. If unset or empty, hosts in any cluster and hosts that are not in a cluster match the filter. If this field is not empty and Host.FilterSpec.standalone is true, no hosts will match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource. (optional)
     - parameter connectionStates: (query) Connection states that a host must be in to match the filter (see Host.Summary.connection-state. If unset or empty, hosts in any connection state match the filter. (optional)

     - returns: RequestBuilder<[VcenterHostSummary]> 
     */
    open class func listWithRequestBuilder(hosts: [String]? = nil, names: [String]? = nil, folders: [String]? = nil, datacenters: [String]? = nil, standalone: Bool? = nil, clusters: [String]? = nil, connectionStates: [String]? = nil) -> RequestBuilder<[VcenterHostSummary]> {
        let path = "/api/vcenter/host"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "hosts": hosts, 
            "names": names, 
            "folders": folders, 
            "datacenters": datacenters, 
            "standalone": standalone, 
            "clusters": clusters, 
            "connection_states": connectionStates
        ])

        let requestBuilder: RequestBuilder<[VcenterHostSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter filterConnectionStates
     */
    public enum FilterConnectionStates_list_0: String { 
        case connected = "CONNECTED"
        case disconnected = "DISCONNECTED"
        case notResponding = "NOT_RESPONDING"
    }

    /**
     Returns information about at most 2500 visible (subject to permission checks) hosts in vCenter matching the Host.FilterSpec.
     
     - parameter filterHosts: (query) Identifiers of hosts that can match the filter. If unset or empty, hosts with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem. (optional)
     - parameter filterNames: (query) Names that hosts must have to match the filter (see Host.Summary.name). If unset or empty, hosts with any name match the filter. (optional)
     - parameter filterFolders: (query) Folders that must contain the hosts for the hosts to match the filter. If unset or empty, hosts in any folder match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. (optional)
     - parameter filterDatacenters: (query) Datacenters that must contain the hosts for the hosts to match the filter. If unset or empty, hosts in any datacenter match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter. (optional)
     - parameter filterStandalone: (query) If true, only hosts that are not part of a cluster can match the filter, and if false, only hosts that are are part of a cluster can match the filter. If unset Hosts can match filter independent of whether they are part of a cluster or not. If this field is true and Host.FilterSpec.clusters os not empty, no hosts will match the filter. (optional)
     - parameter filterClusters: (query) Clusters that must contain the hosts for the hosts to match the filter. If unset or empty, hosts in any cluster and hosts that are not in a cluster match the filter. If this field is not empty and Host.FilterSpec.standalone is true, no hosts will match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource. (optional)
     - parameter filterConnectionStates: (query) Connection states that a host must be in to match the filter (see Host.Summary.connection-state. If unset or empty, hosts in any connection state match the filter. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list_0(filterHosts: [String]? = nil, filterNames: [String]? = nil, filterFolders: [String]? = nil, filterDatacenters: [String]? = nil, filterStandalone: Bool? = nil, filterClusters: [String]? = nil, filterConnectionStates: [String]? = nil, completion: @escaping ((_ data: VcenterHostListResp?,_ error: Error?) -> Void)) {
        list_0WithRequestBuilder(filterHosts: filterHosts, filterNames: filterNames, filterFolders: filterFolders, filterDatacenters: filterDatacenters, filterStandalone: filterStandalone, filterClusters: filterClusters, filterConnectionStates: filterConnectionStates).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about at most 2500 visible (subject to permission checks) hosts in vCenter matching the Host.FilterSpec.
     - GET /rest/vcenter/host
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter filterHosts: (query) Identifiers of hosts that can match the filter. If unset or empty, hosts with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem. (optional)
     - parameter filterNames: (query) Names that hosts must have to match the filter (see Host.Summary.name). If unset or empty, hosts with any name match the filter. (optional)
     - parameter filterFolders: (query) Folders that must contain the hosts for the hosts to match the filter. If unset or empty, hosts in any folder match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. (optional)
     - parameter filterDatacenters: (query) Datacenters that must contain the hosts for the hosts to match the filter. If unset or empty, hosts in any datacenter match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter. (optional)
     - parameter filterStandalone: (query) If true, only hosts that are not part of a cluster can match the filter, and if false, only hosts that are are part of a cluster can match the filter. If unset Hosts can match filter independent of whether they are part of a cluster or not. If this field is true and Host.FilterSpec.clusters os not empty, no hosts will match the filter. (optional)
     - parameter filterClusters: (query) Clusters that must contain the hosts for the hosts to match the filter. If unset or empty, hosts in any cluster and hosts that are not in a cluster match the filter. If this field is not empty and Host.FilterSpec.standalone is true, no hosts will match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource. (optional)
     - parameter filterConnectionStates: (query) Connection states that a host must be in to match the filter (see Host.Summary.connection-state. If unset or empty, hosts in any connection state match the filter. (optional)

     - returns: RequestBuilder<VcenterHostListResp> 
     */
    open class func list_0WithRequestBuilder(filterHosts: [String]? = nil, filterNames: [String]? = nil, filterFolders: [String]? = nil, filterDatacenters: [String]? = nil, filterStandalone: Bool? = nil, filterClusters: [String]? = nil, filterConnectionStates: [String]? = nil) -> RequestBuilder<VcenterHostListResp> {
        let path = "/rest/vcenter/host"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.hosts": filterHosts, 
            "filter.names": filterNames, 
            "filter.folders": filterFolders, 
            "filter.datacenters": filterDatacenters, 
            "filter.standalone": filterStandalone, 
            "filter.clusters": filterClusters, 
            "filter.connection_states": filterConnectionStates
        ])

        let requestBuilder: RequestBuilder<VcenterHostListResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
