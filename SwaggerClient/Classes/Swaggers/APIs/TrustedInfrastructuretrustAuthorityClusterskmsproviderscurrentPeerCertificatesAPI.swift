//
// TrustedInfrastructuretrustAuthorityClusterskmsproviderscurrentPeerCertificatesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class TrustedInfrastructuretrustAuthorityClusterskmsproviderscurrentPeerCertificatesAPI {
    /**
     Return the remote server certificates.   Contacts the configured key servers and attempts to retrieve their certificates. These certificates might not yet be trusted.    If the returned certificates are to be considered trustworthy, then it must be added to the list of trusted server certificates by adding to the certificates returned by TrustedPeerCertificates.get and invoking TrustedPeerCertificates.update with the updated list of certificates. 
     
     - parameter cluster: (path) Identifier of the cluster. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter provider: (path) Identifier of the provider. The parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.kms.Provider. 
     - parameter serverNames: (query) Names that key server must have to match the filter (see CurrentPeerCertificates.Summary.server-name). If unset or empty, key servers with any name match the filter. (optional)
     - parameter trusted: (query) Trust status that server certificates must have to match the filter (see CurrentPeerCertificates.Summary.trusted). If unset, trusted and untrusted server certificates match the filter. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listtask(cluster: String, provider: String, serverNames: [String]? = nil, trusted: Bool? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        listtaskWithRequestBuilder(cluster: cluster, provider: provider, serverNames: serverNames, trusted: trusted).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Return the remote server certificates.   Contacts the configured key servers and attempts to retrieve their certificates. These certificates might not yet be trusted.    If the returned certificates are to be considered trustworthy, then it must be added to the list of trusted server certificates by adding to the certificates returned by TrustedPeerCertificates.get and invoking TrustedPeerCertificates.update with the updated list of certificates. 
     - GET /api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/kms/providers/{provider}/peer-certs/current?vmw-task=true
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter cluster: (path) Identifier of the cluster. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter provider: (path) Identifier of the provider. The parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.kms.Provider. 
     - parameter serverNames: (query) Names that key server must have to match the filter (see CurrentPeerCertificates.Summary.server-name). If unset or empty, key servers with any name match the filter. (optional)
     - parameter trusted: (query) Trust status that server certificates must have to match the filter (see CurrentPeerCertificates.Summary.trusted). If unset, trusted and untrusted server certificates match the filter. (optional)

     - returns: RequestBuilder<String> 
     */
    open class func listtaskWithRequestBuilder(cluster: String, provider: String, serverNames: [String]? = nil, trusted: Bool? = nil) -> RequestBuilder<String> {
        var path = "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/kms/providers/{provider}/peer-certs/current?vmw-task=true"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let providerPreEscape = "\(provider)"
        let providerPostEscape = providerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{provider}", with: providerPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "server_names": serverNames, 
            "trusted": trusted
        ])

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
