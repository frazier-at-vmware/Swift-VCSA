//
// CertificateManagementvcentertlsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CertificateManagementvcentertlsAPI {
    /**
     Returns the rhttpproxy TLS certificate. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(completion: @escaping ((_ data: VcenterCertificateManagementVcenterTlsInfo?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns the rhttpproxy TLS certificate. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     - GET /api/vcenter/certificate-management/vcenter/tls
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]

     - returns: RequestBuilder<VcenterCertificateManagementVcenterTlsInfo> 
     */
    open class func callGetWithRequestBuilder() -> RequestBuilder<VcenterCertificateManagementVcenterTlsInfo> {
        let path = "/api/vcenter/certificate-management/vcenter/tls"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterCertificateManagementVcenterTlsInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns the rhttpproxy TLS certificate. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet_0(completion: @escaping ((_ data: VcenterCertificateManagementVcenterTlsResp?,_ error: Error?) -> Void)) {
        callGet_0WithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns the rhttpproxy TLS certificate. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     - GET /rest/vcenter/certificate-management/vcenter/tls
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]

     - returns: RequestBuilder<VcenterCertificateManagementVcenterTlsResp> 
     */
    open class func callGet_0WithRequestBuilder() -> RequestBuilder<VcenterCertificateManagementVcenterTlsResp> {
        let path = "/rest/vcenter/certificate-management/vcenter/tls"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterCertificateManagementVcenterTlsResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Replaces the rhttpproxy TLS certificate with the specified certificate. This operation can be used in three scenarios :     1.  When the CSR is created and the private key is already stored, this operation can replace the certificate. The Tls.Spec.cert (but not Tls.Spec.key and Tls.Spec.root-cert) must be provided as input.     2.  When the certificate is signed by a third party certificate authority/VMCA and the root certificate of the third party certificate authority/VMCA is already one of the trusted roots in the trust store, this operation can replace the certificate and private key. The Tls.Spec.cert and Tls.Spec.key (but not Tls.Spec.root-cert) must be provided as input.     3.  When the certificate is signed by a third party certificate authority and the root certificate of the third party certificate authority is not one of the trusted roots in the trust store, this operation can replace the certificate, private key and root CA certificate. The Tls.Spec.cert,Tls.Spec.key and Tls.Spec.root-cert must be provided as input.    After this operation completes, the services using the certificate will be restarted for the new certificate to take effect.  The above three scenarios are only supported from vsphere 7.0 onwards.  if you do not have all of the privileges described as follows:     -  Operation execution requires CertificateManagement.Administer.  
     
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callSet(requestBody: VcenterCertificateManagementVcenterTlsSet? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        callSetWithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Replaces the rhttpproxy TLS certificate with the specified certificate. This operation can be used in three scenarios :     1.  When the CSR is created and the private key is already stored, this operation can replace the certificate. The Tls.Spec.cert (but not Tls.Spec.key and Tls.Spec.root-cert) must be provided as input.     2.  When the certificate is signed by a third party certificate authority/VMCA and the root certificate of the third party certificate authority/VMCA is already one of the trusted roots in the trust store, this operation can replace the certificate and private key. The Tls.Spec.cert and Tls.Spec.key (but not Tls.Spec.root-cert) must be provided as input.     3.  When the certificate is signed by a third party certificate authority and the root certificate of the third party certificate authority is not one of the trusted roots in the trust store, this operation can replace the certificate, private key and root CA certificate. The Tls.Spec.cert,Tls.Spec.key and Tls.Spec.root-cert must be provided as input.    After this operation completes, the services using the certificate will be restarted for the new certificate to take effect.  The above three scenarios are only supported from vsphere 7.0 onwards.  if you do not have all of the privileges described as follows:     -  Operation execution requires CertificateManagement.Administer.  
     - PUT /api/vcenter/certificate-management/vcenter/tls
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func callSetWithRequestBuilder(requestBody: VcenterCertificateManagementVcenterTlsSet? = nil) -> RequestBuilder<Void> {
        let path = "/api/vcenter/certificate-management/vcenter/tls"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replaces the rhttpproxy TLS certificate with the specified certificate. This operation can be used in three scenarios :     1.  When the CSR is created and the private key is already stored, this operation can replace the certificate. The Tls.Spec.cert (but not Tls.Spec.key and Tls.Spec.root-cert) must be provided as input.     2.  When the certificate is signed by a third party certificate authority/VMCA and the root certificate of the third party certificate authority/VMCA is already one of the trusted roots in the trust store, this operation can replace the certificate and private key. The Tls.Spec.cert and Tls.Spec.key (but not Tls.Spec.root-cert) must be provided as input.     3.  When the certificate is signed by a third party certificate authority and the root certificate of the third party certificate authority is not one of the trusted roots in the trust store, this operation can replace the certificate, private key and root CA certificate. The Tls.Spec.cert,Tls.Spec.key and Tls.Spec.root-cert must be provided as input.    After this operation completes, the services using the certificate will be restarted for the new certificate to take effect.  The above three scenarios are only supported from vsphere 7.0 onwards.  if you do not have all of the privileges described as follows:     -  Operation execution requires CertificateManagement.Administer.  
     
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callSet_0(requestBody: VcenterCertificateManagementVcenterTlsSet, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        callSet_0WithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Replaces the rhttpproxy TLS certificate with the specified certificate. This operation can be used in three scenarios :     1.  When the CSR is created and the private key is already stored, this operation can replace the certificate. The Tls.Spec.cert (but not Tls.Spec.key and Tls.Spec.root-cert) must be provided as input.     2.  When the certificate is signed by a third party certificate authority/VMCA and the root certificate of the third party certificate authority/VMCA is already one of the trusted roots in the trust store, this operation can replace the certificate and private key. The Tls.Spec.cert and Tls.Spec.key (but not Tls.Spec.root-cert) must be provided as input.     3.  When the certificate is signed by a third party certificate authority and the root certificate of the third party certificate authority is not one of the trusted roots in the trust store, this operation can replace the certificate, private key and root CA certificate. The Tls.Spec.cert,Tls.Spec.key and Tls.Spec.root-cert must be provided as input.    After this operation completes, the services using the certificate will be restarted for the new certificate to take effect.  The above three scenarios are only supported from vsphere 7.0 onwards.  if you do not have all of the privileges described as follows:     -  Operation execution requires CertificateManagement.Administer.  
     - PUT /rest/vcenter/certificate-management/vcenter/tls
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter requestBody: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func callSet_0WithRequestBuilder(requestBody: VcenterCertificateManagementVcenterTlsSet) -> RequestBuilder<Void> {
        let path = "/rest/vcenter/certificate-management/vcenter/tls"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Renews the TLS certificate for the given duration period.  After this operation completes, the services using the certificate will be restarted for the new certificate to take effect.  if you do not have all of the privileges described as follows:     -  Operation execution requires CertificateManagement.Administer.  
     
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func renew(requestBody: VcenterCertificateManagementVcenterTlsRenew? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        renewWithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Renews the TLS certificate for the given duration period.  After this operation completes, the services using the certificate will be restarted for the new certificate to take effect.  if you do not have all of the privileges described as follows:     -  Operation execution requires CertificateManagement.Administer.  
     - POST /api/vcenter/certificate-management/vcenter/tls?action=renew
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func renewWithRequestBuilder(requestBody: VcenterCertificateManagementVcenterTlsRenew? = nil) -> RequestBuilder<Void> {
        let path = "/api/vcenter/certificate-management/vcenter/tls?action=renew"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Renews the TLS certificate for the given duration period.  After this operation completes, the services using the certificate will be restarted for the new certificate to take effect.  if you do not have all of the privileges described as follows:     -  Operation execution requires CertificateManagement.Administer.  
     
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func renew_0(requestBody: VcenterCertificateManagementVcenterTlsRenew? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        renew_0WithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Renews the TLS certificate for the given duration period.  After this operation completes, the services using the certificate will be restarted for the new certificate to take effect.  if you do not have all of the privileges described as follows:     -  Operation execution requires CertificateManagement.Administer.  
     - POST /rest/vcenter/certificate-management/vcenter/tls?action=renew
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func renew_0WithRequestBuilder(requestBody: VcenterCertificateManagementVcenterTlsRenew? = nil) -> RequestBuilder<Void> {
        let path = "/rest/vcenter/certificate-management/vcenter/tls?action=renew"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace MACHINE SSL with VMCA signed one with the given Spec.The system will go for restart.   After this operation completes, the services using the certificate will be restarted for the new certificate to take effect.  if you do not have all of the privileges described as follows:     -  Operation execution requires CertificateManagement.Administer.  
     
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func replaceVmcaSigned(requestBody: VcenterCertificateManagementVcenterTlsReplaceVmcaSigned? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        replaceVmcaSignedWithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Replace MACHINE SSL with VMCA signed one with the given Spec.The system will go for restart.   After this operation completes, the services using the certificate will be restarted for the new certificate to take effect.  if you do not have all of the privileges described as follows:     -  Operation execution requires CertificateManagement.Administer.  
     - POST /api/vcenter/certificate-management/vcenter/tls?action=replace-vmca-signed
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func replaceVmcaSignedWithRequestBuilder(requestBody: VcenterCertificateManagementVcenterTlsReplaceVmcaSigned? = nil) -> RequestBuilder<Void> {
        let path = "/api/vcenter/certificate-management/vcenter/tls?action=replace-vmca-signed"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace MACHINE SSL with VMCA signed one with the given Spec.The system will go for restart.   After this operation completes, the services using the certificate will be restarted for the new certificate to take effect.  if you do not have all of the privileges described as follows:     -  Operation execution requires CertificateManagement.Administer.  
     
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func replaceVmcaSigned_0(requestBody: VcenterCertificateManagementVcenterTlsReplaceVmcaSigned, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        replaceVmcaSigned_0WithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Replace MACHINE SSL with VMCA signed one with the given Spec.The system will go for restart.   After this operation completes, the services using the certificate will be restarted for the new certificate to take effect.  if you do not have all of the privileges described as follows:     -  Operation execution requires CertificateManagement.Administer.  
     - POST /rest/vcenter/certificate-management/vcenter/tls?action=replace-vmca-signed
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter requestBody: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func replaceVmcaSigned_0WithRequestBuilder(requestBody: VcenterCertificateManagementVcenterTlsReplaceVmcaSigned) -> RequestBuilder<Void> {
        let path = "/rest/vcenter/certificate-management/vcenter/tls?action=replace-vmca-signed"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
