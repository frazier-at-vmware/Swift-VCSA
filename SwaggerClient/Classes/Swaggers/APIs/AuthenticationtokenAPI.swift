//
// AuthenticationtokenAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AuthenticationtokenAPI {
    /**
     Provides a token endpoint as defined in RFC 6749.  Supported grant types:      -   urn:ietf:params:oauth:grant-type:token-exchange - Exchanges incoming token based on the spec and current client authorization data.     This operation supercedes vcenter.tokenservice.TokenExchange#exchange. The REST rendering of the newer operation matches RFC8693's definition for both input and output of the operation. 
     
     - parameter grantType: (form) The value of urn:ietf:params:oauth:grant-type:token-exchange indicates that a token exchange is being performed. When clients pass a value of this structure as a parameter, the field must be one of urn:ietf:params:oauth:grant-type:token-exchange. When operations return a value of this structure as a result, the field will be one of urn:ietf:params:oauth:grant-type:token-exchange. 
     - parameter resource: (form) Indicates the location of the target service or resource where the client intends to use the requested security token. If unset, it is inferred from other arguments. (optional)
     - parameter audience: (form) The logical name of the target service where the client intends to use the requested security token. This serves a purpose similar to the Token.IssueSpec.resource field, but with the client providing a logical name rather than a location. If unset, it is inferred from other arguments. (optional)
     - parameter scope: (form) A list of space-delimited, case-sensitive strings, that allow the client to specify the desired scope of the requested security token in the context of the service or resource where the token will be used. If unset, it is inferred from other arguments. (optional)
     - parameter requestedTokenType: (form) An identifier for the type of the requested security token. If the requested type is unspecified, the issued token type is at the discretion of the server and may be dictated by knowledge of the requirements of the service or resource indicated by the Token.IssueSpec.resource or Token.IssueSpec.audience field. If unset, it is inferred from other arguments. (optional)
     - parameter subjectToken: (form) A security token that represents the identity of the party on behalf of whom exchange is being made. Typically, the subject of this token will be the subject of the security token issued. Token is base64-encoded.  The field is required when the value of the Token.IssueSpec.grant-type field is urn:ietf:params:oauth:grant-type:token-exchange.  This field is currently required. In the future, the structure may support grant-types other than urn:ietf:params:oauth:grant-type:token-exchange for which the value may be unset. (optional)
     - parameter subjectTokenType: (form) An identifier, that indicates the type of the security token in the Token.IssueSpec.subject-token field.  The field is required when the value of the Token.IssueSpec.grant-type field is urn:ietf:params:oauth:grant-type:token-exchange.  This field is currently required. In the future, the structure may support grant-types other than urn:ietf:params:oauth:grant-type:token-exchange for which the value may be unset. (optional)
     - parameter actorToken: (form) A security token that represents the identity of the acting party. Typically, this will be the party that is authorized to use the requested security token and act on behalf of the subject. unset if not needed for the specific case of exchange. (optional)
     - parameter actorTokenType: (form) An identifier, that indicates the type of the security token in the Token.IssueSpec.actor-token field. unset if Token.IssueSpec.actor-token field is not present. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issue(grantType: String, resource: String? = nil, audience: String? = nil, scope: String? = nil, requestedTokenType: String? = nil, subjectToken: String? = nil, subjectTokenType: String? = nil, actorToken: String? = nil, actorTokenType: String? = nil, completion: @escaping ((_ data: Oauth2TokenInfo?,_ error: Error?) -> Void)) {
        issueWithRequestBuilder(grantType: grantType, resource: resource, audience: audience, scope: scope, requestedTokenType: requestedTokenType, subjectToken: subjectToken, subjectTokenType: subjectTokenType, actorToken: actorToken, actorTokenType: actorTokenType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Provides a token endpoint as defined in RFC 6749.  Supported grant types:      -   urn:ietf:params:oauth:grant-type:token-exchange - Exchanges incoming token based on the spec and current client authorization data.     This operation supercedes vcenter.tokenservice.TokenExchange#exchange. The REST rendering of the newer operation matches RFC8693's definition for both input and output of the operation. 
     - POST /api/vcenter/authentication/token
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter grantType: (form) The value of urn:ietf:params:oauth:grant-type:token-exchange indicates that a token exchange is being performed. When clients pass a value of this structure as a parameter, the field must be one of urn:ietf:params:oauth:grant-type:token-exchange. When operations return a value of this structure as a result, the field will be one of urn:ietf:params:oauth:grant-type:token-exchange. 
     - parameter resource: (form) Indicates the location of the target service or resource where the client intends to use the requested security token. If unset, it is inferred from other arguments. (optional)
     - parameter audience: (form) The logical name of the target service where the client intends to use the requested security token. This serves a purpose similar to the Token.IssueSpec.resource field, but with the client providing a logical name rather than a location. If unset, it is inferred from other arguments. (optional)
     - parameter scope: (form) A list of space-delimited, case-sensitive strings, that allow the client to specify the desired scope of the requested security token in the context of the service or resource where the token will be used. If unset, it is inferred from other arguments. (optional)
     - parameter requestedTokenType: (form) An identifier for the type of the requested security token. If the requested type is unspecified, the issued token type is at the discretion of the server and may be dictated by knowledge of the requirements of the service or resource indicated by the Token.IssueSpec.resource or Token.IssueSpec.audience field. If unset, it is inferred from other arguments. (optional)
     - parameter subjectToken: (form) A security token that represents the identity of the party on behalf of whom exchange is being made. Typically, the subject of this token will be the subject of the security token issued. Token is base64-encoded.  The field is required when the value of the Token.IssueSpec.grant-type field is urn:ietf:params:oauth:grant-type:token-exchange.  This field is currently required. In the future, the structure may support grant-types other than urn:ietf:params:oauth:grant-type:token-exchange for which the value may be unset. (optional)
     - parameter subjectTokenType: (form) An identifier, that indicates the type of the security token in the Token.IssueSpec.subject-token field.  The field is required when the value of the Token.IssueSpec.grant-type field is urn:ietf:params:oauth:grant-type:token-exchange.  This field is currently required. In the future, the structure may support grant-types other than urn:ietf:params:oauth:grant-type:token-exchange for which the value may be unset. (optional)
     - parameter actorToken: (form) A security token that represents the identity of the acting party. Typically, this will be the party that is authorized to use the requested security token and act on behalf of the subject. unset if not needed for the specific case of exchange. (optional)
     - parameter actorTokenType: (form) An identifier, that indicates the type of the security token in the Token.IssueSpec.actor-token field. unset if Token.IssueSpec.actor-token field is not present. (optional)

     - returns: RequestBuilder<Oauth2TokenInfo> 
     */
    open class func issueWithRequestBuilder(grantType: String, resource: String? = nil, audience: String? = nil, scope: String? = nil, requestedTokenType: String? = nil, subjectToken: String? = nil, subjectTokenType: String? = nil, actorToken: String? = nil, actorTokenType: String? = nil) -> RequestBuilder<Oauth2TokenInfo> {
        let path = "/api/vcenter/authentication/token"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "grant_type": grantType,
            "resource": resource,
            "audience": audience,
            "scope": scope,
            "requested_token_type": requestedTokenType,
            "subject_token": subjectToken,
            "subject_token_type": subjectTokenType,
            "actor_token": actorToken,
            "actor_token_type": actorTokenType
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Oauth2TokenInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
