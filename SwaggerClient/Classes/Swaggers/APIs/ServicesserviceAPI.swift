//
// ServicesserviceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ServicesserviceAPI {
    /**
     Returns the state of a service.
     
     - parameter service: (path) identifier of the service whose state is being queried. The parameter must be an identifier for the resource type: vcenter.services.Service. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(service: String, completion: @escaping ((_ data: VcenterServicesServiceInfo?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(service: service).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns the state of a service.
     - GET /api/vcenter/services/{service}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter service: (path) identifier of the service whose state is being queried. The parameter must be an identifier for the resource type: vcenter.services.Service. 

     - returns: RequestBuilder<VcenterServicesServiceInfo> 
     */
    open class func callGetWithRequestBuilder(service: String) -> RequestBuilder<VcenterServicesServiceInfo> {
        var path = "/api/vcenter/services/{service}"
        let servicePreEscape = "\(service)"
        let servicePostEscape = servicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{service}", with: servicePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterServicesServiceInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns the state of a service.
     
     - parameter service: (path) identifier of the service whose state is being queried. The parameter must be an identifier for the resource type: vcenter.services.Service. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet_0(service: String, completion: @escaping ((_ data: VcenterServicesServiceResp?,_ error: Error?) -> Void)) {
        callGet_0WithRequestBuilder(service: service).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns the state of a service.
     - GET /rest/vcenter/services/{service}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter service: (path) identifier of the service whose state is being queried. The parameter must be an identifier for the resource type: vcenter.services.Service. 

     - returns: RequestBuilder<VcenterServicesServiceResp> 
     */
    open class func callGet_0WithRequestBuilder(service: String) -> RequestBuilder<VcenterServicesServiceResp> {
        var path = "/rest/vcenter/services/{service}"
        let servicePreEscape = "\(service)"
        let servicePostEscape = servicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{service}", with: servicePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterServicesServiceResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Lists details of vCenter services.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listDetails(completion: @escaping ((_ data: [String:VcenterServicesServiceInfo]?,_ error: Error?) -> Void)) {
        listDetailsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Lists details of vCenter services.
     - GET /api/vcenter/services
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]

     - returns: RequestBuilder<[String:VcenterServicesServiceInfo]> 
     */
    open class func listDetailsWithRequestBuilder() -> RequestBuilder<[String:VcenterServicesServiceInfo]> {
        let path = "/api/vcenter/services"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String:VcenterServicesServiceInfo]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Lists details of vCenter services.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listDetails_0(completion: @escaping ((_ data: VcenterServicesServiceListDetailsResp?,_ error: Error?) -> Void)) {
        listDetails_0WithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Lists details of vCenter services.
     - GET /rest/vcenter/services
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]

     - returns: RequestBuilder<VcenterServicesServiceListDetailsResp> 
     */
    open class func listDetails_0WithRequestBuilder() -> RequestBuilder<VcenterServicesServiceListDetailsResp> {
        let path = "/rest/vcenter/services"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterServicesServiceListDetailsResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Restarts a service
     
     - parameter service: (path) identifier of the service to restart The parameter must be an identifier for the resource type: vcenter.services.Service. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func restart(service: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        restartWithRequestBuilder(service: service).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Restarts a service
     - POST /api/vcenter/services/{service}?action=restart
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter service: (path) identifier of the service to restart The parameter must be an identifier for the resource type: vcenter.services.Service. 

     - returns: RequestBuilder<Void> 
     */
    open class func restartWithRequestBuilder(service: String) -> RequestBuilder<Void> {
        var path = "/api/vcenter/services/{service}?action=restart"
        let servicePreEscape = "\(service)"
        let servicePostEscape = servicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{service}", with: servicePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Restarts a service
     
     - parameter service: (path) identifier of the service to restart The parameter must be an identifier for the resource type: vcenter.services.Service. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func restart_0(service: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        restart_0WithRequestBuilder(service: service).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Restarts a service
     - POST /rest/vcenter/services/{service}/restart
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter service: (path) identifier of the service to restart The parameter must be an identifier for the resource type: vcenter.services.Service. 

     - returns: RequestBuilder<Void> 
     */
    open class func restart_0WithRequestBuilder(service: String) -> RequestBuilder<Void> {
        var path = "/rest/vcenter/services/{service}/restart"
        let servicePreEscape = "\(service)"
        let servicePostEscape = servicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{service}", with: servicePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Starts a service
     
     - parameter service: (path) identifier of the service to start The parameter must be an identifier for the resource type: vcenter.services.Service. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func start(service: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        startWithRequestBuilder(service: service).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Starts a service
     - POST /api/vcenter/services/{service}?action=start
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter service: (path) identifier of the service to start The parameter must be an identifier for the resource type: vcenter.services.Service. 

     - returns: RequestBuilder<Void> 
     */
    open class func startWithRequestBuilder(service: String) -> RequestBuilder<Void> {
        var path = "/api/vcenter/services/{service}?action=start"
        let servicePreEscape = "\(service)"
        let servicePostEscape = servicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{service}", with: servicePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Starts a service
     
     - parameter service: (path) identifier of the service to start The parameter must be an identifier for the resource type: vcenter.services.Service. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func start_0(service: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        start_0WithRequestBuilder(service: service).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Starts a service
     - POST /rest/vcenter/services/{service}/start
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter service: (path) identifier of the service to start The parameter must be an identifier for the resource type: vcenter.services.Service. 

     - returns: RequestBuilder<Void> 
     */
    open class func start_0WithRequestBuilder(service: String) -> RequestBuilder<Void> {
        var path = "/rest/vcenter/services/{service}/start"
        let servicePreEscape = "\(service)"
        let servicePostEscape = servicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{service}", with: servicePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Stops a service
     
     - parameter service: (path) identifier of the service to stop The parameter must be an identifier for the resource type: vcenter.services.Service. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stop(service: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        stopWithRequestBuilder(service: service).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Stops a service
     - POST /api/vcenter/services/{service}?action=stop
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter service: (path) identifier of the service to stop The parameter must be an identifier for the resource type: vcenter.services.Service. 

     - returns: RequestBuilder<Void> 
     */
    open class func stopWithRequestBuilder(service: String) -> RequestBuilder<Void> {
        var path = "/api/vcenter/services/{service}?action=stop"
        let servicePreEscape = "\(service)"
        let servicePostEscape = servicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{service}", with: servicePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Stops a service
     
     - parameter service: (path) identifier of the service to stop The parameter must be an identifier for the resource type: vcenter.services.Service. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stop_0(service: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        stop_0WithRequestBuilder(service: service).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Stops a service
     - POST /rest/vcenter/services/{service}/stop
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter service: (path) identifier of the service to stop The parameter must be an identifier for the resource type: vcenter.services.Service. 

     - returns: RequestBuilder<Void> 
     */
    open class func stop_0WithRequestBuilder(service: String) -> RequestBuilder<Void> {
        var path = "/rest/vcenter/services/{service}/stop"
        let servicePreEscape = "\(service)"
        let servicePostEscape = servicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{service}", with: servicePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Updates the properties of a service.
     
     - parameter service: (path) identifier of the service whose properties are being updated. The parameter must be an identifier for the resource type: vcenter.services.Service. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(service: String, requestBody: VcenterServicesServiceUpdate? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(service: service, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates the properties of a service.
     - PATCH /api/vcenter/services/{service}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter service: (path) identifier of the service whose properties are being updated. The parameter must be an identifier for the resource type: vcenter.services.Service. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateWithRequestBuilder(service: String, requestBody: VcenterServicesServiceUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/api/vcenter/services/{service}"
        let servicePreEscape = "\(service)"
        let servicePostEscape = servicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{service}", with: servicePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Updates the properties of a service.
     
     - parameter service: (path) identifier of the service whose properties are being updated. The parameter must be an identifier for the resource type: vcenter.services.Service. 
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update_0(service: String, requestBody: VcenterServicesServiceUpdate, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        update_0WithRequestBuilder(service: service, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates the properties of a service.
     - PATCH /rest/vcenter/services/{service}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter service: (path) identifier of the service whose properties are being updated. The parameter must be an identifier for the resource type: vcenter.services.Service. 
     - parameter requestBody: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func update_0WithRequestBuilder(service: String, requestBody: VcenterServicesServiceUpdate) -> RequestBuilder<Void> {
        var path = "/rest/vcenter/services/{service}"
        let servicePreEscape = "\(service)"
        let servicePostEscape = servicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{service}", with: servicePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
