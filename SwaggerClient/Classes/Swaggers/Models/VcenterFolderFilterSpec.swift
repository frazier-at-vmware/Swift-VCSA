//
// VcenterFolderFilterSpec.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct VcenterFolderFilterSpec: Codable {

    /** Identifiers of folders that can match the filter. If unset or empty, folders with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. */
    public var folders: [String]?
    /** Names that folders must have to match the filter (see Folder.Summary.name). If unset or empty, folders with any name match the filter. */
    public var names: [String]?
    /** Type that folders must have to match the filter (see Folder.Summary.type). If unset, folders with any type match the filter. */
    public var type: VcenterFolderType?
    /** Folders that must contain the folder for the folder to match the filter. If unset or empty, folder in any folder match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. */
    public var parentFolders: [String]?
    /** Datacenters that must contain the folder for the folder to match the filter. If unset or empty, folder in any datacenter match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter. */
    public var datacenters: [String]?

    public init(folders: [String]?, names: [String]?, type: VcenterFolderType?, parentFolders: [String]?, datacenters: [String]?) {
        self.folders = folders
        self.names = names
        self.type = type
        self.parentFolders = parentFolders
        self.datacenters = datacenters
    }

    public enum CodingKeys: String, CodingKey { 
        case folders
        case names
        case type
        case parentFolders = "parent_folders"
        case datacenters
    }


}

