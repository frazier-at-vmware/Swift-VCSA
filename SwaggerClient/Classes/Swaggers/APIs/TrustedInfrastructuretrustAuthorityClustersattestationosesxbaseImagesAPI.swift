//
// TrustedInfrastructuretrustAuthorityClustersattestationosesxbaseImagesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class TrustedInfrastructuretrustAuthorityClustersattestationosesxbaseImagesAPI {
    /**
     Remove a trusted ESX base image of each ESX in the cluster.
     
     - parameter cluster: (path) The id of the cluster on which the operation will be executed. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter version: (path) The ESX base image version. The parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.os.esx.BaseImage. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deletetask(cluster: String, version: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        deletetaskWithRequestBuilder(cluster: cluster, version: version).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Remove a trusted ESX base image of each ESX in the cluster.
     - DELETE /api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/os/esx/base-images/{version}?vmw-task=true
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter cluster: (path) The id of the cluster on which the operation will be executed. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter version: (path) The ESX base image version. The parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.os.esx.BaseImage. 

     - returns: RequestBuilder<String> 
     */
    open class func deletetaskWithRequestBuilder(cluster: String, version: String) -> RequestBuilder<String> {
        var path = "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/os/esx/base-images/{version}?vmw-task=true"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(version)"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the trusted ESX base version details.
     
     - parameter cluster: (path) The id of the cluster on which the operation will be executed. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter version: (path) The ESX base image version. The parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.os.esx.BaseImage. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gettask(cluster: String, version: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        gettaskWithRequestBuilder(cluster: cluster, version: version).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the trusted ESX base version details.
     - GET /api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/os/esx/base-images/{version}?vmw-task=true
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter cluster: (path) The id of the cluster on which the operation will be executed. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter version: (path) The ESX base image version. The parameter must be an identifier for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.os.esx.BaseImage. 

     - returns: RequestBuilder<String> 
     */
    open class func gettaskWithRequestBuilder(cluster: String, version: String) -> RequestBuilder<String> {
        var path = "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/os/esx/base-images/{version}?vmw-task=true"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(version)"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Import ESX metadata as a new trusted base image to each host in the cluster.   Import a boot_imgdb.tgz file which contains metadata that describes a trusted ESX base image. A boot_imgdb.tgz file can be downloaded from a representative host. 
     
     - parameter cluster: (path) The id of the cluster on which the operation will be executed. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func importFromImgdbtask(cluster: String, requestBody: VcenterTrustedInfrastructureTrustAuthorityClustersAttestationOsEsxBaseImagesImportFromImgdbTask? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        importFromImgdbtaskWithRequestBuilder(cluster: cluster, requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Import ESX metadata as a new trusted base image to each host in the cluster.   Import a boot_imgdb.tgz file which contains metadata that describes a trusted ESX base image. A boot_imgdb.tgz file can be downloaded from a representative host. 
     - POST /api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/os/esx/base-images?action=import-from-imgdb&vmw-task=true
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter cluster: (path) The id of the cluster on which the operation will be executed. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func importFromImgdbtaskWithRequestBuilder(cluster: String, requestBody: VcenterTrustedInfrastructureTrustAuthorityClustersAttestationOsEsxBaseImagesImportFromImgdbTask? = nil) -> RequestBuilder<String> {
        var path = "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/os/esx/base-images?action=import-from-imgdb&vmw-task=true"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     * enum for parameter health
     */
    public enum Health_listtask: String { 
        case _none = "NONE"
        case ok = "OK"
        case warning = "WARNING"
        case error = "ERROR"
    }

    /**
     Return a list of trusted ESX base images.
     
     - parameter cluster: (path) The id of the cluster on which the operation will be executed. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter version: (query) Search criteria by ESX base image version numbers. version if {@term.unset} return all ESX version numbers. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.os.esx.BaseImage. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.os.esx.BaseImage. (optional)
     - parameter displayName: (query) Search criteria by ESX base image version version numbers. displayName if {@term.unset} return all ESX display version numbers. (optional)
     - parameter health: (query) Search criteria by health indicator. health if {@term.unset} return all health indicators. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listtask(cluster: String, version: [String]? = nil, displayName: [String]? = nil, health: [String]? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        listtaskWithRequestBuilder(cluster: cluster, version: version, displayName: displayName, health: health).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Return a list of trusted ESX base images.
     - GET /api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/os/esx/base-images?vmw-task=true
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter cluster: (path) The id of the cluster on which the operation will be executed. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter version: (query) Search criteria by ESX base image version numbers. version if {@term.unset} return all ESX version numbers. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.os.esx.BaseImage. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.trusted_infrastructure.trust_authority_clusters.attestation.os.esx.BaseImage. (optional)
     - parameter displayName: (query) Search criteria by ESX base image version version numbers. displayName if {@term.unset} return all ESX display version numbers. (optional)
     - parameter health: (query) Search criteria by health indicator. health if {@term.unset} return all health indicators. (optional)

     - returns: RequestBuilder<String> 
     */
    open class func listtaskWithRequestBuilder(cluster: String, version: [String]? = nil, displayName: [String]? = nil, health: [String]? = nil) -> RequestBuilder<String> {
        var path = "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}/attestation/os/esx/base-images?vmw-task=true"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "version": version, 
            "display_name": displayName, 
            "health": health
        ])

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
