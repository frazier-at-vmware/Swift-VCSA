//
// VcenterIdentityProvidersSummary.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct VcenterIdentityProvidersSummary: Codable {

    /** The identifier of the provider When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.identity.Providers. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.identity.Providers. */
    public var provider: String
    /** The user friendly name for the provider This field is optional because it was added in a newer version than its parent node. */
    public var name: String?
    /** The config type of the identity provider */
    public var configTag: VcenterIdentityProvidersConfigType
    /** OAuth2 Summary This field is optional and it is only relevant when the value of Providers.Summary.config-tag is Oauth2. */
    public var oauth2: VcenterIdentityProvidersOauth2Summary?
    /** OIDC Summary This field is optional and it is only relevant when the value of Providers.Summary.config-tag is Oidc. */
    public var oidc: VcenterIdentityProvidersOidcSummary?
    /** Specifies whether the provider is the default provider. */
    public var isDefault: Bool
    /** Set of fully qualified domain names to trust when federating with this identity provider. Tokens from this identity provider will only be validated if the user belongs to one of these domains, and any domain-qualified groups in the tokens will be filtered to include only those groups that belong to one of these domains. If domainNames is an empty set, domain validation behavior at login with this identity provider will be as follows: the user&#39;s domain will be parsed from the User Principal Name (UPN) value that is found in the tokens returned by the identity provider. This domain will then be implicitly trusted and used to filter any groups that are also provided in the tokens. This field is optional because it was added in a newer version than its parent node. */
    public var domainNames: [String]?
    /**  key/value pairs that are to be appended to the authEndpoint request.   How to append to authEndpoint request:  If the map is not empty, a \&quot;?\&quot; is added to the endpoint URL, and combination of each k and each string in the v is added with an \&quot;&amp;\&quot; delimiter. Details:    - If the value contains only one string, then the key is added with \&quot;k&#x3D;v\&quot;.    - If the value is an empty list, then the key is added without a \&quot;&#x3D;v\&quot;.    - If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.  This field is optional because it was added in a newer version than its parent node. */
    public var authQueryParams: [VcenterIdentityProvidersCreateSpecAuthQueryParams]?

    public init(provider: String, name: String?, configTag: VcenterIdentityProvidersConfigType, oauth2: VcenterIdentityProvidersOauth2Summary?, oidc: VcenterIdentityProvidersOidcSummary?, isDefault: Bool, domainNames: [String]?, authQueryParams: [VcenterIdentityProvidersCreateSpecAuthQueryParams]?) {
        self.provider = provider
        self.name = name
        self.configTag = configTag
        self.oauth2 = oauth2
        self.oidc = oidc
        self.isDefault = isDefault
        self.domainNames = domainNames
        self.authQueryParams = authQueryParams
    }

    public enum CodingKeys: String, CodingKey { 
        case provider
        case name
        case configTag = "config_tag"
        case oauth2
        case oidc
        case isDefault = "is_default"
        case domainNames = "domain_names"
        case authQueryParams = "auth_query_params"
    }


}

