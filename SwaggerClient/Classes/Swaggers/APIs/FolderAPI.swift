//
// FolderAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class FolderAPI {
    /**
     * enum for parameter type
     */
    public enum ModelType_list: String { 
        case datacenter = "DATACENTER"
        case datastore = "DATASTORE"
        case host = "HOST"
        case network = "NETWORK"
        case virtualMachine = "VIRTUAL_MACHINE"
    }

    /**
     Returns information about at most 1000 visible (subject to permission checks) folders in vCenter matching the Folder.FilterSpec.
     
     - parameter folders: (query) Identifiers of folders that can match the filter. If unset or empty, folders with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. (optional)
     - parameter names: (query) Names that folders must have to match the filter (see Folder.Summary.name). If unset or empty, folders with any name match the filter. (optional)
     - parameter type: (query) The Folder.Type enumerated type defines the type of a vCenter Server folder. The type of a folder determines what what kinds of children can be contained in the folder. (optional)
     - parameter parentFolders: (query) Folders that must contain the folder for the folder to match the filter. If unset or empty, folder in any folder match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. (optional)
     - parameter datacenters: (query) Datacenters that must contain the folder for the folder to match the filter. If unset or empty, folder in any datacenter match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(folders: [String]? = nil, names: [String]? = nil, type: ModelType_list? = nil, parentFolders: [String]? = nil, datacenters: [String]? = nil, completion: @escaping ((_ data: [VcenterFolderSummary]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(folders: folders, names: names, type: type, parentFolders: parentFolders, datacenters: datacenters).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about at most 1000 visible (subject to permission checks) folders in vCenter matching the Folder.FilterSpec.
     - GET /api/vcenter/folder
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]
     
     - parameter folders: (query) Identifiers of folders that can match the filter. If unset or empty, folders with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. (optional)
     - parameter names: (query) Names that folders must have to match the filter (see Folder.Summary.name). If unset or empty, folders with any name match the filter. (optional)
     - parameter type: (query) The Folder.Type enumerated type defines the type of a vCenter Server folder. The type of a folder determines what what kinds of children can be contained in the folder. (optional)
     - parameter parentFolders: (query) Folders that must contain the folder for the folder to match the filter. If unset or empty, folder in any folder match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. (optional)
     - parameter datacenters: (query) Datacenters that must contain the folder for the folder to match the filter. If unset or empty, folder in any datacenter match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter. (optional)

     - returns: RequestBuilder<[VcenterFolderSummary]> 
     */
    open class func listWithRequestBuilder(folders: [String]? = nil, names: [String]? = nil, type: ModelType_list? = nil, parentFolders: [String]? = nil, datacenters: [String]? = nil) -> RequestBuilder<[VcenterFolderSummary]> {
        let path = "/api/vcenter/folder"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folders": folders, 
            "names": names, 
            "type": type?.rawValue, 
            "parent_folders": parentFolders, 
            "datacenters": datacenters
        ])

        let requestBuilder: RequestBuilder<[VcenterFolderSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter filterType
     */
    public enum FilterType_list_0: String { 
        case datacenter = "DATACENTER"
        case datastore = "DATASTORE"
        case host = "HOST"
        case network = "NETWORK"
        case virtualMachine = "VIRTUAL_MACHINE"
    }

    /**
     Returns information about at most 1000 visible (subject to permission checks) folders in vCenter matching the Folder.FilterSpec.
     
     - parameter filterFolders: (query) Identifiers of folders that can match the filter. If unset or empty, folders with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. (optional)
     - parameter filterNames: (query) Names that folders must have to match the filter (see Folder.Summary.name). If unset or empty, folders with any name match the filter. (optional)
     - parameter filterType: (query) The Folder.Type enumerated type defines the type of a vCenter Server folder. The type of a folder determines what what kinds of children can be contained in the folder. (optional)
     - parameter filterParentFolders: (query) Folders that must contain the folder for the folder to match the filter. If unset or empty, folder in any folder match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. (optional)
     - parameter filterDatacenters: (query) Datacenters that must contain the folder for the folder to match the filter. If unset or empty, folder in any datacenter match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list_0(filterFolders: [String]? = nil, filterNames: [String]? = nil, filterType: FilterType_list_0? = nil, filterParentFolders: [String]? = nil, filterDatacenters: [String]? = nil, completion: @escaping ((_ data: VcenterFolderListResp?,_ error: Error?) -> Void)) {
        list_0WithRequestBuilder(filterFolders: filterFolders, filterNames: filterNames, filterType: filterType, filterParentFolders: filterParentFolders, filterDatacenters: filterDatacenters).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about at most 1000 visible (subject to permission checks) folders in vCenter matching the Folder.FilterSpec.
     - GET /rest/vcenter/folder
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter filterFolders: (query) Identifiers of folders that can match the filter. If unset or empty, folders with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. (optional)
     - parameter filterNames: (query) Names that folders must have to match the filter (see Folder.Summary.name). If unset or empty, folders with any name match the filter. (optional)
     - parameter filterType: (query) The Folder.Type enumerated type defines the type of a vCenter Server folder. The type of a folder determines what what kinds of children can be contained in the folder. (optional)
     - parameter filterParentFolders: (query) Folders that must contain the folder for the folder to match the filter. If unset or empty, folder in any folder match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. (optional)
     - parameter filterDatacenters: (query) Datacenters that must contain the folder for the folder to match the filter. If unset or empty, folder in any datacenter match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter. (optional)

     - returns: RequestBuilder<VcenterFolderListResp> 
     */
    open class func list_0WithRequestBuilder(filterFolders: [String]? = nil, filterNames: [String]? = nil, filterType: FilterType_list_0? = nil, filterParentFolders: [String]? = nil, filterDatacenters: [String]? = nil) -> RequestBuilder<VcenterFolderListResp> {
        let path = "/rest/vcenter/folder"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.folders": filterFolders, 
            "filter.names": filterNames, 
            "filter.type": filterType?.rawValue, 
            "filter.parent_folders": filterParentFolders, 
            "filter.datacenters": filterDatacenters
        ])

        let requestBuilder: RequestBuilder<VcenterFolderListResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
