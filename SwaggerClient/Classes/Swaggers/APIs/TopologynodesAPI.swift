//
// TopologynodesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class TopologynodesAPI {
    /**
     Retrieve details for a given identifier of the vCenter or Platform Services Controller node. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     
     - parameter node: (path) Identifier of the vCenter or Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the node. The parameter must be an identifier for the resource type: vcenter.VCenter.name. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(node: String, completion: @escaping ((_ data: VcenterTopologyNodesInfo?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(node: node).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve details for a given identifier of the vCenter or Platform Services Controller node. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     - GET /api/vcenter/topology/nodes/{node}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter node: (path) Identifier of the vCenter or Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the node. The parameter must be an identifier for the resource type: vcenter.VCenter.name. 

     - returns: RequestBuilder<VcenterTopologyNodesInfo> 
     */
    open class func callGetWithRequestBuilder(node: String) -> RequestBuilder<VcenterTopologyNodesInfo> {
        var path = "/api/vcenter/topology/nodes/{node}"
        let nodePreEscape = "\(node)"
        let nodePostEscape = nodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{node}", with: nodePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterTopologyNodesInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve details for a given identifier of the vCenter or Platform Services Controller node. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     
     - parameter node: (path) Identifier of the vCenter or Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the node. The parameter must be an identifier for the resource type: vcenter.VCenter.name. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet_0(node: String, completion: @escaping ((_ data: VcenterTopologyNodesResp?,_ error: Error?) -> Void)) {
        callGet_0WithRequestBuilder(node: node).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve details for a given identifier of the vCenter or Platform Services Controller node. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     - GET /rest/vcenter/topology/nodes/{node}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter node: (path) Identifier of the vCenter or Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the node. The parameter must be an identifier for the resource type: vcenter.VCenter.name. 

     - returns: RequestBuilder<VcenterTopologyNodesResp> 
     */
    open class func callGet_0WithRequestBuilder(node: String) -> RequestBuilder<VcenterTopologyNodesResp> {
        var path = "/rest/vcenter/topology/nodes/{node}"
        let nodePreEscape = "\(node)"
        let nodePostEscape = nodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{node}", with: nodePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterTopologyNodesResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter types
     */
    public enum Types_list: String { 
        case vcsaEmbedded = "VCSA_EMBEDDED"
        case vcsaExternal = "VCSA_EXTERNAL"
        case pscExternal = "PSC_EXTERNAL"
    }

    /**
     Returns information about all vCenter and Platform Services Controller nodes matching the Nodes.FilterSpec. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     
     - parameter types: (query) Types of the appliance that a vCenter and Platform Services Controller node must be to match the filter (see Nodes.ApplianceType. If unset or empty, node of any ApplianceType match the filter. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(types: [String]? = nil, completion: @escaping ((_ data: [VcenterTopologyNodesSummary]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(types: types).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about all vCenter and Platform Services Controller nodes matching the Nodes.FilterSpec. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     - GET /api/vcenter/topology/nodes
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]
     
     - parameter types: (query) Types of the appliance that a vCenter and Platform Services Controller node must be to match the filter (see Nodes.ApplianceType. If unset or empty, node of any ApplianceType match the filter. (optional)

     - returns: RequestBuilder<[VcenterTopologyNodesSummary]> 
     */
    open class func listWithRequestBuilder(types: [String]? = nil) -> RequestBuilder<[VcenterTopologyNodesSummary]> {
        let path = "/api/vcenter/topology/nodes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "types": types
        ])

        let requestBuilder: RequestBuilder<[VcenterTopologyNodesSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter filterTypes
     */
    public enum FilterTypes_list_0: String { 
        case vcsaEmbedded = "VCSA_EMBEDDED"
        case vcsaExternal = "VCSA_EXTERNAL"
        case pscExternal = "PSC_EXTERNAL"
    }

    /**
     Returns information about all vCenter and Platform Services Controller nodes matching the Nodes.FilterSpec. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     
     - parameter filterTypes: (query) Types of the appliance that a vCenter and Platform Services Controller node must be to match the filter (see Nodes.ApplianceType. If unset or empty, node of any ApplianceType match the filter. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list_0(filterTypes: [String]? = nil, completion: @escaping ((_ data: VcenterTopologyNodesListResp?,_ error: Error?) -> Void)) {
        list_0WithRequestBuilder(filterTypes: filterTypes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about all vCenter and Platform Services Controller nodes matching the Nodes.FilterSpec. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     - GET /rest/vcenter/topology/nodes
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter filterTypes: (query) Types of the appliance that a vCenter and Platform Services Controller node must be to match the filter (see Nodes.ApplianceType. If unset or empty, node of any ApplianceType match the filter. (optional)

     - returns: RequestBuilder<VcenterTopologyNodesListResp> 
     */
    open class func list_0WithRequestBuilder(filterTypes: [String]? = nil) -> RequestBuilder<VcenterTopologyNodesListResp> {
        let path = "/rest/vcenter/topology/nodes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.types": filterTypes
        ])

        let requestBuilder: RequestBuilder<VcenterTopologyNodesListResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
