//
// VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct VcenterNamespaceManagementClustersNCPClusterNetworkUpdateSpec: Codable {

    /** CIDR blocks from which Kubernetes allocates pod IP addresses. This range should not overlap with those in Clusters.EnableSpec.service-cidr, Clusters.NCPClusterNetworkUpdateSpec.ingress-cidrs, Clusters.NCPClusterNetworkUpdateSpec.egress-cidrs, or other services running in the datacenter. An update operation only allows for addition of new CIDR blocks to the existing list. All Pod CIDR blocks must be of at least subnet size /23. If unset, CIDRs from which Kubernetes allocates pod IP addresses will not be modified. */
    public var podCidrs: [VcenterNamespaceManagementIpv4Cidr]?
    /** CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer. These ranges should not overlap with those in Clusters.NCPClusterNetworkUpdateSpec.pod-cidrs, Clusters.EnableSpec.service-cidr, Clusters.NCPClusterNetworkUpdateSpec.egress-cidrs, or other services running in the datacenter. An update operation only allows for addition of new CIDR blocks to the existing list. If unset, CIDRs from which Kubernetes allocates ingress IP addresses will not be modified. */
    public var ingressCidrs: [VcenterNamespaceManagementIpv4Cidr]?
    /** CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs. These ranges should not overlap with those in Clusters.NCPClusterNetworkUpdateSpec.pod-cidrs, Clusters.EnableSpec.service-cidr, Clusters.NCPClusterNetworkUpdateSpec.ingress-cidrs, or other services running in the datacenter. An update operation only allows for addition of new CIDR blocks to the existing list. If unset, CIDR from which Kubernetes allocates egress IP addresses will not be modified. */
    public var egressCidrs: [VcenterNamespaceManagementIpv4Cidr]?
    /** PEM-encoded x509 certificate used by NSX as a default fallback certificate for Kubernetes Ingress services. If unset, the Kubernetes Ingress services certificate will not be modified. */
    public var defaultIngressTlsCertificate: String?

    public init(podCidrs: [VcenterNamespaceManagementIpv4Cidr]?, ingressCidrs: [VcenterNamespaceManagementIpv4Cidr]?, egressCidrs: [VcenterNamespaceManagementIpv4Cidr]?, defaultIngressTlsCertificate: String?) {
        self.podCidrs = podCidrs
        self.ingressCidrs = ingressCidrs
        self.egressCidrs = egressCidrs
        self.defaultIngressTlsCertificate = defaultIngressTlsCertificate
    }

    public enum CodingKeys: String, CodingKey { 
        case podCidrs = "pod_cidrs"
        case ingressCidrs = "ingress_cidrs"
        case egressCidrs = "egress_cidrs"
        case defaultIngressTlsCertificate = "default_ingress_tls_certificate"
    }


}

