//
// VcenterCertificateManagementVcenterVmcaRootCreateSpec.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct VcenterCertificateManagementVcenterVmcaRootCreateSpec: Codable {

    /** The size of the key to be used for public and private key generation. If unset the key size will be 3072. */
    public var keySize: Int64?
    /** The common name of the host for which certificate is generated. If unset the common name will be the primary network identifier (PNID) of the vCenter Virtual Server Appliance (VCSA). */
    public var commonName: String?
    /** Organization field in certificate subject. If unset the organization will be &#39;VMware&#39;. */
    public var organization: String?
    /** Organization unit field in certificate subject. If unset the organization unit will be &#39;VMware Engineering&#39;. */
    public var organizationUnit: String?
    /** Locality field in certificate subject. If unset the locality will be &#39;Palo Alto&#39;. */
    public var locality: String?
    /** State field in certificate subject. If unset the state will be &#39;California&#39;. */
    public var stateOrProvince: String?
    /** Country field in certificate subject. If unset the country will be &#39;US&#39;. */
    public var country: String?
    /** Email field in Certificate extensions. If unset the emailAddress will be &#39;email@acme.com&#39;. */
    public var emailAddress: String?
    /** SubjectAltName is list of Dns Names and Ip addresses. If unset PNID of host will be used as IPAddress or Hostname for certificate generation. */
    public var subjectAltName: [String]?

    public init(keySize: Int64?, commonName: String?, organization: String?, organizationUnit: String?, locality: String?, stateOrProvince: String?, country: String?, emailAddress: String?, subjectAltName: [String]?) {
        self.keySize = keySize
        self.commonName = commonName
        self.organization = organization
        self.organizationUnit = organizationUnit
        self.locality = locality
        self.stateOrProvince = stateOrProvince
        self.country = country
        self.emailAddress = emailAddress
        self.subjectAltName = subjectAltName
    }

    public enum CodingKeys: String, CodingKey { 
        case keySize = "key_size"
        case commonName = "common_name"
        case organization
        case organizationUnit = "organization_unit"
        case locality
        case stateOrProvince = "state_or_province"
        case country
        case emailAddress = "email_address"
        case subjectAltName = "subject_alt_name"
    }


}

