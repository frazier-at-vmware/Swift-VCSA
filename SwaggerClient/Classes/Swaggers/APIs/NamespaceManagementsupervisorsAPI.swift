//
// NamespaceManagementsupervisorsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class NamespaceManagementsupervisorsAPI {
    /**
      Enable the Supervisor on a single vSphere cluster. This operation sets up the Kubernetes instance for the cluster along with worker nodes. A {@link #vcenter.consumption-domains.Zones} zone will automatically be created if the specified cluster is not already associated with a vSphere Zone.   To verify if the Supervisor is compatible with this vSphere cluster use: ClusterCompatibility.list.   A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster.   To call this API on a Supervisor with multiple vSphere Clusters, use Topology.get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. 
     
     - parameter cluster: (path) Identifier for the cluster used to enable the Supervisor Cluster. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enableOnComputeCluster(cluster: String, requestBody: VcenterNamespaceManagementSupervisorsEnableOnComputeCluster? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        enableOnComputeClusterWithRequestBuilder(cluster: cluster, requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
      Enable the Supervisor on a single vSphere cluster. This operation sets up the Kubernetes instance for the cluster along with worker nodes. A {@link #vcenter.consumption-domains.Zones} zone will automatically be created if the specified cluster is not already associated with a vSphere Zone.   To verify if the Supervisor is compatible with this vSphere cluster use: ClusterCompatibility.list.   A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster.   To call this API on a Supervisor with multiple vSphere Clusters, use Topology.get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. 
     - POST /api/vcenter/namespace-management/supervisors/{cluster}?action=enable_on_compute_cluster
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter cluster: (path) Identifier for the cluster used to enable the Supervisor Cluster. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func enableOnComputeClusterWithRequestBuilder(cluster: String, requestBody: VcenterNamespaceManagementSupervisorsEnableOnComputeCluster? = nil) -> RequestBuilder<String> {
        var path = "/api/vcenter/namespace-management/supervisors/{cluster}?action=enable_on_compute_cluster"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
      Enable a Supervisor on a set of vSphere Zones. The cluster control plane and its workloads will be eligible for placement across the zones. Enabling on multiple zones enables fault tolerance for applications deployed on more than one zone in case of a zone failure.   To verify if the Supervisor is compatible with the provided Zones use: ClusterCompatibility.list. 
     
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enableOnZones(requestBody: VcenterNamespaceManagementSupervisorsEnableOnZones? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        enableOnZonesWithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
      Enable a Supervisor on a set of vSphere Zones. The cluster control plane and its workloads will be eligible for placement across the zones. Enabling on multiple zones enables fault tolerance for applications deployed on more than one zone in case of a zone failure.   To verify if the Supervisor is compatible with the provided Zones use: ClusterCompatibility.list. 
     - POST /api/vcenter/namespace-management/supervisors?action=enable_on_zones
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func enableOnZonesWithRequestBuilder(requestBody: VcenterNamespaceManagementSupervisorsEnableOnZones? = nil) -> RequestBuilder<String> {
        let path = "/api/vcenter/namespace-management/supervisors?action=enable_on_zones"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
