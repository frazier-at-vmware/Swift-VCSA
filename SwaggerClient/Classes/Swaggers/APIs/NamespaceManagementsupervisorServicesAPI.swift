//
// NamespaceManagementsupervisorServicesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class NamespaceManagementsupervisorServicesAPI {
    /**
     Activate a Supervisor Service. This operation will change the SupervisorServices.State of the supervisor service to in ACTIVATED state, and activate all versions of the supervisor service. if you do not have all of the privileges described as follows:     -  Operation execution requires SupervisorServices.Manage.  
     
     - parameter supervisorService: (path) Identifier for the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func activate(supervisorService: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        activateWithRequestBuilder(supervisorService: supervisorService).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Activate a Supervisor Service. This operation will change the SupervisorServices.State of the supervisor service to in ACTIVATED state, and activate all versions of the supervisor service. if you do not have all of the privileges described as follows:     -  Operation execution requires SupervisorServices.Manage.  
     - PATCH /api/vcenter/namespace-management/supervisor-services/{supervisor_service}?action=activate
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter supervisorService: (path) Identifier for the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 

     - returns: RequestBuilder<Void> 
     */
    open class func activateWithRequestBuilder(supervisorService: String) -> RequestBuilder<Void> {
        var path = "/api/vcenter/namespace-management/supervisor-services/{supervisor_service}?action=activate"
        let supervisorServicePreEscape = "\(supervisorService)"
        let supervisorServicePostEscape = supervisorServicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{supervisor_service}", with: supervisorServicePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Return the information for the specified Supervisor Service. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     
     - parameter supervisorService: (path) Identifier for the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(supervisorService: String, completion: @escaping ((_ data: VcenterNamespaceManagementSupervisorServicesInfo?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(supervisorService: supervisorService).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Return the information for the specified Supervisor Service. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     - GET /api/vcenter/namespace-management/supervisor-services/{supervisor_service}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter supervisorService: (path) Identifier for the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 

     - returns: RequestBuilder<VcenterNamespaceManagementSupervisorServicesInfo> 
     */
    open class func callGetWithRequestBuilder(supervisorService: String) -> RequestBuilder<VcenterNamespaceManagementSupervisorServicesInfo> {
        var path = "/api/vcenter/namespace-management/supervisor-services/{supervisor_service}"
        let supervisorServicePreEscape = "\(supervisorService)"
        let supervisorServicePostEscape = supervisorServicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{supervisor_service}", with: supervisorServicePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterNamespaceManagementSupervisorServicesInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Perform validation checks on the content of a Supervisor Service version defined in the spec. The operation returns the validation status and relevant Supervisor Service version information that are available in the content. A custom format will always return a VALID status. Only vSphere and Carvel packages can return multiple validation statuses. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func checkContent(requestBody: VcenterNamespaceManagementSupervisorServicesCheckContent, completion: @escaping ((_ data: VcenterNamespaceManagementSupervisorServicesCheckResult?,_ error: Error?) -> Void)) {
        checkContentWithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Perform validation checks on the content of a Supervisor Service version defined in the spec. The operation returns the validation status and relevant Supervisor Service version information that are available in the content. A custom format will always return a VALID status. Only vSphere and Carvel packages can return multiple validation statuses. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     - POST /api/vcenter/namespace-management/supervisor-services?action=checkContent
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter requestBody: (body)  

     - returns: RequestBuilder<VcenterNamespaceManagementSupervisorServicesCheckResult> 
     */
    open class func checkContentWithRequestBuilder(requestBody: VcenterNamespaceManagementSupervisorServicesCheckContent) -> RequestBuilder<VcenterNamespaceManagementSupervisorServicesCheckResult> {
        let path = "/api/vcenter/namespace-management/supervisor-services?action=checkContent"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterNamespaceManagementSupervisorServicesCheckResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a Supervisor Service. If version specs are provided in the spec, new Supervisor Service versions will be created as part of the operation. if you do not have all of the privileges described as follows:     -  Operation execution requires SupervisorServices.Manage.  
     
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(requestBody: VcenterNamespaceManagementSupervisorServicesCreate? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create a Supervisor Service. If version specs are provided in the spec, new Supervisor Service versions will be created as part of the operation. if you do not have all of the privileges described as follows:     -  Operation execution requires SupervisorServices.Manage.  
     - POST /api/vcenter/namespace-management/supervisor-services
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func createWithRequestBuilder(requestBody: VcenterNamespaceManagementSupervisorServicesCreate? = nil) -> RequestBuilder<Void> {
        let path = "/api/vcenter/namespace-management/supervisor-services"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Deactivate a Supervisor Service. This operation will change the SupervisorServices.State of the supervisor service to DEACTIVATED state, and deactivate all versions of the supervisor service. Note that this operation should be called before deleting the Supervisor Service. if you do not have all of the privileges described as follows:     -  Operation execution requires SupervisorServices.Manage.  
     
     - parameter supervisorService: (path) Identifier for the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deactivate(supervisorService: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deactivateWithRequestBuilder(supervisorService: supervisorService).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Deactivate a Supervisor Service. This operation will change the SupervisorServices.State of the supervisor service to DEACTIVATED state, and deactivate all versions of the supervisor service. Note that this operation should be called before deleting the Supervisor Service. if you do not have all of the privileges described as follows:     -  Operation execution requires SupervisorServices.Manage.  
     - PATCH /api/vcenter/namespace-management/supervisor-services/{supervisor_service}?action=deactivate
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter supervisorService: (path) Identifier for the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 

     - returns: RequestBuilder<Void> 
     */
    open class func deactivateWithRequestBuilder(supervisorService: String) -> RequestBuilder<Void> {
        var path = "/api/vcenter/namespace-management/supervisor-services/{supervisor_service}?action=deactivate"
        let supervisorServicePreEscape = "\(supervisorService)"
        let supervisorServicePostEscape = supervisorServicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{supervisor_service}", with: supervisorServicePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a Supervisor Service. This operation only deletes the Supervisor Service from vCenter if the Supervisor Service is in DEACTIVATED state, and all versions of the Supervisor Service are removed from vCenter. Note that the SupervisorServices.deactivate operation should be called to deactivate the Supervisor Service before the Supervisor Service can be deleted. if you do not have all of the privileges described as follows:     -  Operation execution requires SupervisorServices.Manage.  
     
     - parameter supervisorService: (path) Identifier for the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(supervisorService: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(supervisorService: supervisorService).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a Supervisor Service. This operation only deletes the Supervisor Service from vCenter if the Supervisor Service is in DEACTIVATED state, and all versions of the Supervisor Service are removed from vCenter. Note that the SupervisorServices.deactivate operation should be called to deactivate the Supervisor Service before the Supervisor Service can be deleted. if you do not have all of the privileges described as follows:     -  Operation execution requires SupervisorServices.Manage.  
     - DELETE /api/vcenter/namespace-management/supervisor-services/{supervisor_service}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter supervisorService: (path) Identifier for the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(supervisorService: String) -> RequestBuilder<Void> {
        var path = "/api/vcenter/namespace-management/supervisor-services/{supervisor_service}"
        let supervisorServicePreEscape = "\(supervisorService)"
        let supervisorServicePostEscape = supervisorServicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{supervisor_service}", with: supervisorServicePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Return the information about all Supervisor Services on this vCenter. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(completion: @escaping ((_ data: [VcenterNamespaceManagementSupervisorServicesSummary]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Return the information about all Supervisor Services on this vCenter. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     - GET /api/vcenter/namespace-management/supervisor-services
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]

     - returns: RequestBuilder<[VcenterNamespaceManagementSupervisorServicesSummary]> 
     */
    open class func listWithRequestBuilder() -> RequestBuilder<[VcenterNamespaceManagementSupervisorServicesSummary]> {
        let path = "/api/vcenter/namespace-management/supervisor-services"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[VcenterNamespaceManagementSupervisorServicesSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a Supervisor Service. if you do not have all of the privileges described as follows:     -  Operation execution requires SupervisorServices.Manage.  
     
     - parameter supervisorService: (path) Identifier for the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(supervisorService: String, requestBody: VcenterNamespaceManagementSupervisorServicesUpdate? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(supervisorService: supervisorService, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update a Supervisor Service. if you do not have all of the privileges described as follows:     -  Operation execution requires SupervisorServices.Manage.  
     - PATCH /api/vcenter/namespace-management/supervisor-services/{supervisor_service}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter supervisorService: (path) Identifier for the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateWithRequestBuilder(supervisorService: String, requestBody: VcenterNamespaceManagementSupervisorServicesUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/api/vcenter/namespace-management/supervisor-services/{supervisor_service}"
        let supervisorServicePreEscape = "\(supervisorService)"
        let supervisorServicePostEscape = supervisorServicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{supervisor_service}", with: supervisorServicePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
