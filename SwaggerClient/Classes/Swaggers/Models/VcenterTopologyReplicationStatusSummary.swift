//
// VcenterTopologyReplicationStatusSummary.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct VcenterTopologyReplicationStatusSummary: Codable {

    /** Identifier for the vCenter or Platform Services Controller node. Identifier can be either IP address or DNS resolvable name of the node. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.VCenter.name. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.VCenter.name. */
    public var node: String
    /** Identifier for the vCenter or Platform Services Controller replication partner. Identifier can be either IP address or DNS resolvable name of the replication partner. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.VCenter.name. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.VCenter.name. */
    public var replicationPartner: String
    /** Indicates if the VMware Directory Service on partner is reachable or not. */
    public var partnerAvailable: Bool
    /** Indicates if the replication status for the node with respect to replication partner can be retrieved or not. */
    public var statusAvailable: Bool
    /** Indicates if node is processing replication changes from the replication partner. This field will be unset if the partner host or replication status is not available, i.e, if ReplicationStatus.Summary.partner-available or ReplicationStatus.Summary.status-available is false. */
    public var replicating: Bool?
    /** Number of replication changes node is behind the replication partner. This field will be unset if the partner host or replication status is not available, i.e, if ReplicationStatus.Summary.partner-available or ReplicationStatus.Summary.status-available is false. */
    public var changeLag: Int64?

    public init(node: String, replicationPartner: String, partnerAvailable: Bool, statusAvailable: Bool, replicating: Bool?, changeLag: Int64?) {
        self.node = node
        self.replicationPartner = replicationPartner
        self.partnerAvailable = partnerAvailable
        self.statusAvailable = statusAvailable
        self.replicating = replicating
        self.changeLag = changeLag
    }

    public enum CodingKeys: String, CodingKey { 
        case node
        case replicationPartner = "replication_partner"
        case partnerAvailable = "partner_available"
        case statusAvailable = "status_available"
        case replicating
        case changeLag = "change_lag"
    }


}

