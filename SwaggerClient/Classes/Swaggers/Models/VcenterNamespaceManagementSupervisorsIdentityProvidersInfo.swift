//
// VcenterNamespaceManagementSupervisorsIdentityProvidersInfo.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct VcenterNamespaceManagementSupervisorsIdentityProvidersInfo: Codable {

    /** The immutable identifier of an identity provider generated when an identity provider is registered for a Supervisor. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vcenter.namespace_management.identity.Provider. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vcenter.namespace_management.identity.Provider. */
    public var provider: String
    /** A name to be used for the given identity provider. This name will be displayed in the vCenter UI. */
    public var displayName: String
    /** The URL to the identity provider issuing tokens. The OIDC discovery URL will be derived from the issuer URL, according to RFC8414: https://issuerURL/.well-known/openid-configuration. This must use HTTPS as the scheme. */
    public var issuerURL: String
    /** The claim from the upstream identity provider ID token or user info endpoint to inspect to obtain the username for the given user. If unset, the upstream issuer URL will be concatenated with the &#39;sub&#39; claim to generate the username to be used with Kubernetes. */
    public var usernameClaim: String?
    /** The claim from the upstream identity provider ID token or user info endpoint to inspect to obtain the groups for the given user. If unset, no groups will be used from the upstream identity provider. */
    public var groupsClaim: String?
    /** The clientID is the OAuth 2.0 client ID registered in the upstream identity provider and used by the Supervisor. */
    public var clientID: String
    /** The certificate authority data holds the trusted roots to be used to establish HTTPS connections with the identity provider. If unset, HTTPS connections with the upstream identity provider will rely on a default set of system trusted roots. */
    public var certificateAuthorityData: String?
    /** Additional scopes to be requested in tokens issued by this identity provider. The &#39;openid&#39; scope will always be requested. If unset, no additional scopes will be requested. */
    public var additionalScopes: [String]?
    /** Any additional parameters to be sent to the upstream identity provider during the authorize request in the OAuth2 authorization code flow. One use case is to pass in a default tenant ID if you have a multi-tenant identity provider. For instance, with VMware&#39;s Cloud Services Platform, if your organization ID is &#39;long-form-org-id&#39;, the &#39;orgLink&#39; parameter can be set to \&quot;/csp/gateway/am/api/orgs/long-form-org-id\&quot; to allow users logging in to leverage that organization. If unset, no additional parameters will be sent to the upstream identity provider. */
    public var additionalAuthorizeParameters: [String:String]?

    public init(provider: String, displayName: String, issuerURL: String, usernameClaim: String?, groupsClaim: String?, clientID: String, certificateAuthorityData: String?, additionalScopes: [String]?, additionalAuthorizeParameters: [String:String]?) {
        self.provider = provider
        self.displayName = displayName
        self.issuerURL = issuerURL
        self.usernameClaim = usernameClaim
        self.groupsClaim = groupsClaim
        self.clientID = clientID
        self.certificateAuthorityData = certificateAuthorityData
        self.additionalScopes = additionalScopes
        self.additionalAuthorizeParameters = additionalAuthorizeParameters
    }

    public enum CodingKeys: String, CodingKey { 
        case provider
        case displayName = "display_name"
        case issuerURL = "issuer_URL"
        case usernameClaim = "username_claim"
        case groupsClaim = "groups_claim"
        case clientID = "client_ID"
        case certificateAuthorityData = "certificate_authority_data"
        case additionalScopes = "additional_scopes"
        case additionalAuthorizeParameters = "additional_authorize_parameters"
    }


}

