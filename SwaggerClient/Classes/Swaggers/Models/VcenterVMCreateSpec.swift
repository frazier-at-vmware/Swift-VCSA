//
// VcenterVMCreateSpec.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct VcenterVMCreateSpec: Codable {

    /** Guest OS. */
    public var guestOS: VcenterVmGuestOS
    /** Virtual machine name. If unset, a default name will be generated by the server. */
    public var name: String?
    /** Virtual machine placement information. This field is currently required. In the future, if this field is unset, the system will attempt to choose suitable resources on which to place the virtual machine. */
    public var placement: VcenterVMPlacementSpec?
    /** Virtual hardware version. If unset, defaults to the most recent version supported by the server. */
    public var hardwareVersion: VcenterVmHardwareVersion?
    /** Boot configuration. If unset, guest-specific default values will be used. */
    public var boot: VcenterVmHardwareBootCreateSpec?
    /** Boot device configuration. If unset, a server-specific boot sequence will be used. */
    public var bootDevices: [VcenterVmHardwareBootDeviceEntryCreateSpec]?
    /** CPU configuration. If unset, guest-specific default values will be used. */
    public var cpu: VcenterVmHardwareCpuUpdateSpec?
    /** Memory configuration. If unset, guest-specific default values will be used. */
    public var memory: VcenterVmHardwareMemoryUpdateSpec?
    /** List of disks. If unset, a single blank virtual disk of a guest-specific size will be created on the same storage as the virtual machine configuration, and will use a guest-specific host bus adapter type. If the guest-specific size is 0, no virtual disk will be created. */
    public var disks: [VcenterVmHardwareDiskCreateSpec]?
    /** List of Ethernet adapters. If unset, no Ethernet adapters will be created. */
    public var nics: [VcenterVmHardwareEthernetCreateSpec]?
    /** List of CD-ROMs. If unset, no CD-ROM devices will be created. */
    public var cdroms: [VcenterVmHardwareCdromCreateSpec]?
    /** List of floppy drives. If unset, no floppy drives will be created. */
    public var floppies: [VcenterVmHardwareFloppyCreateSpec]?
    /** List of parallel ports. If unset, no parallel ports will be created. */
    public var parallelPorts: [VcenterVmHardwareParallelCreateSpec]?
    /** List of serial ports. If unset, no serial ports will be created. */
    public var serialPorts: [VcenterVmHardwareSerialCreateSpec]?
    /** List of SATA adapters. If unset, any adapters necessary to connect the virtual machine&#39;s storage devices will be created; this includes any devices that explicitly specify a SATA host bus adapter, as well as any devices that do not specify a host bus adapter if the guest&#39;s preferred adapter type is SATA. */
    public var sataAdapters: [VcenterVmHardwareAdapterSataCreateSpec]?
    /** List of SCSI adapters. If unset, any adapters necessary to connect the virtual machine&#39;s storage devices will be created; this includes any devices that explicitly specify a SCSI host bus adapter, as well as any devices that do not specify a host bus adapter if the guest&#39;s preferred adapter type is SCSI. The type of the SCSI adapter will be a guest-specific default type. */
    public var scsiAdapters: [VcenterVmHardwareAdapterScsiCreateSpec]?
    /** List of NVMe adapters. If unset, any adapters necessary to connect the virtual machine&#39;s storage devices will be created; this includes any devices that explicitly specify a NVMe host bus adapter, as well as any devices that do not specify a host bus adapter if the guest&#39;s preferred adapter type is NVMe. */
    public var nvmeAdapters: [VcenterVmHardwareAdapterNvmeCreateSpec]?
    /** The VM.StoragePolicySpec structure contains information about the storage policy that is to be associated with the virtual machine home (which contains the configuration and log files). If unset the datastore default storage policy (if applicable) is applied. Currently a default storage policy is only supported by object datastores : VVol and vSAN. For non-object datastores, if unset then no storage policy would be associated with the virtual machine home. */
    public var storagePolicy: VcenterVMStoragePolicySpec?

    public init(guestOS: VcenterVmGuestOS, name: String?, placement: VcenterVMPlacementSpec?, hardwareVersion: VcenterVmHardwareVersion?, boot: VcenterVmHardwareBootCreateSpec?, bootDevices: [VcenterVmHardwareBootDeviceEntryCreateSpec]?, cpu: VcenterVmHardwareCpuUpdateSpec?, memory: VcenterVmHardwareMemoryUpdateSpec?, disks: [VcenterVmHardwareDiskCreateSpec]?, nics: [VcenterVmHardwareEthernetCreateSpec]?, cdroms: [VcenterVmHardwareCdromCreateSpec]?, floppies: [VcenterVmHardwareFloppyCreateSpec]?, parallelPorts: [VcenterVmHardwareParallelCreateSpec]?, serialPorts: [VcenterVmHardwareSerialCreateSpec]?, sataAdapters: [VcenterVmHardwareAdapterSataCreateSpec]?, scsiAdapters: [VcenterVmHardwareAdapterScsiCreateSpec]?, nvmeAdapters: [VcenterVmHardwareAdapterNvmeCreateSpec]?, storagePolicy: VcenterVMStoragePolicySpec?) {
        self.guestOS = guestOS
        self.name = name
        self.placement = placement
        self.hardwareVersion = hardwareVersion
        self.boot = boot
        self.bootDevices = bootDevices
        self.cpu = cpu
        self.memory = memory
        self.disks = disks
        self.nics = nics
        self.cdroms = cdroms
        self.floppies = floppies
        self.parallelPorts = parallelPorts
        self.serialPorts = serialPorts
        self.sataAdapters = sataAdapters
        self.scsiAdapters = scsiAdapters
        self.nvmeAdapters = nvmeAdapters
        self.storagePolicy = storagePolicy
    }

    public enum CodingKeys: String, CodingKey { 
        case guestOS = "guest_OS"
        case name
        case placement
        case hardwareVersion = "hardware_version"
        case boot
        case bootDevices = "boot_devices"
        case cpu
        case memory
        case disks
        case nics
        case cdroms
        case floppies
        case parallelPorts = "parallel_ports"
        case serialPorts = "serial_ports"
        case sataAdapters = "sata_adapters"
        case scsiAdapters = "scsi_adapters"
        case nvmeAdapters = "nvme_adapters"
        case storagePolicy = "storage_policy"
    }


}

