//
// VmTemplatelibraryItemsversionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class VmTemplatelibraryItemsversionsAPI {
    /**
     Returns information about the live version of a library item containing a virtual machine template.
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter version: (path) Version of the library item. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(templateLibraryItem: String, version: String, completion: @escaping ((_ data: VcenterVmTemplateLibraryItemsVersionsInfo?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(templateLibraryItem: templateLibraryItem, version: version).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about the live version of a library item containing a virtual machine template.
     - GET /api/vcenter/vm-template/library-items/{template_library_item}/versions/{version}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter version: (path) Version of the library item. 

     - returns: RequestBuilder<VcenterVmTemplateLibraryItemsVersionsInfo> 
     */
    open class func callGetWithRequestBuilder(templateLibraryItem: String, version: String) -> RequestBuilder<VcenterVmTemplateLibraryItemsVersionsInfo> {
        var path = "/api/vcenter/vm-template/library-items/{template_library_item}/versions/{version}"
        let templateLibraryItemPreEscape = "\(templateLibraryItem)"
        let templateLibraryItemPostEscape = templateLibraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_library_item}", with: templateLibraryItemPostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(version)"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterVmTemplateLibraryItemsVersionsInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns information about the live version of a library item containing a virtual machine template.
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter version: (path) Version of the library item. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet_0(templateLibraryItem: String, version: String, completion: @escaping ((_ data: VcenterVmTemplateLibraryItemsVersionsResp?,_ error: Error?) -> Void)) {
        callGet_0WithRequestBuilder(templateLibraryItem: templateLibraryItem, version: version).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about the live version of a library item containing a virtual machine template.
     - GET /rest/vcenter/vm-template/library-items/{template_library_item}/versions/{version}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter version: (path) Version of the library item. 

     - returns: RequestBuilder<VcenterVmTemplateLibraryItemsVersionsResp> 
     */
    open class func callGet_0WithRequestBuilder(templateLibraryItem: String, version: String) -> RequestBuilder<VcenterVmTemplateLibraryItemsVersionsResp> {
        var path = "/rest/vcenter/vm-template/library-items/{template_library_item}/versions/{version}"
        let templateLibraryItemPreEscape = "\(templateLibraryItem)"
        let templateLibraryItemPostEscape = templateLibraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_library_item}", with: templateLibraryItemPostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(version)"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterVmTemplateLibraryItemsVersionsResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Deletes the virtual machine template contained in the library item at the specified version.
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter version: (path) Version of the library item to delete. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(templateLibraryItem: String, version: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(templateLibraryItem: templateLibraryItem, version: version).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Deletes the virtual machine template contained in the library item at the specified version.
     - DELETE /api/vcenter/vm-template/library-items/{template_library_item}/versions/{version}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter version: (path) Version of the library item to delete. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(templateLibraryItem: String, version: String) -> RequestBuilder<Void> {
        var path = "/api/vcenter/vm-template/library-items/{template_library_item}/versions/{version}"
        let templateLibraryItemPreEscape = "\(templateLibraryItem)"
        let templateLibraryItemPostEscape = templateLibraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_library_item}", with: templateLibraryItemPostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(version)"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Deletes the virtual machine template contained in the library item at the specified version.
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter version: (path) Version of the library item to delete. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete_0(templateLibraryItem: String, version: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        delete_0WithRequestBuilder(templateLibraryItem: templateLibraryItem, version: version).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Deletes the virtual machine template contained in the library item at the specified version.
     - DELETE /rest/vcenter/vm-template/library-items/{template_library_item}/versions/{version}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter version: (path) Version of the library item to delete. 

     - returns: RequestBuilder<Void> 
     */
    open class func delete_0WithRequestBuilder(templateLibraryItem: String, version: String) -> RequestBuilder<Void> {
        var path = "/rest/vcenter/vm-template/library-items/{template_library_item}/versions/{version}"
        let templateLibraryItemPreEscape = "\(templateLibraryItem)"
        let templateLibraryItemPostEscape = templateLibraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_library_item}", with: templateLibraryItemPostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(version)"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns commonly used information about the live versions of a virtual machine template library item.
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(templateLibraryItem: String, completion: @escaping ((_ data: [VcenterVmTemplateLibraryItemsVersionsSummary]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(templateLibraryItem: templateLibraryItem).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns commonly used information about the live versions of a virtual machine template library item.
     - GET /api/vcenter/vm-template/library-items/{template_library_item}/versions
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 

     - returns: RequestBuilder<[VcenterVmTemplateLibraryItemsVersionsSummary]> 
     */
    open class func listWithRequestBuilder(templateLibraryItem: String) -> RequestBuilder<[VcenterVmTemplateLibraryItemsVersionsSummary]> {
        var path = "/api/vcenter/vm-template/library-items/{template_library_item}/versions"
        let templateLibraryItemPreEscape = "\(templateLibraryItem)"
        let templateLibraryItemPostEscape = templateLibraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_library_item}", with: templateLibraryItemPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[VcenterVmTemplateLibraryItemsVersionsSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns commonly used information about the live versions of a virtual machine template library item.
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list_0(templateLibraryItem: String, completion: @escaping ((_ data: VcenterVmTemplateLibraryItemsVersionsListResp?,_ error: Error?) -> Void)) {
        list_0WithRequestBuilder(templateLibraryItem: templateLibraryItem).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns commonly used information about the live versions of a virtual machine template library item.
     - GET /rest/vcenter/vm-template/library-items/{template_library_item}/versions
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 

     - returns: RequestBuilder<VcenterVmTemplateLibraryItemsVersionsListResp> 
     */
    open class func list_0WithRequestBuilder(templateLibraryItem: String) -> RequestBuilder<VcenterVmTemplateLibraryItemsVersionsListResp> {
        var path = "/rest/vcenter/vm-template/library-items/{template_library_item}/versions"
        let templateLibraryItemPreEscape = "\(templateLibraryItem)"
        let templateLibraryItemPostEscape = templateLibraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_library_item}", with: templateLibraryItemPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterVmTemplateLibraryItemsVersionsListResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Rollbacks a library item containing a virtual machine template to a previous version. The virtual machine template at the specified version becomes the latest virtual machine template with a new version identifier.
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter version: (path) Version of the library item to rollback. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rollback(templateLibraryItem: String, version: String, requestBody: VcenterVmTemplateLibraryItemsVersionsRollback? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        rollbackWithRequestBuilder(templateLibraryItem: templateLibraryItem, version: version, requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Rollbacks a library item containing a virtual machine template to a previous version. The virtual machine template at the specified version becomes the latest virtual machine template with a new version identifier.
     - POST /api/vcenter/vm-template/library-items/{template_library_item}/versions/{version}?action=rollback
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter version: (path) Version of the library item to rollback. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func rollbackWithRequestBuilder(templateLibraryItem: String, version: String, requestBody: VcenterVmTemplateLibraryItemsVersionsRollback? = nil) -> RequestBuilder<String> {
        var path = "/api/vcenter/vm-template/library-items/{template_library_item}/versions/{version}?action=rollback"
        let templateLibraryItemPreEscape = "\(templateLibraryItem)"
        let templateLibraryItemPostEscape = templateLibraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_library_item}", with: templateLibraryItemPostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(version)"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Rollbacks a library item containing a virtual machine template to a previous version. The virtual machine template at the specified version becomes the latest virtual machine template with a new version identifier.
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter version: (path) Version of the library item to rollback. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rollback_0(templateLibraryItem: String, version: String, requestBody: VcenterVmTemplateLibraryItemsVersionsRollback? = nil, completion: @escaping ((_ data: VcenterVmTemplateLibraryItemsVersionsRollbackResp?,_ error: Error?) -> Void)) {
        rollback_0WithRequestBuilder(templateLibraryItem: templateLibraryItem, version: version, requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Rollbacks a library item containing a virtual machine template to a previous version. The virtual machine template at the specified version becomes the latest virtual machine template with a new version identifier.
     - POST /rest/vcenter/vm-template/library-items/{template_library_item}/versions/{version}?action=rollback
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter version: (path) Version of the library item to rollback. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<VcenterVmTemplateLibraryItemsVersionsRollbackResp> 
     */
    open class func rollback_0WithRequestBuilder(templateLibraryItem: String, version: String, requestBody: VcenterVmTemplateLibraryItemsVersionsRollback? = nil) -> RequestBuilder<VcenterVmTemplateLibraryItemsVersionsRollbackResp> {
        var path = "/rest/vcenter/vm-template/library-items/{template_library_item}/versions/{version}?action=rollback"
        let templateLibraryItemPreEscape = "\(templateLibraryItem)"
        let templateLibraryItemPostEscape = templateLibraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_library_item}", with: templateLibraryItemPostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(version)"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterVmTemplateLibraryItemsVersionsRollbackResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
