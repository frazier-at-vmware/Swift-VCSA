//
// TrustedInfrastructuretrustAuthorityClustersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class TrustedInfrastructuretrustAuthorityClustersAPI {
    /**
     Get the result of the last Update operation which matches the cluster id. if you do not have all of the privileges described as follows:     -  Operation execution requires TrustedAdmin.ReadTrustedHosts.    -  The resource ClusterComputeResource referenced by the parameter cluster requires System.View.  
     
     - parameter cluster: (path) Cluster id. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(cluster: String, completion: @escaping ((_ data: VcenterTrustedInfrastructureTrustAuthorityClustersInfo?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(cluster: cluster).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the result of the last Update operation which matches the cluster id. if you do not have all of the privileges described as follows:     -  Operation execution requires TrustedAdmin.ReadTrustedHosts.    -  The resource ClusterComputeResource referenced by the parameter cluster requires System.View.  
     - GET /api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter cluster: (path) Cluster id. The parameter must be an identifier for the resource type: ClusterComputeResource. 

     - returns: RequestBuilder<VcenterTrustedInfrastructureTrustAuthorityClustersInfo> 
     */
    open class func callGetWithRequestBuilder(cluster: String) -> RequestBuilder<VcenterTrustedInfrastructureTrustAuthorityClustersInfo> {
        var path = "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterTrustedInfrastructureTrustAuthorityClustersInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter state
     */
    public enum State_list: String { 
        case enable = "ENABLE"
        case disable = "DISABLE"
    }

    /**
     Returns a list of clusters for this vCenter instance which matches the TrustAuthorityClusters.FilterSpec. if you do not have all of the privileges described as follows:     -  Operation execution requires TrustedAdmin.ReadTrustedHosts.    -  The resource ClusterComputeResource referenced by the attribute TrustAuthorityClusters.FilterSpec.cluster requires System.View.  
     
     - parameter cluster: (query) Identifies the cluster. cluster If {@term.unset} return all Trust Authority Clusters. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource. (optional)
     - parameter state: (query) The state of the TrustAuthorityClusters. state If {@term.unset} return all Trust Authority Clusters. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(cluster: [String]? = nil, state: [String]? = nil, completion: @escaping ((_ data: [VcenterTrustedInfrastructureTrustAuthorityClustersSummary]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(cluster: cluster, state: state).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns a list of clusters for this vCenter instance which matches the TrustAuthorityClusters.FilterSpec. if you do not have all of the privileges described as follows:     -  Operation execution requires TrustedAdmin.ReadTrustedHosts.    -  The resource ClusterComputeResource referenced by the attribute TrustAuthorityClusters.FilterSpec.cluster requires System.View.  
     - GET /api/vcenter/trusted-infrastructure/trust-authority-clusters
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]
     
     - parameter cluster: (query) Identifies the cluster. cluster If {@term.unset} return all Trust Authority Clusters. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource. (optional)
     - parameter state: (query) The state of the TrustAuthorityClusters. state If {@term.unset} return all Trust Authority Clusters. (optional)

     - returns: RequestBuilder<[VcenterTrustedInfrastructureTrustAuthorityClustersSummary]> 
     */
    open class func listWithRequestBuilder(cluster: [String]? = nil, state: [String]? = nil) -> RequestBuilder<[VcenterTrustedInfrastructureTrustAuthorityClustersSummary]> {
        let path = "/api/vcenter/trusted-infrastructure/trust-authority-clusters"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "cluster": cluster, 
            "state": state
        ])

        let requestBuilder: RequestBuilder<[VcenterTrustedInfrastructureTrustAuthorityClustersSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Updates the state of a cluster.
     
     - parameter cluster: (path) Cluster id. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updatetask(cluster: String, requestBody: VcenterTrustedInfrastructureTrustAuthorityClustersUpdateTask? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        updatetaskWithRequestBuilder(cluster: cluster, requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Updates the state of a cluster.
     - PATCH /api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}?vmw-task=true
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter cluster: (path) Cluster id. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func updatetaskWithRequestBuilder(cluster: String, requestBody: VcenterTrustedInfrastructureTrustAuthorityClustersUpdateTask? = nil) -> RequestBuilder<String> {
        var path = "/api/vcenter/trusted-infrastructure/trust-authority-clusters/{cluster}?vmw-task=true"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
