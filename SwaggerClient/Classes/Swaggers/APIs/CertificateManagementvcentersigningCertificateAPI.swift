//
// CertificateManagementvcentersigningCertificateAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CertificateManagementvcentersigningCertificateAPI {
    /**
     Retrieve the signing certificate chains for validating vCenter-issued tokens. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(completion: @escaping ((_ data: VcenterCertificateManagementVcenterSigningCertificateInfo?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve the signing certificate chains for validating vCenter-issued tokens. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     - GET /api/vcenter/certificate-management/vcenter/signing-certificate
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]

     - returns: RequestBuilder<VcenterCertificateManagementVcenterSigningCertificateInfo> 
     */
    open class func callGetWithRequestBuilder() -> RequestBuilder<VcenterCertificateManagementVcenterSigningCertificateInfo> {
        let path = "/api/vcenter/certificate-management/vcenter/signing-certificate"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterCertificateManagementVcenterSigningCertificateInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set the active signing certificate for vCenter. The certificate will immediately be used to sign tokens issued by vCenter token service. if you do not have all of the privileges described as follows:     -  Operation execution requires CertificateManagement.Administer.  
     
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callSet(requestBody: VcenterCertificateManagementVcenterSigningCertificateSet? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        callSetWithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Set the active signing certificate for vCenter. The certificate will immediately be used to sign tokens issued by vCenter token service. if you do not have all of the privileges described as follows:     -  Operation execution requires CertificateManagement.Administer.  
     - PUT /api/vcenter/certificate-management/vcenter/signing-certificate
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func callSetWithRequestBuilder(requestBody: VcenterCertificateManagementVcenterSigningCertificateSet? = nil) -> RequestBuilder<Void> {
        let path = "/api/vcenter/certificate-management/vcenter/signing-certificate"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Refresh the vCenter signing certificate chain. The new signing certificate will be issued in accordance with vCenter CA policy and set as the active signing certificate for the vCenter token service. The certificate will immediately be used to sign tokens issued by vCenter token service. If a third-party/custom certificate has been configured as the signing certificate for compliance reasons, refresh may take vCenter out of compliance. if you do not have all of the privileges described as follows:     -  Operation execution requires CertificateManagement.Administer.  
     
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func refresh(requestBody: VcenterCertificateManagementVcenterSigningCertificateRefresh? = nil, completion: @escaping ((_ data: VcenterCertificateManagementX509CertChain?,_ error: Error?) -> Void)) {
        refreshWithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Refresh the vCenter signing certificate chain. The new signing certificate will be issued in accordance with vCenter CA policy and set as the active signing certificate for the vCenter token service. The certificate will immediately be used to sign tokens issued by vCenter token service. If a third-party/custom certificate has been configured as the signing certificate for compliance reasons, refresh may take vCenter out of compliance. if you do not have all of the privileges described as follows:     -  Operation execution requires CertificateManagement.Administer.  
     - POST /api/vcenter/certificate-management/vcenter/signing-certificate?action=refresh
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<VcenterCertificateManagementX509CertChain> 
     */
    open class func refreshWithRequestBuilder(requestBody: VcenterCertificateManagementVcenterSigningCertificateRefresh? = nil) -> RequestBuilder<VcenterCertificateManagementX509CertChain> {
        let path = "/api/vcenter/certificate-management/vcenter/signing-certificate?action=refresh"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterCertificateManagementX509CertChain>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
