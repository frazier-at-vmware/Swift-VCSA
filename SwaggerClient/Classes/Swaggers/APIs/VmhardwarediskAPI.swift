//
// VmhardwarediskAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class VmhardwarediskAPI {
    /**
     Returns information about a virtual disk.
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter disk: (path) Virtual disk identifier. The parameter must be an identifier for the resource type: vcenter.vm.hardware.Disk. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(vm: String, disk: String, completion: @escaping ((_ data: VcenterVmHardwareDiskInfo?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(vm: vm, disk: disk).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about a virtual disk.
     - GET /api/vcenter/vm/{vm}/hardware/disk/{disk}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter disk: (path) Virtual disk identifier. The parameter must be an identifier for the resource type: vcenter.vm.hardware.Disk. 

     - returns: RequestBuilder<VcenterVmHardwareDiskInfo> 
     */
    open class func callGetWithRequestBuilder(vm: String, disk: String) -> RequestBuilder<VcenterVmHardwareDiskInfo> {
        var path = "/api/vcenter/vm/{vm}/hardware/disk/{disk}"
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let diskPreEscape = "\(disk)"
        let diskPostEscape = diskPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{disk}", with: diskPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterVmHardwareDiskInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns information about a virtual disk.
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter disk: (path) Virtual disk identifier. The parameter must be an identifier for the resource type: vcenter.vm.hardware.Disk. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet_0(vm: String, disk: String, completion: @escaping ((_ data: VcenterVmHardwareDiskResp?,_ error: Error?) -> Void)) {
        callGet_0WithRequestBuilder(vm: vm, disk: disk).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about a virtual disk.
     - GET /rest/vcenter/vm/{vm}/hardware/disk/{disk}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter disk: (path) Virtual disk identifier. The parameter must be an identifier for the resource type: vcenter.vm.hardware.Disk. 

     - returns: RequestBuilder<VcenterVmHardwareDiskResp> 
     */
    open class func callGet_0WithRequestBuilder(vm: String, disk: String) -> RequestBuilder<VcenterVmHardwareDiskResp> {
        var path = "/rest/vcenter/vm/{vm}/hardware/disk/{disk}"
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let diskPreEscape = "\(disk)"
        let diskPostEscape = diskPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{disk}", with: diskPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterVmHardwareDiskResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Adds a virtual disk to the virtual machine. While adding the virtual disk, a new VMDK file may be created or an existing VMDK file may be used to back the virtual disk.
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(vm: String, requestBody: VcenterVmHardwareDiskCreate? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(vm: vm, requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds a virtual disk to the virtual machine. While adding the virtual disk, a new VMDK file may be created or an existing VMDK file may be used to back the virtual disk.
     - POST /api/vcenter/vm/{vm}/hardware/disk
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func createWithRequestBuilder(vm: String, requestBody: VcenterVmHardwareDiskCreate? = nil) -> RequestBuilder<String> {
        var path = "/api/vcenter/vm/{vm}/hardware/disk"
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Adds a virtual disk to the virtual machine. While adding the virtual disk, a new VMDK file may be created or an existing VMDK file may be used to back the virtual disk.
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create_0(vm: String, requestBody: VcenterVmHardwareDiskCreate, completion: @escaping ((_ data: VcenterVmHardwareDiskCreateResp?,_ error: Error?) -> Void)) {
        create_0WithRequestBuilder(vm: vm, requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds a virtual disk to the virtual machine. While adding the virtual disk, a new VMDK file may be created or an existing VMDK file may be used to back the virtual disk.
     - POST /rest/vcenter/vm/{vm}/hardware/disk
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter requestBody: (body)  

     - returns: RequestBuilder<VcenterVmHardwareDiskCreateResp> 
     */
    open class func create_0WithRequestBuilder(vm: String, requestBody: VcenterVmHardwareDiskCreate) -> RequestBuilder<VcenterVmHardwareDiskCreateResp> {
        var path = "/rest/vcenter/vm/{vm}/hardware/disk"
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterVmHardwareDiskCreateResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Removes a virtual disk from the virtual machine. This operation does not destroy the VMDK file that backs the virtual disk. It only detaches the VMDK file from the virtual machine. Once detached, the VMDK file will not be destroyed when the virtual machine to which it was associated is deleted.
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter disk: (path) Virtual disk identifier. The parameter must be an identifier for the resource type: vcenter.vm.hardware.Disk. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(vm: String, disk: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(vm: vm, disk: disk).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Removes a virtual disk from the virtual machine. This operation does not destroy the VMDK file that backs the virtual disk. It only detaches the VMDK file from the virtual machine. Once detached, the VMDK file will not be destroyed when the virtual machine to which it was associated is deleted.
     - DELETE /api/vcenter/vm/{vm}/hardware/disk/{disk}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter disk: (path) Virtual disk identifier. The parameter must be an identifier for the resource type: vcenter.vm.hardware.Disk. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(vm: String, disk: String) -> RequestBuilder<Void> {
        var path = "/api/vcenter/vm/{vm}/hardware/disk/{disk}"
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let diskPreEscape = "\(disk)"
        let diskPostEscape = diskPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{disk}", with: diskPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Removes a virtual disk from the virtual machine. This operation does not destroy the VMDK file that backs the virtual disk. It only detaches the VMDK file from the virtual machine. Once detached, the VMDK file will not be destroyed when the virtual machine to which it was associated is deleted.
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter disk: (path) Virtual disk identifier. The parameter must be an identifier for the resource type: vcenter.vm.hardware.Disk. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete_0(vm: String, disk: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        delete_0WithRequestBuilder(vm: vm, disk: disk).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Removes a virtual disk from the virtual machine. This operation does not destroy the VMDK file that backs the virtual disk. It only detaches the VMDK file from the virtual machine. Once detached, the VMDK file will not be destroyed when the virtual machine to which it was associated is deleted.
     - DELETE /rest/vcenter/vm/{vm}/hardware/disk/{disk}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter disk: (path) Virtual disk identifier. The parameter must be an identifier for the resource type: vcenter.vm.hardware.Disk. 

     - returns: RequestBuilder<Void> 
     */
    open class func delete_0WithRequestBuilder(vm: String, disk: String) -> RequestBuilder<Void> {
        var path = "/rest/vcenter/vm/{vm}/hardware/disk/{disk}"
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let diskPreEscape = "\(disk)"
        let diskPostEscape = diskPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{disk}", with: diskPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns commonly used information about the virtual disks belonging to the virtual machine.
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(vm: String, completion: @escaping ((_ data: [VcenterVmHardwareDiskSummary]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(vm: vm).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns commonly used information about the virtual disks belonging to the virtual machine.
     - GET /api/vcenter/vm/{vm}/hardware/disk
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 

     - returns: RequestBuilder<[VcenterVmHardwareDiskSummary]> 
     */
    open class func listWithRequestBuilder(vm: String) -> RequestBuilder<[VcenterVmHardwareDiskSummary]> {
        var path = "/api/vcenter/vm/{vm}/hardware/disk"
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[VcenterVmHardwareDiskSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns commonly used information about the virtual disks belonging to the virtual machine.
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list_0(vm: String, completion: @escaping ((_ data: VcenterVmHardwareDiskListResp?,_ error: Error?) -> Void)) {
        list_0WithRequestBuilder(vm: vm).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns commonly used information about the virtual disks belonging to the virtual machine.
     - GET /rest/vcenter/vm/{vm}/hardware/disk
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 

     - returns: RequestBuilder<VcenterVmHardwareDiskListResp> 
     */
    open class func list_0WithRequestBuilder(vm: String) -> RequestBuilder<VcenterVmHardwareDiskListResp> {
        var path = "/rest/vcenter/vm/{vm}/hardware/disk"
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterVmHardwareDiskListResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Updates the configuration of a virtual disk. An update operation can be used to detach the existing VMDK file and attach another VMDK file to the virtual machine.
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter disk: (path) Virtual disk identifier. The parameter must be an identifier for the resource type: vcenter.vm.hardware.Disk. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(vm: String, disk: String, requestBody: VcenterVmHardwareDiskUpdate? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(vm: vm, disk: disk, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates the configuration of a virtual disk. An update operation can be used to detach the existing VMDK file and attach another VMDK file to the virtual machine.
     - PATCH /api/vcenter/vm/{vm}/hardware/disk/{disk}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter disk: (path) Virtual disk identifier. The parameter must be an identifier for the resource type: vcenter.vm.hardware.Disk. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateWithRequestBuilder(vm: String, disk: String, requestBody: VcenterVmHardwareDiskUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/api/vcenter/vm/{vm}/hardware/disk/{disk}"
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let diskPreEscape = "\(disk)"
        let diskPostEscape = diskPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{disk}", with: diskPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Updates the configuration of a virtual disk. An update operation can be used to detach the existing VMDK file and attach another VMDK file to the virtual machine.
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter disk: (path) Virtual disk identifier. The parameter must be an identifier for the resource type: vcenter.vm.hardware.Disk. 
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update_0(vm: String, disk: String, requestBody: VcenterVmHardwareDiskUpdate, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        update_0WithRequestBuilder(vm: vm, disk: disk, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates the configuration of a virtual disk. An update operation can be used to detach the existing VMDK file and attach another VMDK file to the virtual machine.
     - PATCH /rest/vcenter/vm/{vm}/hardware/disk/{disk}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter vm: (path) Virtual machine identifier. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter disk: (path) Virtual disk identifier. The parameter must be an identifier for the resource type: vcenter.vm.hardware.Disk. 
     - parameter requestBody: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func update_0WithRequestBuilder(vm: String, disk: String, requestBody: VcenterVmHardwareDiskUpdate) -> RequestBuilder<Void> {
        var path = "/rest/vcenter/vm/{vm}/hardware/disk/{disk}"
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let diskPreEscape = "\(disk)"
        let diskPostEscape = diskPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{disk}", with: diskPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
