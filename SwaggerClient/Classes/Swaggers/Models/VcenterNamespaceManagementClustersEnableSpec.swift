//
// VcenterNamespaceManagementClustersEnableSpec.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct VcenterNamespaceManagementClustersEnableSpec: Codable {

    /** This affects the size and resources allocated to the Kubernetes API server. It also affects the suggested default serviceCidr and podCidrs. */
    public var sizeHint: VcenterNamespaceManagementSizingHint
    /** CIDR block from which Kubernetes allocates service cluster IP addresses. This range should not overlap with those in Clusters.NCPClusterNetworkEnableSpec.pod-cidrs, Clusters.NCPClusterNetworkEnableSpec.ingress-cidrs, Clusters.NCPClusterNetworkEnableSpec.egress-cidrs, or other services running in the datacenter. */
    public var serviceCidr: VcenterNamespaceManagementIpv4Cidr
    /** The provider of cluster networking for this vSphere Namespaces cluster. */
    public var networkProvider: VcenterNamespaceManagementClustersNetworkProvider
    /** Specification for the NSX Container Plugin cluster network. This field is optional and it is only relevant when the value of Clusters.EnableSpec.network-provider is NSXT_CONTAINER_PLUGIN. */
    public var ncpClusterNetworkSpec: VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec?
    /** Specification for the workload networks to be associated with the cluster. This field is optional and it is only relevant when the value of Clusters.EnableSpec.network-provider is VSPHERE_NETWORK. */
    public var workloadNetworksSpec: VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec?
    /** List of NTP server DNS names or IP addresses to use for workloads such as Tanzu Kubernetes Grid VMs, specified in order of preference. If unset, NTP server for Kubernetes API servers will be used. */
    public var workloadNtpServers: [String]?
    /** The load balancer configuration is derived from the user-provisioned load balancer that will be used to operate a load balancer that fronts vSphere Namespaces cluster servers, Tanzu Kubernetes Grid API servers, and other servers upon request. This configuration is required for network providers that do not have a default load balancer included. This field is optional and it is only relevant when the value of Clusters.EnableSpec.network-provider is VSPHERE_NETWORK. */
    public var loadBalancerConfigSpec: VcenterNamespaceManagementLoadBalancersConfigSpec?
    /** Specification for the management network on Kubernetes API server. Clusters.NetworkSpec.mode must be STATICRANGE as we require Kubernetes API server to have a stable address. */
    public var masterManagementNetwork: VcenterNamespaceManagementClustersNetworkSpec
    /** List of DNS server IP addresses to use on Kubernetes API server, specified in order of preference. If unset, no default DNS servers are set. */
    public var masterDNS: [String]?
    /** List of DNS server IP addresses to use on the worker nodes, specified in order of preference. If unset, no default DNS servers are set. */
    public var workerDNS: [String]?
    /** List of domains (for example \&quot;vmware.com\&quot;) to be searched when trying to lookup a host name on Kubernetes API server, specified in order of preference. If unset, no default DNS search domains are set. */
    public var masterDNSSearchDomains: [String]?
    /** List of NTP server DNS names or IP addresses to use on Kubernetes API server, specified in order of preference. If unset, VMware Tools based time synchronization is enabled. */
    public var masterNTPServers: [String]?
    /** Identifier of storage policy associated with Kubernetes API server. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: SpsStorageProfile. When operations return a value of this structure as a result, the field will be an identifier for the resource type: SpsStorageProfile. */
    public var masterStoragePolicy: String
    /** Identifier of storage policy associated with ephemeral disks of all the Kubernetes Pods in the cluster. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: SpsStorageProfile. When operations return a value of this structure as a result, the field will be an identifier for the resource type: SpsStorageProfile. */
    public var ephemeralStoragePolicy: String
    /** Specification for configuring Cloud Native Storage file volume support on Supervisor. This feature provides support for provisioning ReadWriteMany persistent volumes on this cluster and/or external clusters. If unset, file volume support will not be enabled on this Supervisor. */
    public var cnsFileConfig: VcenterNamespaceManagementCNSFileConfig?
    /** Disclaimer to be displayed prior to login via the Kubectl plugin. If unset, just skip it. */
    public var loginBanner: String?
    /** List of additional DNS names to associate with the Kubernetes API server. These DNS names are embedded in the TLS certificate presented by the API server. If unset, no additional DNS names are embedded in the TLS certificate. */
    public var masterDNSNames: [String]?
    /** Specification for storage to be used for container images. */
    public var imageStorage: VcenterNamespaceManagementClustersImageStorageSpec
    /** Default image registry to use when Kubernetes Pod container specification does not specify it as part of the container image name. If unset, defaults to Docker Hub. */
    public var defaultImageRegistry: VcenterNamespaceManagementClustersImageRegistry?
    /** Default image repository to use when Kubernetes Pod container specification does not specify it as part of the container image name. If unset, defaults to Docker Hub official repository in case of Docker Hub image registry, otherwise defaults to empty string. */
    public var defaultImageRepository: String?
    /** Identifier of the Content Library which holds the VM Images for vSphere Kubernetes Service. This Content Library should be subscribed to VMware&#39;s hosted vSphere Kubernetes Service Repository. If unset, the Content Library will be automatically generated and configured to the cluster. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: content.Library. When operations return a value of this structure as a result, the field will be an identifier for the resource type: content.Library. */
    public var defaultKubernetesServiceContentLibrary: String?
    /** Proxy configuration that will be applied to the Supervisor. The proxy should be reachable from the management network and will be used for image pulling and container traffic exiting out of the Supervisor. If unset the settings will be inherited from the vCenter settings if available. */
    public var clusterProxyConfig: VcenterNamespaceManagementProxyConfiguration?

    public init(sizeHint: VcenterNamespaceManagementSizingHint, serviceCidr: VcenterNamespaceManagementIpv4Cidr, networkProvider: VcenterNamespaceManagementClustersNetworkProvider, ncpClusterNetworkSpec: VcenterNamespaceManagementClustersNCPClusterNetworkEnableSpec?, workloadNetworksSpec: VcenterNamespaceManagementClustersWorkloadNetworksEnableSpec?, workloadNtpServers: [String]?, loadBalancerConfigSpec: VcenterNamespaceManagementLoadBalancersConfigSpec?, masterManagementNetwork: VcenterNamespaceManagementClustersNetworkSpec, masterDNS: [String]?, workerDNS: [String]?, masterDNSSearchDomains: [String]?, masterNTPServers: [String]?, masterStoragePolicy: String, ephemeralStoragePolicy: String, cnsFileConfig: VcenterNamespaceManagementCNSFileConfig?, loginBanner: String?, masterDNSNames: [String]?, imageStorage: VcenterNamespaceManagementClustersImageStorageSpec, defaultImageRegistry: VcenterNamespaceManagementClustersImageRegistry?, defaultImageRepository: String?, defaultKubernetesServiceContentLibrary: String?, clusterProxyConfig: VcenterNamespaceManagementProxyConfiguration?) {
        self.sizeHint = sizeHint
        self.serviceCidr = serviceCidr
        self.networkProvider = networkProvider
        self.ncpClusterNetworkSpec = ncpClusterNetworkSpec
        self.workloadNetworksSpec = workloadNetworksSpec
        self.workloadNtpServers = workloadNtpServers
        self.loadBalancerConfigSpec = loadBalancerConfigSpec
        self.masterManagementNetwork = masterManagementNetwork
        self.masterDNS = masterDNS
        self.workerDNS = workerDNS
        self.masterDNSSearchDomains = masterDNSSearchDomains
        self.masterNTPServers = masterNTPServers
        self.masterStoragePolicy = masterStoragePolicy
        self.ephemeralStoragePolicy = ephemeralStoragePolicy
        self.cnsFileConfig = cnsFileConfig
        self.loginBanner = loginBanner
        self.masterDNSNames = masterDNSNames
        self.imageStorage = imageStorage
        self.defaultImageRegistry = defaultImageRegistry
        self.defaultImageRepository = defaultImageRepository
        self.defaultKubernetesServiceContentLibrary = defaultKubernetesServiceContentLibrary
        self.clusterProxyConfig = clusterProxyConfig
    }

    public enum CodingKeys: String, CodingKey { 
        case sizeHint = "size_hint"
        case serviceCidr = "service_cidr"
        case networkProvider = "network_provider"
        case ncpClusterNetworkSpec = "ncp_cluster_network_spec"
        case workloadNetworksSpec = "workload_networks_spec"
        case workloadNtpServers = "workload_ntp_servers"
        case loadBalancerConfigSpec = "load_balancer_config_spec"
        case masterManagementNetwork = "master_management_network"
        case masterDNS = "master_DNS"
        case workerDNS = "worker_DNS"
        case masterDNSSearchDomains = "master_DNS_search_domains"
        case masterNTPServers = "master_NTP_servers"
        case masterStoragePolicy = "master_storage_policy"
        case ephemeralStoragePolicy = "ephemeral_storage_policy"
        case cnsFileConfig = "cns_file_config"
        case loginBanner = "login_banner"
        case masterDNSNames = "Master_DNS_names"
        case imageStorage = "image_storage"
        case defaultImageRegistry = "default_image_registry"
        case defaultImageRepository = "default_image_repository"
        case defaultKubernetesServiceContentLibrary = "default_kubernetes_service_content_library"
        case clusterProxyConfig = "cluster_proxy_config"
    }


}

