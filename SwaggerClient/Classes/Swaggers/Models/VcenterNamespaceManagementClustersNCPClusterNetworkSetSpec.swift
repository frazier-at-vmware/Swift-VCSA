//
// VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct VcenterNamespaceManagementClustersNCPClusterNetworkSetSpec: Codable {

    /** CIDR blocks from which Kubernetes allocates pod IP addresses. This range should not overlap with those in Clusters.EnableSpec.service-cidr, Clusters.NCPClusterNetworkSetSpec.ingress-cidrs, Clusters.NCPClusterNetworkSetSpec.egress-cidrs, or other services running in the datacenter. A set operation only allows for addition of new CIDR blocks to the existing list. All Pod CIDR blocks must be of at least subnet size /23. */
    public var podCidrs: [VcenterNamespaceManagementIpv4Cidr]
    /** CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer. These ranges should not overlap with those in Clusters.NCPClusterNetworkSetSpec.pod-cidrs, Clusters.EnableSpec.service-cidr, Clusters.NCPClusterNetworkSetSpec.egress-cidrs, or other services running in the datacenter. A set operation only allows for addition of new CIDR blocks to the existing list. */
    public var ingressCidrs: [VcenterNamespaceManagementIpv4Cidr]
    /** CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs. These ranges should not overlap with those in Clusters.NCPClusterNetworkSetSpec.pod-cidrs, Clusters.EnableSpec.service-cidr, Clusters.NCPClusterNetworkSetSpec.ingress-cidrs, or other services running in the datacenter. A set operation only allows for addition of new CIDR blocks to the existing list. */
    public var egressCidrs: [VcenterNamespaceManagementIpv4Cidr]
    /** PEM-encoded x509 certificate used by NSX as a default fallback certificate for Kubernetes Ingress services. */
    public var defaultIngressTlsCertificate: String

    public init(podCidrs: [VcenterNamespaceManagementIpv4Cidr], ingressCidrs: [VcenterNamespaceManagementIpv4Cidr], egressCidrs: [VcenterNamespaceManagementIpv4Cidr], defaultIngressTlsCertificate: String) {
        self.podCidrs = podCidrs
        self.ingressCidrs = ingressCidrs
        self.egressCidrs = egressCidrs
        self.defaultIngressTlsCertificate = defaultIngressTlsCertificate
    }

    public enum CodingKeys: String, CodingKey { 
        case podCidrs = "pod_cidrs"
        case ingressCidrs = "ingress_cidrs"
        case egressCidrs = "egress_cidrs"
        case defaultIngressTlsCertificate = "default_ingress_tls_certificate"
    }


}

