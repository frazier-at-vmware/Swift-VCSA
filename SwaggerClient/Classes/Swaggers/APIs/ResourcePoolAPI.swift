//
// ResourcePoolAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ResourcePoolAPI {
    /**
     Retrieves information about the resource pool indicated by resourcePool. if you do not have all of the privileges described as follows:     -  The resource ResourcePool referenced by the parameter resourcePool requires System.Read.  
     
     - parameter resourcePool: (path) Identifier of the resource pool for which information should be retrieved. The parameter must be an identifier for the resource type: ResourcePool. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(resourcePool: String, completion: @escaping ((_ data: VcenterResourcePoolInfo?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(resourcePool: resourcePool).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves information about the resource pool indicated by resourcePool. if you do not have all of the privileges described as follows:     -  The resource ResourcePool referenced by the parameter resourcePool requires System.Read.  
     - GET /api/vcenter/resource-pool/{resource_pool}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter resourcePool: (path) Identifier of the resource pool for which information should be retrieved. The parameter must be an identifier for the resource type: ResourcePool. 

     - returns: RequestBuilder<VcenterResourcePoolInfo> 
     */
    open class func callGetWithRequestBuilder(resourcePool: String) -> RequestBuilder<VcenterResourcePoolInfo> {
        var path = "/api/vcenter/resource-pool/{resource_pool}"
        let resourcePoolPreEscape = "\(resourcePool)"
        let resourcePoolPostEscape = resourcePoolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resource_pool}", with: resourcePoolPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterResourcePoolInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves information about the resource pool indicated by resourcePool. if you do not have all of the privileges described as follows:     -  The resource ResourcePool referenced by the parameter resourcePool requires System.Read.  
     
     - parameter resourcePool: (path) Identifier of the resource pool for which information should be retrieved. The parameter must be an identifier for the resource type: ResourcePool. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet_0(resourcePool: String, completion: @escaping ((_ data: VcenterResourcePoolResp?,_ error: Error?) -> Void)) {
        callGet_0WithRequestBuilder(resourcePool: resourcePool).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves information about the resource pool indicated by resourcePool. if you do not have all of the privileges described as follows:     -  The resource ResourcePool referenced by the parameter resourcePool requires System.Read.  
     - GET /rest/vcenter/resource-pool/{resource_pool}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter resourcePool: (path) Identifier of the resource pool for which information should be retrieved. The parameter must be an identifier for the resource type: ResourcePool. 

     - returns: RequestBuilder<VcenterResourcePoolResp> 
     */
    open class func callGet_0WithRequestBuilder(resourcePool: String) -> RequestBuilder<VcenterResourcePoolResp> {
        var path = "/rest/vcenter/resource-pool/{resource_pool}"
        let resourcePoolPreEscape = "\(resourcePool)"
        let resourcePoolPostEscape = resourcePoolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resource_pool}", with: resourcePoolPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterResourcePoolResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Creates a resource pool. if you do not have all of the privileges described as follows:     -  The resource ResourcePool referenced by the attribute ResourcePool.CreateSpec.parent requires Resource.CreatePool.  
     
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(requestBody: VcenterResourcePoolCreate? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates a resource pool. if you do not have all of the privileges described as follows:     -  The resource ResourcePool referenced by the attribute ResourcePool.CreateSpec.parent requires Resource.CreatePool.  
     - POST /api/vcenter/resource-pool
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func createWithRequestBuilder(requestBody: VcenterResourcePoolCreate? = nil) -> RequestBuilder<String> {
        let path = "/api/vcenter/resource-pool"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Creates a resource pool. if you do not have all of the privileges described as follows:     -  The resource ResourcePool referenced by the attribute ResourcePool.CreateSpec.parent requires Resource.CreatePool.  
     
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create_0(requestBody: VcenterResourcePoolCreate, completion: @escaping ((_ data: VcenterResourcePoolCreateResp?,_ error: Error?) -> Void)) {
        create_0WithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates a resource pool. if you do not have all of the privileges described as follows:     -  The resource ResourcePool referenced by the attribute ResourcePool.CreateSpec.parent requires Resource.CreatePool.  
     - POST /rest/vcenter/resource-pool
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter requestBody: (body)  

     - returns: RequestBuilder<VcenterResourcePoolCreateResp> 
     */
    open class func create_0WithRequestBuilder(requestBody: VcenterResourcePoolCreate) -> RequestBuilder<VcenterResourcePoolCreateResp> {
        let path = "/rest/vcenter/resource-pool"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterResourcePoolCreateResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Deletes a resource pool.
     
     - parameter resourcePool: (path) Identifier of the resource pool to be deleted. The parameter must be an identifier for the resource type: ResourcePool. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(resourcePool: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(resourcePool: resourcePool).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Deletes a resource pool.
     - DELETE /api/vcenter/resource-pool/{resource_pool}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter resourcePool: (path) Identifier of the resource pool to be deleted. The parameter must be an identifier for the resource type: ResourcePool. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(resourcePool: String) -> RequestBuilder<Void> {
        var path = "/api/vcenter/resource-pool/{resource_pool}"
        let resourcePoolPreEscape = "\(resourcePool)"
        let resourcePoolPostEscape = resourcePoolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resource_pool}", with: resourcePoolPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Deletes a resource pool.
     
     - parameter resourcePool: (path) Identifier of the resource pool to be deleted. The parameter must be an identifier for the resource type: ResourcePool. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete_0(resourcePool: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        delete_0WithRequestBuilder(resourcePool: resourcePool).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Deletes a resource pool.
     - DELETE /rest/vcenter/resource-pool/{resource_pool}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter resourcePool: (path) Identifier of the resource pool to be deleted. The parameter must be an identifier for the resource type: ResourcePool. 

     - returns: RequestBuilder<Void> 
     */
    open class func delete_0WithRequestBuilder(resourcePool: String) -> RequestBuilder<Void> {
        var path = "/rest/vcenter/resource-pool/{resource_pool}"
        let resourcePoolPreEscape = "\(resourcePool)"
        let resourcePoolPostEscape = resourcePoolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resource_pool}", with: resourcePoolPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns information about at most 1000 visible (subject to permission checks) resource pools in vCenter matching the ResourcePool.FilterSpec.
     
     - parameter resourcePools: (query) Identifiers of resource pools that can match the filter. If unset or empty, resource pools with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool. (optional)
     - parameter names: (query) Names that resource pools must have to match the filter (see ResourcePool.Info.name). If unset or empty, resource pools with any name match the filter. (optional)
     - parameter parentResourcePools: (query) Resource pools that must contain the resource pool for the resource pool to match the filter. If unset or empty, resource pools in any resource pool match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool. (optional)
     - parameter datacenters: (query) Datacenters that must contain the resource pool for the resource pool to match the filter. If unset or empty, resource pools in any datacenter match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter. (optional)
     - parameter hosts: (query) Hosts that must contain the resource pool for the resource pool to match the filter. If unset or empty, resource pools in any host match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem. (optional)
     - parameter clusters: (query) Clusters that must contain the resource pool for the resource pool to match the filter. If unset or empty, resource pools in any cluster match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(resourcePools: [String]? = nil, names: [String]? = nil, parentResourcePools: [String]? = nil, datacenters: [String]? = nil, hosts: [String]? = nil, clusters: [String]? = nil, completion: @escaping ((_ data: [VcenterResourcePoolSummary]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(resourcePools: resourcePools, names: names, parentResourcePools: parentResourcePools, datacenters: datacenters, hosts: hosts, clusters: clusters).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about at most 1000 visible (subject to permission checks) resource pools in vCenter matching the ResourcePool.FilterSpec.
     - GET /api/vcenter/resource-pool
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]
     
     - parameter resourcePools: (query) Identifiers of resource pools that can match the filter. If unset or empty, resource pools with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool. (optional)
     - parameter names: (query) Names that resource pools must have to match the filter (see ResourcePool.Info.name). If unset or empty, resource pools with any name match the filter. (optional)
     - parameter parentResourcePools: (query) Resource pools that must contain the resource pool for the resource pool to match the filter. If unset or empty, resource pools in any resource pool match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool. (optional)
     - parameter datacenters: (query) Datacenters that must contain the resource pool for the resource pool to match the filter. If unset or empty, resource pools in any datacenter match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter. (optional)
     - parameter hosts: (query) Hosts that must contain the resource pool for the resource pool to match the filter. If unset or empty, resource pools in any host match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem. (optional)
     - parameter clusters: (query) Clusters that must contain the resource pool for the resource pool to match the filter. If unset or empty, resource pools in any cluster match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource. (optional)

     - returns: RequestBuilder<[VcenterResourcePoolSummary]> 
     */
    open class func listWithRequestBuilder(resourcePools: [String]? = nil, names: [String]? = nil, parentResourcePools: [String]? = nil, datacenters: [String]? = nil, hosts: [String]? = nil, clusters: [String]? = nil) -> RequestBuilder<[VcenterResourcePoolSummary]> {
        let path = "/api/vcenter/resource-pool"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "resource_pools": resourcePools, 
            "names": names, 
            "parent_resource_pools": parentResourcePools, 
            "datacenters": datacenters, 
            "hosts": hosts, 
            "clusters": clusters
        ])

        let requestBuilder: RequestBuilder<[VcenterResourcePoolSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns information about at most 1000 visible (subject to permission checks) resource pools in vCenter matching the ResourcePool.FilterSpec.
     
     - parameter filterResourcePools: (query) Identifiers of resource pools that can match the filter. If unset or empty, resource pools with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool. (optional)
     - parameter filterNames: (query) Names that resource pools must have to match the filter (see ResourcePool.Info.name). If unset or empty, resource pools with any name match the filter. (optional)
     - parameter filterParentResourcePools: (query) Resource pools that must contain the resource pool for the resource pool to match the filter. If unset or empty, resource pools in any resource pool match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool. (optional)
     - parameter filterDatacenters: (query) Datacenters that must contain the resource pool for the resource pool to match the filter. If unset or empty, resource pools in any datacenter match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter. (optional)
     - parameter filterHosts: (query) Hosts that must contain the resource pool for the resource pool to match the filter. If unset or empty, resource pools in any host match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem. (optional)
     - parameter filterClusters: (query) Clusters that must contain the resource pool for the resource pool to match the filter. If unset or empty, resource pools in any cluster match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list_0(filterResourcePools: [String]? = nil, filterNames: [String]? = nil, filterParentResourcePools: [String]? = nil, filterDatacenters: [String]? = nil, filterHosts: [String]? = nil, filterClusters: [String]? = nil, completion: @escaping ((_ data: VcenterResourcePoolListResp?,_ error: Error?) -> Void)) {
        list_0WithRequestBuilder(filterResourcePools: filterResourcePools, filterNames: filterNames, filterParentResourcePools: filterParentResourcePools, filterDatacenters: filterDatacenters, filterHosts: filterHosts, filterClusters: filterClusters).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about at most 1000 visible (subject to permission checks) resource pools in vCenter matching the ResourcePool.FilterSpec.
     - GET /rest/vcenter/resource-pool
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter filterResourcePools: (query) Identifiers of resource pools that can match the filter. If unset or empty, resource pools with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool. (optional)
     - parameter filterNames: (query) Names that resource pools must have to match the filter (see ResourcePool.Info.name). If unset or empty, resource pools with any name match the filter. (optional)
     - parameter filterParentResourcePools: (query) Resource pools that must contain the resource pool for the resource pool to match the filter. If unset or empty, resource pools in any resource pool match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool. (optional)
     - parameter filterDatacenters: (query) Datacenters that must contain the resource pool for the resource pool to match the filter. If unset or empty, resource pools in any datacenter match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter. (optional)
     - parameter filterHosts: (query) Hosts that must contain the resource pool for the resource pool to match the filter. If unset or empty, resource pools in any host match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem. (optional)
     - parameter filterClusters: (query) Clusters that must contain the resource pool for the resource pool to match the filter. If unset or empty, resource pools in any cluster match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource. (optional)

     - returns: RequestBuilder<VcenterResourcePoolListResp> 
     */
    open class func list_0WithRequestBuilder(filterResourcePools: [String]? = nil, filterNames: [String]? = nil, filterParentResourcePools: [String]? = nil, filterDatacenters: [String]? = nil, filterHosts: [String]? = nil, filterClusters: [String]? = nil) -> RequestBuilder<VcenterResourcePoolListResp> {
        let path = "/rest/vcenter/resource-pool"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.resource_pools": filterResourcePools, 
            "filter.names": filterNames, 
            "filter.parent_resource_pools": filterParentResourcePools, 
            "filter.datacenters": filterDatacenters, 
            "filter.hosts": filterHosts, 
            "filter.clusters": filterClusters
        ])

        let requestBuilder: RequestBuilder<VcenterResourcePoolListResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Updates the configuration of a resource pool. if you do not have all of the privileges described as follows:     -  The resource ResourcePool referenced by the parameter resourcePool requires Resource.EditPool.  
     
     - parameter resourcePool: (path) Identifier of the resource pool. The parameter must be an identifier for the resource type: ResourcePool. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(resourcePool: String, requestBody: VcenterResourcePoolUpdate? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(resourcePool: resourcePool, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates the configuration of a resource pool. if you do not have all of the privileges described as follows:     -  The resource ResourcePool referenced by the parameter resourcePool requires Resource.EditPool.  
     - PATCH /api/vcenter/resource-pool/{resource_pool}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter resourcePool: (path) Identifier of the resource pool. The parameter must be an identifier for the resource type: ResourcePool. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateWithRequestBuilder(resourcePool: String, requestBody: VcenterResourcePoolUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/api/vcenter/resource-pool/{resource_pool}"
        let resourcePoolPreEscape = "\(resourcePool)"
        let resourcePoolPostEscape = resourcePoolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resource_pool}", with: resourcePoolPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Updates the configuration of a resource pool. if you do not have all of the privileges described as follows:     -  The resource ResourcePool referenced by the parameter resourcePool requires Resource.EditPool.  
     
     - parameter resourcePool: (path) Identifier of the resource pool. The parameter must be an identifier for the resource type: ResourcePool. 
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update_0(resourcePool: String, requestBody: VcenterResourcePoolUpdate, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        update_0WithRequestBuilder(resourcePool: resourcePool, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates the configuration of a resource pool. if you do not have all of the privileges described as follows:     -  The resource ResourcePool referenced by the parameter resourcePool requires Resource.EditPool.  
     - PATCH /rest/vcenter/resource-pool/{resource_pool}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter resourcePool: (path) Identifier of the resource pool. The parameter must be an identifier for the resource type: ResourcePool. 
     - parameter requestBody: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func update_0WithRequestBuilder(resourcePool: String, requestBody: VcenterResourcePoolUpdate) -> RequestBuilder<Void> {
        var path = "/rest/vcenter/resource-pool/{resource_pool}"
        let resourcePoolPreEscape = "\(resourcePool)"
        let resourcePoolPostEscape = resourcePoolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resource_pool}", with: resourcePoolPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
