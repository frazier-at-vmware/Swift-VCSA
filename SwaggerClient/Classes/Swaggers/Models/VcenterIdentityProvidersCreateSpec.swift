//
// VcenterIdentityProvidersCreateSpec.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct VcenterIdentityProvidersCreateSpec: Codable {

    /** The config type of the identity provider */
    public var configTag: VcenterIdentityProvidersConfigType
    /** OAuth2 CreateSpec This field is optional and it is only relevant when the value of Providers.CreateSpec.config-tag is Oauth2. */
    public var oauth2: VcenterIdentityProvidersOauth2CreateSpec?
    /** OIDC CreateSpec This field is optional and it is only relevant when the value of Providers.CreateSpec.config-tag is Oidc. */
    public var oidc: VcenterIdentityProvidersOidcCreateSpec?
    /** The set of orgIds as part of SDDC creation which provides the basis for tenancy If unset, the set will be empty. */
    public var orgIds: [String]?
    /** Specifies whether the provider is the default provider. Setting Providers.CreateSpec.is-default of current provider to True makes all other providers non-default. If no other providers created in this vCenter Server before, this parameter will be disregarded, and the provider will always be set to the default. If unset the provider will be the default provider if it is the first provider that is created, and will not be the default provider otherwise. */
    public var isDefault: Bool?
    /** The user friendly name for the provider. This name can be used for human-readable identification purposes, but it does not have to be unique, as the system will use internal UUIDs to differentiate providers. If unset, the name will be the empty string */
    public var name: String?
    /** Set of fully qualified domain names to trust when federating with this identity provider. Tokens from this identity provider will only be validated if the user belongs to one of these domains, and any domain-qualified groups in the tokens will be filtered to include only those groups that belong to one of these domains. If unset, domainNames will be the empty set and the domain validation behavior at login with this identity provider will be as follows: the user&#39;s domain will be parsed from the User Principal Name (UPN) value that is found in the tokens returned by the identity provider. This domain will then be implicitly trusted and used to filter any groups that are also provided in the tokens. */
    public var domainNames: [String]?
    /**  key/value pairs that are to be appended to the authEndpoint request.   How to append to authEndpoint request:  If the map is not empty, a \&quot;?\&quot; is added to the endpoint URL, and combination of each k and each string in the v is added with an \&quot;&amp;\&quot; delimiter. Details:    - If the value contains only one string, then the key is added with \&quot;k&#x3D;v\&quot;.    - If the value is an empty list, then the key is added without a \&quot;&#x3D;v\&quot;.    - If the value contains multiple strings, then the key is repeated in the query-string for each string in the value.  If unset, the map will be empty. */
    public var authQueryParams: [VcenterIdentityProvidersCreateSpecAuthQueryParams]?
    /** Communication protocol to the identity management endpoints. If unset, no communication protocol will be configured for the identity provider. */
    public var idmProtocol: VcenterIdentityProvidersIdmProtocol?
    /** Identity management endpoints. When specified, at least one endpoint must be provided. This field is optional and it is only relevant when the value of Providers.CreateSpec.idm-protocol is one of REST, SCIM, or SCIM2_0. */
    public var idmEndpoints: [String]?
    /** Identity management configuration. If the protocol is LDAP, the configuration must be set, else InvalidArgument is thrown. This field is optional and it is only relevant when the value of Providers.CreateSpec.idm-protocol is LDAP. */
    public var activeDirectoryOverLdap: VcenterIdentityProvidersActiveDirectoryOverLdap?
    /** Specifies which claim provides the user principal name (UPN) for the user. If unset, the claim named &#39;acct&#39; will be used to provide backwards compatibility with CSP. */
    public var upnClaim: String?
    /** Specifies which claim provides the group membership for the token subject. These groups will be used for mapping to local groups per the claim map. If unset, the default behavior will be CSP backwards compatiblility. The groups for the subject will be comprised of the groups in &#39;group_names&#39; and &#39;group_ids&#39; claims. */
    public var groupsClaim: String?

    public init(configTag: VcenterIdentityProvidersConfigType, oauth2: VcenterIdentityProvidersOauth2CreateSpec?, oidc: VcenterIdentityProvidersOidcCreateSpec?, orgIds: [String]?, isDefault: Bool?, name: String?, domainNames: [String]?, authQueryParams: [VcenterIdentityProvidersCreateSpecAuthQueryParams]?, idmProtocol: VcenterIdentityProvidersIdmProtocol?, idmEndpoints: [String]?, activeDirectoryOverLdap: VcenterIdentityProvidersActiveDirectoryOverLdap?, upnClaim: String?, groupsClaim: String?) {
        self.configTag = configTag
        self.oauth2 = oauth2
        self.oidc = oidc
        self.orgIds = orgIds
        self.isDefault = isDefault
        self.name = name
        self.domainNames = domainNames
        self.authQueryParams = authQueryParams
        self.idmProtocol = idmProtocol
        self.idmEndpoints = idmEndpoints
        self.activeDirectoryOverLdap = activeDirectoryOverLdap
        self.upnClaim = upnClaim
        self.groupsClaim = groupsClaim
    }

    public enum CodingKeys: String, CodingKey { 
        case configTag = "config_tag"
        case oauth2
        case oidc
        case orgIds = "org_ids"
        case isDefault = "is_default"
        case name
        case domainNames = "domain_names"
        case authQueryParams = "auth_query_params"
        case idmProtocol = "idm_protocol"
        case idmEndpoints = "idm_endpoints"
        case activeDirectoryOverLdap = "active_directory_over_ldap"
        case upnClaim = "upn_claim"
        case groupsClaim = "groups_claim"
    }


}

