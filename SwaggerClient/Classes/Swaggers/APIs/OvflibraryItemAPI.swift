//
// OvflibraryItemAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class OvflibraryItemAPI {
    /**
     Creates a library item in content library from a virtual machine or virtual appliance. <p> This {@term operation} creates a library item in content library whose content is an OVF package derived from a source virtual machine or virtual appliance, using the supplied create specification. The OVF package may be stored as in a newly created library item or in an in an existing library item. For an existing library item whose content is updated by this {@term operation}, the original content is overwritten. Meta data such as name and description is not updated for the exisitng library item. </p>
     
     - parameter requestBody: (body)  
     - parameter clientToken: (query) Client-generated token used to retry a request if the client fails to get a response from the server. If the original request succeeded, the result of that request will be returned, otherwise the operation will be retried. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(requestBody: VcenterOvfLibraryItemCreate, clientToken: String? = nil, completion: @escaping ((_ data: VcenterOvfLibraryItemCreateResult?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(requestBody: requestBody, clientToken: clientToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates a library item in content library from a virtual machine or virtual appliance. <p> This {@term operation} creates a library item in content library whose content is an OVF package derived from a source virtual machine or virtual appliance, using the supplied create specification. The OVF package may be stored as in a newly created library item or in an in an existing library item. For an existing library item whose content is updated by this {@term operation}, the original content is overwritten. Meta data such as name and description is not updated for the exisitng library item. </p>
     - POST /api/vcenter/ovf/library-item
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter requestBody: (body)  
     - parameter clientToken: (query) Client-generated token used to retry a request if the client fails to get a response from the server. If the original request succeeded, the result of that request will be returned, otherwise the operation will be retried. (optional)

     - returns: RequestBuilder<VcenterOvfLibraryItemCreateResult> 
     */
    open class func createWithRequestBuilder(requestBody: VcenterOvfLibraryItemCreate, clientToken: String? = nil) -> RequestBuilder<VcenterOvfLibraryItemCreateResult> {
        let path = "/api/vcenter/ovf/library-item"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "client_token": clientToken
        ])

        let requestBuilder: RequestBuilder<VcenterOvfLibraryItemCreateResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Creates a library item in content library from a virtual machine or virtual appliance. <p> This {@term operation} creates a library item in content library whose content is an OVF package derived from a source virtual machine or virtual appliance, using the supplied create specification. The OVF package may be stored as in a newly created library item or in an in an existing library item. For an existing library item whose content is updated by this {@term operation}, the original content is overwritten. Meta data such as name and description is not updated for the exisitng library item. </p>
     
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create_0(requestBody: VcenterOvfLibraryItemCreate, completion: @escaping ((_ data: VcenterOvfLibraryItemCreateResp?,_ error: Error?) -> Void)) {
        create_0WithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates a library item in content library from a virtual machine or virtual appliance. <p> This {@term operation} creates a library item in content library whose content is an OVF package derived from a source virtual machine or virtual appliance, using the supplied create specification. The OVF package may be stored as in a newly created library item or in an in an existing library item. For an existing library item whose content is updated by this {@term operation}, the original content is overwritten. Meta data such as name and description is not updated for the exisitng library item. </p>
     - POST /rest/com/vmware/vcenter/ovf/library-item
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter requestBody: (body)  

     - returns: RequestBuilder<VcenterOvfLibraryItemCreateResp> 
     */
    open class func create_0WithRequestBuilder(requestBody: VcenterOvfLibraryItemCreate) -> RequestBuilder<VcenterOvfLibraryItemCreateResp> {
        let path = "/rest/com/vmware/vcenter/ovf/library-item"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterOvfLibraryItemCreateResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Deploys an OVF package stored in content library to a newly created virtual machine or virtual appliance. <p> This {@term operation} deploys an OVF package which is stored in the library item specified by {@param.name ovfLibraryItemId}. It uses the deployment specification in {@param.name deploymentSpec} to deploy the OVF package to the location specified by {@param.name target}. </p>
     
     - parameter ovfLibraryItemId: (path) Identifier of the content library item containing the OVF package to be deployed. 
     - parameter requestBody: (body)  
     - parameter clientToken: (query) Client-generated token used to retry a request if the client fails to get a response from the server. If the original request succeeded, the result of that request will be returned, otherwise the operation will be retried. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deploy(ovfLibraryItemId: String, requestBody: VcenterOvfLibraryItemDeploy, clientToken: String? = nil, completion: @escaping ((_ data: VcenterOvfLibraryItemDeploymentResult?,_ error: Error?) -> Void)) {
        deployWithRequestBuilder(ovfLibraryItemId: ovfLibraryItemId, requestBody: requestBody, clientToken: clientToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Deploys an OVF package stored in content library to a newly created virtual machine or virtual appliance. <p> This {@term operation} deploys an OVF package which is stored in the library item specified by {@param.name ovfLibraryItemId}. It uses the deployment specification in {@param.name deploymentSpec} to deploy the OVF package to the location specified by {@param.name target}. </p>
     - POST /api/vcenter/ovf/library-item/{ovf_library_item_id}?action=deploy
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter ovfLibraryItemId: (path) Identifier of the content library item containing the OVF package to be deployed. 
     - parameter requestBody: (body)  
     - parameter clientToken: (query) Client-generated token used to retry a request if the client fails to get a response from the server. If the original request succeeded, the result of that request will be returned, otherwise the operation will be retried. (optional)

     - returns: RequestBuilder<VcenterOvfLibraryItemDeploymentResult> 
     */
    open class func deployWithRequestBuilder(ovfLibraryItemId: String, requestBody: VcenterOvfLibraryItemDeploy, clientToken: String? = nil) -> RequestBuilder<VcenterOvfLibraryItemDeploymentResult> {
        var path = "/api/vcenter/ovf/library-item/{ovf_library_item_id}?action=deploy"
        let ovfLibraryItemIdPreEscape = "\(ovfLibraryItemId)"
        let ovfLibraryItemIdPostEscape = ovfLibraryItemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ovf_library_item_id}", with: ovfLibraryItemIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "client_token": clientToken
        ])

        let requestBuilder: RequestBuilder<VcenterOvfLibraryItemDeploymentResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Deploys an OVF package stored in content library to a newly created virtual machine or virtual appliance. <p> This {@term operation} deploys an OVF package which is stored in the library item specified by {@param.name ovfLibraryItemId}. It uses the deployment specification in {@param.name deploymentSpec} to deploy the OVF package to the location specified by {@param.name target}. </p>
     
     - parameter ovfLibraryItemId: (path) Identifier of the content library item containing the OVF package to be deployed. 
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deploy_0(ovfLibraryItemId: String, requestBody: VcenterOvfLibraryItemDeploy, completion: @escaping ((_ data: VcenterOvfLibraryItemDeployResp?,_ error: Error?) -> Void)) {
        deploy_0WithRequestBuilder(ovfLibraryItemId: ovfLibraryItemId, requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Deploys an OVF package stored in content library to a newly created virtual machine or virtual appliance. <p> This {@term operation} deploys an OVF package which is stored in the library item specified by {@param.name ovfLibraryItemId}. It uses the deployment specification in {@param.name deploymentSpec} to deploy the OVF package to the location specified by {@param.name target}. </p>
     - POST /rest/com/vmware/vcenter/ovf/library-item/id:{ovf_library_item_id}?~action=deploy
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter ovfLibraryItemId: (path) Identifier of the content library item containing the OVF package to be deployed. 
     - parameter requestBody: (body)  

     - returns: RequestBuilder<VcenterOvfLibraryItemDeployResp> 
     */
    open class func deploy_0WithRequestBuilder(ovfLibraryItemId: String, requestBody: VcenterOvfLibraryItemDeploy) -> RequestBuilder<VcenterOvfLibraryItemDeployResp> {
        var path = "/rest/com/vmware/vcenter/ovf/library-item/id:{ovf_library_item_id}?~action=deploy"
        let ovfLibraryItemIdPreEscape = "\(ovfLibraryItemId)"
        let ovfLibraryItemIdPostEscape = ovfLibraryItemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ovf_library_item_id}", with: ovfLibraryItemIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterOvfLibraryItemDeployResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Queries an OVF package stored in content library to retrieve information to use when deploying the package. See {@link #deploy}. <p> This {@term operation} retrieves information from the descriptor of the OVF package stored in the library item specified by {@param.name ovfLibraryItemId}. The information returned by the {@term operation} can be used to populate the deployment specification (see {@link ResourcePoolDeploymentSpec} when deploying the OVF package to the deployment target specified by {@param.name target}. </p>
     
     - parameter ovfLibraryItemId: (path) Identifier of the content library item containing the OVF package to query. 
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func filter(ovfLibraryItemId: String, requestBody: VcenterOvfLibraryItemFilter, completion: @escaping ((_ data: VcenterOvfLibraryItemOvfSummary?,_ error: Error?) -> Void)) {
        filterWithRequestBuilder(ovfLibraryItemId: ovfLibraryItemId, requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Queries an OVF package stored in content library to retrieve information to use when deploying the package. See {@link #deploy}. <p> This {@term operation} retrieves information from the descriptor of the OVF package stored in the library item specified by {@param.name ovfLibraryItemId}. The information returned by the {@term operation} can be used to populate the deployment specification (see {@link ResourcePoolDeploymentSpec} when deploying the OVF package to the deployment target specified by {@param.name target}. </p>
     - POST /api/vcenter/ovf/library-item/{ovf_library_item_id}?action=filter
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter ovfLibraryItemId: (path) Identifier of the content library item containing the OVF package to query. 
     - parameter requestBody: (body)  

     - returns: RequestBuilder<VcenterOvfLibraryItemOvfSummary> 
     */
    open class func filterWithRequestBuilder(ovfLibraryItemId: String, requestBody: VcenterOvfLibraryItemFilter) -> RequestBuilder<VcenterOvfLibraryItemOvfSummary> {
        var path = "/api/vcenter/ovf/library-item/{ovf_library_item_id}?action=filter"
        let ovfLibraryItemIdPreEscape = "\(ovfLibraryItemId)"
        let ovfLibraryItemIdPostEscape = ovfLibraryItemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ovf_library_item_id}", with: ovfLibraryItemIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterOvfLibraryItemOvfSummary>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Queries an OVF package stored in content library to retrieve information to use when deploying the package. See {@link #deploy}. <p> This {@term operation} retrieves information from the descriptor of the OVF package stored in the library item specified by {@param.name ovfLibraryItemId}. The information returned by the {@term operation} can be used to populate the deployment specification (see {@link ResourcePoolDeploymentSpec} when deploying the OVF package to the deployment target specified by {@param.name target}. </p>
     
     - parameter ovfLibraryItemId: (path) Identifier of the content library item containing the OVF package to query. 
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func filter_0(ovfLibraryItemId: String, requestBody: VcenterOvfLibraryItemFilter, completion: @escaping ((_ data: VcenterOvfLibraryItemFilterResp?,_ error: Error?) -> Void)) {
        filter_0WithRequestBuilder(ovfLibraryItemId: ovfLibraryItemId, requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Queries an OVF package stored in content library to retrieve information to use when deploying the package. See {@link #deploy}. <p> This {@term operation} retrieves information from the descriptor of the OVF package stored in the library item specified by {@param.name ovfLibraryItemId}. The information returned by the {@term operation} can be used to populate the deployment specification (see {@link ResourcePoolDeploymentSpec} when deploying the OVF package to the deployment target specified by {@param.name target}. </p>
     - POST /rest/com/vmware/vcenter/ovf/library-item/id:{ovf_library_item_id}?~action=filter
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter ovfLibraryItemId: (path) Identifier of the content library item containing the OVF package to query. 
     - parameter requestBody: (body)  

     - returns: RequestBuilder<VcenterOvfLibraryItemFilterResp> 
     */
    open class func filter_0WithRequestBuilder(ovfLibraryItemId: String, requestBody: VcenterOvfLibraryItemFilter) -> RequestBuilder<VcenterOvfLibraryItemFilterResp> {
        var path = "/rest/com/vmware/vcenter/ovf/library-item/id:{ovf_library_item_id}?~action=filter"
        let ovfLibraryItemIdPreEscape = "\(ovfLibraryItemId)"
        let ovfLibraryItemIdPostEscape = ovfLibraryItemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ovf_library_item_id}", with: ovfLibraryItemIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterOvfLibraryItemFilterResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
