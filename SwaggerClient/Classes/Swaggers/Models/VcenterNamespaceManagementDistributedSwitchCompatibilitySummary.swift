//
// VcenterNamespaceManagementDistributedSwitchCompatibilitySummary.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct VcenterNamespaceManagementDistributedSwitchCompatibilitySummary: Codable {

    /** Identifier of the switch. If DistributedSwitchCompatibility.Summary.network-provider is either unset or is set to NSXT_CONTAINER_PLUGIN, the value of this field will refer to the UUID of a vim.DistributedVirtualSwitch. Otherwise, the value of the field will refer to the ID of a vim.DistributedVirtualSwitch. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: vSphereDistributedSwitch. When operations return a value of this structure as a result, the field will be an identifier for the resource type: vSphereDistributedSwitch. */
    public var distributedSwitch: String
    /** Compatibility of this switch with vSphere Namespaces. */
    public var compatible: Bool
    /** List of reasons for incompatibility. If unset, this Distributed Switch is compatible. */
    public var incompatibilityReasons: [VapiStdLocalizableMessage]?
    /** The network provider whose networks were considered. If unset, clients clients should assume the value to be NSXT_CONTAINER_PLUGIN. */
    public var networkProvider: VcenterNamespaceManagementClustersNetworkProvider?
    /** List of compatible (PortGroup) Networks under the distributed switch. This field is optional because it was added in a newer version than its parent node. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Network. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Network. */
    public var compatibleNetworks: [String]?

    public init(distributedSwitch: String, compatible: Bool, incompatibilityReasons: [VapiStdLocalizableMessage]?, networkProvider: VcenterNamespaceManagementClustersNetworkProvider?, compatibleNetworks: [String]?) {
        self.distributedSwitch = distributedSwitch
        self.compatible = compatible
        self.incompatibilityReasons = incompatibilityReasons
        self.networkProvider = networkProvider
        self.compatibleNetworks = compatibleNetworks
    }

    public enum CodingKeys: String, CodingKey { 
        case distributedSwitch = "distributed_switch"
        case compatible
        case incompatibilityReasons = "incompatibility_reasons"
        case networkProvider = "network_provider"
        case compatibleNetworks = "compatible_networks"
    }


}

