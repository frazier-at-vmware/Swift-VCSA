//
// NamespaceManagementdistributedSwitchCompatibilityAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class NamespaceManagementdistributedSwitchCompatibilityAPI {
    /**
     * enum for parameter networkProvider
     */
    public enum NetworkProvider_list: String { 
        case nsxtContainerPlugin = "NSXT_CONTAINER_PLUGIN"
        case vsphereNetwork = "VSPHERE_NETWORK"
    }

    /**
     Returns Namespaces compatibility information of Distributed Switches in vCenter associated with the vCenter cluster, matching the DistributedSwitchCompatibility.FilterSpec. if you do not have all of the privileges described as follows:     -  The resource ClusterComputeResource referenced by the parameter cluster requires System.Read.  
     
     - parameter cluster: (query) Identifier of a vCenter Cluster. Only Distributed Switches associated with the vCenter Cluster will be considered by the filter. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter compatible: (query) Compatibility criteria for matching the filter. If true, only Distributed Switches which are compatible with vSphere Namespaces match the filter. If false, only Distributed Switches which are incompatible with vSphere Namespaces match the filter. If unset, both compatible and incompatible Distributed Switches match the filter. (optional)
     - parameter networkProvider: (query) Identifies the network plugin that cluster networking functionalities for this vSphere Namespaces Cluster. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(cluster: String, compatible: Bool? = nil, networkProvider: NetworkProvider_list? = nil, completion: @escaping ((_ data: [VcenterNamespaceManagementDistributedSwitchCompatibilitySummary]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(cluster: cluster, compatible: compatible, networkProvider: networkProvider).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns Namespaces compatibility information of Distributed Switches in vCenter associated with the vCenter cluster, matching the DistributedSwitchCompatibility.FilterSpec. if you do not have all of the privileges described as follows:     -  The resource ClusterComputeResource referenced by the parameter cluster requires System.Read.  
     - GET /api/vcenter/namespace-management/distributed-switch-compatibility
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]
     
     - parameter cluster: (query) Identifier of a vCenter Cluster. Only Distributed Switches associated with the vCenter Cluster will be considered by the filter. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter compatible: (query) Compatibility criteria for matching the filter. If true, only Distributed Switches which are compatible with vSphere Namespaces match the filter. If false, only Distributed Switches which are incompatible with vSphere Namespaces match the filter. If unset, both compatible and incompatible Distributed Switches match the filter. (optional)
     - parameter networkProvider: (query) Identifies the network plugin that cluster networking functionalities for this vSphere Namespaces Cluster. (optional)

     - returns: RequestBuilder<[VcenterNamespaceManagementDistributedSwitchCompatibilitySummary]> 
     */
    open class func listWithRequestBuilder(cluster: String, compatible: Bool? = nil, networkProvider: NetworkProvider_list? = nil) -> RequestBuilder<[VcenterNamespaceManagementDistributedSwitchCompatibilitySummary]> {
        let path = "/api/vcenter/namespace-management/distributed-switch-compatibility"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "cluster": cluster, 
            "compatible": compatible, 
            "network_provider": networkProvider?.rawValue
        ])

        let requestBuilder: RequestBuilder<[VcenterNamespaceManagementDistributedSwitchCompatibilitySummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
