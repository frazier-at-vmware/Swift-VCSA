//
// CryptoManagerkmsprovidersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CryptoManagerkmsprovidersAPI {
    /**
     Return information about a provider. if you do not have all of the privileges described as follows:     -  Operation execution requires Cryptographer.ReadKeyServersInfo.  
     
     - parameter provider: (path) Identifier of the provider. The parameter must be an identifier for the resource type: vcenter.crypto_manager.kms.provider. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(provider: String, completion: @escaping ((_ data: VcenterCryptoManagerKmsProvidersInfo?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(provider: provider).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Return information about a provider. if you do not have all of the privileges described as follows:     -  Operation execution requires Cryptographer.ReadKeyServersInfo.  
     - GET /api/vcenter/crypto-manager/kms/providers/{provider}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter provider: (path) Identifier of the provider. The parameter must be an identifier for the resource type: vcenter.crypto_manager.kms.provider. 

     - returns: RequestBuilder<VcenterCryptoManagerKmsProvidersInfo> 
     */
    open class func callGetWithRequestBuilder(provider: String) -> RequestBuilder<VcenterCryptoManagerKmsProvidersInfo> {
        var path = "/api/vcenter/crypto-manager/kms/providers/{provider}"
        let providerPreEscape = "\(provider)"
        let providerPostEscape = providerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{provider}", with: providerPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterCryptoManagerKmsProvidersInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Add a new provider. if you do not have all of the privileges described as follows:     -  Operation execution requires Cryptographer.ManageKeyServers.  
     
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(requestBody: VcenterCryptoManagerKmsProvidersCreate? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Add a new provider. if you do not have all of the privileges described as follows:     -  Operation execution requires Cryptographer.ManageKeyServers.  
     - POST /api/vcenter/crypto-manager/kms/providers
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func createWithRequestBuilder(requestBody: VcenterCryptoManagerKmsProvidersCreate? = nil) -> RequestBuilder<Void> {
        let path = "/api/vcenter/crypto-manager/kms/providers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Remove a provider. if you do not have all of the privileges described as follows:     -  Operation execution requires Cryptographer.ManageKeyServers.  
     
     - parameter provider: (path) Identifier of the provider. The parameter must be an identifier for the resource type: vcenter.crypto_manager.kms.provider. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(provider: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(provider: provider).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Remove a provider. if you do not have all of the privileges described as follows:     -  Operation execution requires Cryptographer.ManageKeyServers.  
     - DELETE /api/vcenter/crypto-manager/kms/providers/{provider}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter provider: (path) Identifier of the provider. The parameter must be an identifier for the resource type: vcenter.crypto_manager.kms.provider. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(provider: String) -> RequestBuilder<Void> {
        var path = "/api/vcenter/crypto-manager/kms/providers/{provider}"
        let providerPreEscape = "\(provider)"
        let providerPostEscape = providerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{provider}", with: providerPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Export provider configuration. if you do not have all of the privileges described as follows:     -  Operation execution requires Cryptographer.ManageKeyServers.  
     
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func export(requestBody: VcenterCryptoManagerKmsProvidersExport? = nil, completion: @escaping ((_ data: VcenterCryptoManagerKmsProvidersExportResult?,_ error: Error?) -> Void)) {
        exportWithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Export provider configuration. if you do not have all of the privileges described as follows:     -  Operation execution requires Cryptographer.ManageKeyServers.  
     - POST /api/vcenter/crypto-manager/kms/providers?action=export
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<VcenterCryptoManagerKmsProvidersExportResult> 
     */
    open class func exportWithRequestBuilder(requestBody: VcenterCryptoManagerKmsProvidersExport? = nil) -> RequestBuilder<VcenterCryptoManagerKmsProvidersExportResult> {
        let path = "/api/vcenter/crypto-manager/kms/providers?action=export"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterCryptoManagerKmsProvidersExportResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Import provider configuration. if you do not have all of the privileges described as follows:     -  Operation execution requires Cryptographer.ManageKeyServers.  
     
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func importProvider(requestBody: VcenterCryptoManagerKmsProvidersImportProvider? = nil, completion: @escaping ((_ data: VcenterCryptoManagerKmsProvidersImportResult?,_ error: Error?) -> Void)) {
        importProviderWithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Import provider configuration. if you do not have all of the privileges described as follows:     -  Operation execution requires Cryptographer.ManageKeyServers.  
     - POST /api/vcenter/crypto-manager/kms/providers?action=import
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<VcenterCryptoManagerKmsProvidersImportResult> 
     */
    open class func importProviderWithRequestBuilder(requestBody: VcenterCryptoManagerKmsProvidersImportProvider? = nil) -> RequestBuilder<VcenterCryptoManagerKmsProvidersImportResult> {
        let path = "/api/vcenter/crypto-manager/kms/providers?action=import"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterCryptoManagerKmsProvidersImportResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     * enum for parameter health
     */
    public enum Health_list: String { 
        case _none = "NONE"
        case ok = "OK"
        case warning = "WARNING"
        case error = "ERROR"
    }

    /**
     Return a list of providers.    if you do not have all of the privileges described as follows:     -  Operation execution requires Cryptographer.ReadKeyServersInfo.  
     
     - parameter providers: (query) Provider identifiers. If unset or empty, the result will not be filtered by provider identifier. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.crypto_manager.kms.provider. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.crypto_manager.kms.provider. (optional)
     - parameter health: (query) Provider health status. If unset or empty, the result will not be filtered by provider health status. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(providers: [String]? = nil, health: [String]? = nil, completion: @escaping ((_ data: [VcenterCryptoManagerKmsProvidersSummary]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(providers: providers, health: health).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Return a list of providers.    if you do not have all of the privileges described as follows:     -  Operation execution requires Cryptographer.ReadKeyServersInfo.  
     - GET /api/vcenter/crypto-manager/kms/providers
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]
     
     - parameter providers: (query) Provider identifiers. If unset or empty, the result will not be filtered by provider identifier. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.crypto_manager.kms.provider. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.crypto_manager.kms.provider. (optional)
     - parameter health: (query) Provider health status. If unset or empty, the result will not be filtered by provider health status. (optional)

     - returns: RequestBuilder<[VcenterCryptoManagerKmsProvidersSummary]> 
     */
    open class func listWithRequestBuilder(providers: [String]? = nil, health: [String]? = nil) -> RequestBuilder<[VcenterCryptoManagerKmsProvidersSummary]> {
        let path = "/api/vcenter/crypto-manager/kms/providers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "providers": providers, 
            "health": health
        ])

        let requestBuilder: RequestBuilder<[VcenterCryptoManagerKmsProvidersSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update an existing provider. if you do not have all of the privileges described as follows:     -  Operation execution requires Cryptographer.ManageKeyServers.  
     
     - parameter provider: (path) Identifier of the provider. The parameter must be an identifier for the resource type: vcenter.crypto_manager.kms.provider. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(provider: String, requestBody: VcenterCryptoManagerKmsProvidersUpdate? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(provider: provider, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update an existing provider. if you do not have all of the privileges described as follows:     -  Operation execution requires Cryptographer.ManageKeyServers.  
     - PATCH /api/vcenter/crypto-manager/kms/providers/{provider}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter provider: (path) Identifier of the provider. The parameter must be an identifier for the resource type: vcenter.crypto_manager.kms.provider. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateWithRequestBuilder(provider: String, requestBody: VcenterCryptoManagerKmsProvidersUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/api/vcenter/crypto-manager/kms/providers/{provider}"
        let providerPreEscape = "\(provider)"
        let providerPostEscape = providerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{provider}", with: providerPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
