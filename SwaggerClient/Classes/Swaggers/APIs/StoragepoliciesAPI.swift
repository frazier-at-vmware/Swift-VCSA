//
// StoragepoliciesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class StoragepoliciesAPI {
    /**
     Returns datastore compatibility summary about a specific storage policy.
     
     - parameter policy: (path) The storage policy identifier The parameter must be an identifier for the resource type: vcenter.StoragePolicy. 
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func checkCompatibility(policy: String, requestBody: VcenterStoragePoliciesCheckCompatibility, completion: @escaping ((_ data: VcenterStoragePoliciesCompatibilityInfo?,_ error: Error?) -> Void)) {
        checkCompatibilityWithRequestBuilder(policy: policy, requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns datastore compatibility summary about a specific storage policy.
     - POST /api/vcenter/storage/policies/{policy}?action=check-compatibility
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter policy: (path) The storage policy identifier The parameter must be an identifier for the resource type: vcenter.StoragePolicy. 
     - parameter requestBody: (body)  

     - returns: RequestBuilder<VcenterStoragePoliciesCompatibilityInfo> 
     */
    open class func checkCompatibilityWithRequestBuilder(policy: String, requestBody: VcenterStoragePoliciesCheckCompatibility) -> RequestBuilder<VcenterStoragePoliciesCompatibilityInfo> {
        var path = "/api/vcenter/storage/policies/{policy}?action=check-compatibility"
        let policyPreEscape = "\(policy)"
        let policyPostEscape = policyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policy}", with: policyPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterStoragePoliciesCompatibilityInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Returns datastore compatibility summary about a specific storage policy.
     
     - parameter policy: (path) The storage policy identifier The parameter must be an identifier for the resource type: vcenter.StoragePolicy. 
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func checkCompatibility_0(policy: String, requestBody: VcenterStoragePoliciesCheckCompatibility, completion: @escaping ((_ data: VcenterStoragePoliciesCheckCompatibilityResp?,_ error: Error?) -> Void)) {
        checkCompatibility_0WithRequestBuilder(policy: policy, requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns datastore compatibility summary about a specific storage policy.
     - POST /rest/vcenter/storage/policies/{policy}?action=check-compatibility
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter policy: (path) The storage policy identifier The parameter must be an identifier for the resource type: vcenter.StoragePolicy. 
     - parameter requestBody: (body)  

     - returns: RequestBuilder<VcenterStoragePoliciesCheckCompatibilityResp> 
     */
    open class func checkCompatibility_0WithRequestBuilder(policy: String, requestBody: VcenterStoragePoliciesCheckCompatibility) -> RequestBuilder<VcenterStoragePoliciesCheckCompatibilityResp> {
        var path = "/rest/vcenter/storage/policies/{policy}?action=check-compatibility"
        let policyPreEscape = "\(policy)"
        let policyPostEscape = policyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policy}", with: policyPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterStoragePoliciesCheckCompatibilityResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Returns information about at most 1024 visible (subject to permission checks) storage solicies availabe in vCenter. These storage policies can be used for provisioning virtual machines or disks.
     
     - parameter policies: (query) Identifiers of storage policies that can match the filter. If unset or empty, storage policies with any identifiers match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.StoragePolicy. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.StoragePolicy. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(policies: [String]? = nil, completion: @escaping ((_ data: [VcenterStoragePoliciesSummary]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(policies: policies).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about at most 1024 visible (subject to permission checks) storage solicies availabe in vCenter. These storage policies can be used for provisioning virtual machines or disks.
     - GET /api/vcenter/storage/policies
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]
     
     - parameter policies: (query) Identifiers of storage policies that can match the filter. If unset or empty, storage policies with any identifiers match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.StoragePolicy. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.StoragePolicy. (optional)

     - returns: RequestBuilder<[VcenterStoragePoliciesSummary]> 
     */
    open class func listWithRequestBuilder(policies: [String]? = nil) -> RequestBuilder<[VcenterStoragePoliciesSummary]> {
        let path = "/api/vcenter/storage/policies"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "policies": policies
        ])

        let requestBuilder: RequestBuilder<[VcenterStoragePoliciesSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns information about at most 1024 visible (subject to permission checks) storage solicies availabe in vCenter. These storage policies can be used for provisioning virtual machines or disks.
     
     - parameter filterPolicies: (query) Identifiers of storage policies that can match the filter. If unset or empty, storage policies with any identifiers match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.StoragePolicy. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.StoragePolicy. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list_0(filterPolicies: [String]? = nil, completion: @escaping ((_ data: VcenterStoragePoliciesListResp?,_ error: Error?) -> Void)) {
        list_0WithRequestBuilder(filterPolicies: filterPolicies).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about at most 1024 visible (subject to permission checks) storage solicies availabe in vCenter. These storage policies can be used for provisioning virtual machines or disks.
     - GET /rest/vcenter/storage/policies
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter filterPolicies: (query) Identifiers of storage policies that can match the filter. If unset or empty, storage policies with any identifiers match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: vcenter.StoragePolicy. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: vcenter.StoragePolicy. (optional)

     - returns: RequestBuilder<VcenterStoragePoliciesListResp> 
     */
    open class func list_0WithRequestBuilder(filterPolicies: [String]? = nil) -> RequestBuilder<VcenterStoragePoliciesListResp> {
        let path = "/rest/vcenter/storage/policies"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.policies": filterPolicies
        ])

        let requestBuilder: RequestBuilder<VcenterStoragePoliciesListResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
