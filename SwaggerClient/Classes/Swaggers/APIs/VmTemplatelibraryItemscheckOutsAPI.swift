//
// VmTemplatelibraryItemscheckOutsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class VmTemplatelibraryItemscheckOutsAPI {
    /**
     Returns the information about a checked out virtual machine.
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter vm: (path) Identifier of the checked out virtual machine. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(templateLibraryItem: String, vm: String, completion: @escaping ((_ data: VcenterVmTemplateLibraryItemsCheckOutsInfo?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(templateLibraryItem: templateLibraryItem, vm: vm).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns the information about a checked out virtual machine.
     - GET /api/vcenter/vm-template/library-items/{template_library_item}/check-outs/{vm}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter vm: (path) Identifier of the checked out virtual machine. 

     - returns: RequestBuilder<VcenterVmTemplateLibraryItemsCheckOutsInfo> 
     */
    open class func callGetWithRequestBuilder(templateLibraryItem: String, vm: String) -> RequestBuilder<VcenterVmTemplateLibraryItemsCheckOutsInfo> {
        var path = "/api/vcenter/vm-template/library-items/{template_library_item}/check-outs/{vm}"
        let templateLibraryItemPreEscape = "\(templateLibraryItem)"
        let templateLibraryItemPostEscape = templateLibraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_library_item}", with: templateLibraryItemPostEscape, options: .literal, range: nil)
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterVmTemplateLibraryItemsCheckOutsInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns the information about a checked out virtual machine.
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter vm: (path) Identifier of the checked out virtual machine. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet_0(templateLibraryItem: String, vm: String, completion: @escaping ((_ data: VcenterVmTemplateLibraryItemsCheckOutsResp?,_ error: Error?) -> Void)) {
        callGet_0WithRequestBuilder(templateLibraryItem: templateLibraryItem, vm: vm).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns the information about a checked out virtual machine.
     - GET /rest/vcenter/vm-template/library-items/{template_library_item}/check-outs/{vm}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter vm: (path) Identifier of the checked out virtual machine. 

     - returns: RequestBuilder<VcenterVmTemplateLibraryItemsCheckOutsResp> 
     */
    open class func callGet_0WithRequestBuilder(templateLibraryItem: String, vm: String) -> RequestBuilder<VcenterVmTemplateLibraryItemsCheckOutsResp> {
        var path = "/rest/vcenter/vm-template/library-items/{template_library_item}/check-outs/{vm}"
        let templateLibraryItemPreEscape = "\(templateLibraryItem)"
        let templateLibraryItemPostEscape = templateLibraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_library_item}", with: templateLibraryItemPostEscape, options: .literal, range: nil)
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterVmTemplateLibraryItemsCheckOutsResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Checks in a virtual machine into the library item. This {@term operation} updates the library item to contain the virtual machine being checked in as a template. This template becomes the latest version of the library item. The previous virtual machine template contained in the library item is available as a backup and its information can be queried using the {@name Versions} {@term service}. At most one previous version of a virtual machine template is retained in the library item.
     
     - parameter templateLibraryItem: (path) Identifier of the content library item in which the virtual machine is checked in. 
     - parameter vm: (path) Identifier of the virtual machine to check into the library item. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func checkIn(templateLibraryItem: String, vm: String, requestBody: VcenterVmTemplateLibraryItemsCheckOutsCheckIn? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        checkInWithRequestBuilder(templateLibraryItem: templateLibraryItem, vm: vm, requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Checks in a virtual machine into the library item. This {@term operation} updates the library item to contain the virtual machine being checked in as a template. This template becomes the latest version of the library item. The previous virtual machine template contained in the library item is available as a backup and its information can be queried using the {@name Versions} {@term service}. At most one previous version of a virtual machine template is retained in the library item.
     - POST /api/vcenter/vm-template/library-items/{template_library_item}/check-outs/{vm}?action=check-in
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter templateLibraryItem: (path) Identifier of the content library item in which the virtual machine is checked in. 
     - parameter vm: (path) Identifier of the virtual machine to check into the library item. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func checkInWithRequestBuilder(templateLibraryItem: String, vm: String, requestBody: VcenterVmTemplateLibraryItemsCheckOutsCheckIn? = nil) -> RequestBuilder<String> {
        var path = "/api/vcenter/vm-template/library-items/{template_library_item}/check-outs/{vm}?action=check-in"
        let templateLibraryItemPreEscape = "\(templateLibraryItem)"
        let templateLibraryItemPostEscape = templateLibraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_library_item}", with: templateLibraryItemPostEscape, options: .literal, range: nil)
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Checks in a virtual machine into the library item. This {@term operation} updates the library item to contain the virtual machine being checked in as a template. This template becomes the latest version of the library item. The previous virtual machine template contained in the library item is available as a backup and its information can be queried using the {@name Versions} {@term service}. At most one previous version of a virtual machine template is retained in the library item.
     
     - parameter templateLibraryItem: (path) Identifier of the content library item in which the virtual machine is checked in. 
     - parameter vm: (path) Identifier of the virtual machine to check into the library item. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func checkIn_0(templateLibraryItem: String, vm: String, requestBody: VcenterVmTemplateLibraryItemsCheckOutsCheckIn? = nil, completion: @escaping ((_ data: VcenterVmTemplateLibraryItemsCheckOutsCheckInResp?,_ error: Error?) -> Void)) {
        checkIn_0WithRequestBuilder(templateLibraryItem: templateLibraryItem, vm: vm, requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Checks in a virtual machine into the library item. This {@term operation} updates the library item to contain the virtual machine being checked in as a template. This template becomes the latest version of the library item. The previous virtual machine template contained in the library item is available as a backup and its information can be queried using the {@name Versions} {@term service}. At most one previous version of a virtual machine template is retained in the library item.
     - POST /rest/vcenter/vm-template/library-items/{template_library_item}/check-outs/{vm}?action=check-in
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter templateLibraryItem: (path) Identifier of the content library item in which the virtual machine is checked in. 
     - parameter vm: (path) Identifier of the virtual machine to check into the library item. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<VcenterVmTemplateLibraryItemsCheckOutsCheckInResp> 
     */
    open class func checkIn_0WithRequestBuilder(templateLibraryItem: String, vm: String, requestBody: VcenterVmTemplateLibraryItemsCheckOutsCheckIn? = nil) -> RequestBuilder<VcenterVmTemplateLibraryItemsCheckOutsCheckInResp> {
        var path = "/rest/vcenter/vm-template/library-items/{template_library_item}/check-outs/{vm}?action=check-in"
        let templateLibraryItemPreEscape = "\(templateLibraryItem)"
        let templateLibraryItemPostEscape = templateLibraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_library_item}", with: templateLibraryItemPostEscape, options: .literal, range: nil)
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterVmTemplateLibraryItemsCheckOutsCheckInResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Checks out a library item containing a virtual machine template. This {@term operation} makes a copy of the source virtual machine template contained in the library item as a virtual machine. The virtual machine is copied with the same storage specification as the source virtual machine template. Changes to the checked out virtual machine do not affect the virtual machine template contained in the library item. To save these changes back into the library item, {@link #checkIn} the virtual machine. To discard the changes, {@link #delete} the virtual machine.
     
     - parameter templateLibraryItem: (path) Identifier of the content library item containing the source virtual machine template to be checked out. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func checkOut(templateLibraryItem: String, requestBody: VcenterVmTemplateLibraryItemsCheckOutsCheckOut? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        checkOutWithRequestBuilder(templateLibraryItem: templateLibraryItem, requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Checks out a library item containing a virtual machine template. This {@term operation} makes a copy of the source virtual machine template contained in the library item as a virtual machine. The virtual machine is copied with the same storage specification as the source virtual machine template. Changes to the checked out virtual machine do not affect the virtual machine template contained in the library item. To save these changes back into the library item, {@link #checkIn} the virtual machine. To discard the changes, {@link #delete} the virtual machine.
     - POST /api/vcenter/vm-template/library-items/{template_library_item}/check-outs?action=check-out
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter templateLibraryItem: (path) Identifier of the content library item containing the source virtual machine template to be checked out. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func checkOutWithRequestBuilder(templateLibraryItem: String, requestBody: VcenterVmTemplateLibraryItemsCheckOutsCheckOut? = nil) -> RequestBuilder<String> {
        var path = "/api/vcenter/vm-template/library-items/{template_library_item}/check-outs?action=check-out"
        let templateLibraryItemPreEscape = "\(templateLibraryItem)"
        let templateLibraryItemPostEscape = templateLibraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_library_item}", with: templateLibraryItemPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Checks out a library item containing a virtual machine template. This {@term operation} makes a copy of the source virtual machine template contained in the library item as a virtual machine. The virtual machine is copied with the same storage specification as the source virtual machine template. Changes to the checked out virtual machine do not affect the virtual machine template contained in the library item. To save these changes back into the library item, {@link #checkIn} the virtual machine. To discard the changes, {@link #delete} the virtual machine.
     
     - parameter templateLibraryItem: (path) Identifier of the content library item containing the source virtual machine template to be checked out. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func checkOut_0(templateLibraryItem: String, requestBody: VcenterVmTemplateLibraryItemsCheckOutsCheckOut? = nil, completion: @escaping ((_ data: VcenterVmTemplateLibraryItemsCheckOutsCheckOutResp?,_ error: Error?) -> Void)) {
        checkOut_0WithRequestBuilder(templateLibraryItem: templateLibraryItem, requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Checks out a library item containing a virtual machine template. This {@term operation} makes a copy of the source virtual machine template contained in the library item as a virtual machine. The virtual machine is copied with the same storage specification as the source virtual machine template. Changes to the checked out virtual machine do not affect the virtual machine template contained in the library item. To save these changes back into the library item, {@link #checkIn} the virtual machine. To discard the changes, {@link #delete} the virtual machine.
     - POST /rest/vcenter/vm-template/library-items/{template_library_item}/check-outs?action=check-out
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter templateLibraryItem: (path) Identifier of the content library item containing the source virtual machine template to be checked out. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<VcenterVmTemplateLibraryItemsCheckOutsCheckOutResp> 
     */
    open class func checkOut_0WithRequestBuilder(templateLibraryItem: String, requestBody: VcenterVmTemplateLibraryItemsCheckOutsCheckOut? = nil) -> RequestBuilder<VcenterVmTemplateLibraryItemsCheckOutsCheckOutResp> {
        var path = "/rest/vcenter/vm-template/library-items/{template_library_item}/check-outs?action=check-out"
        let templateLibraryItemPreEscape = "\(templateLibraryItem)"
        let templateLibraryItemPostEscape = templateLibraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_library_item}", with: templateLibraryItemPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterVmTemplateLibraryItemsCheckOutsCheckOutResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Deletes the checked out virtual machine.
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter vm: (path) Identifier of the checked out virtual machine to delete. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(templateLibraryItem: String, vm: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(templateLibraryItem: templateLibraryItem, vm: vm).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Deletes the checked out virtual machine.
     - DELETE /api/vcenter/vm-template/library-items/{template_library_item}/check-outs/{vm}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter vm: (path) Identifier of the checked out virtual machine to delete. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(templateLibraryItem: String, vm: String) -> RequestBuilder<Void> {
        var path = "/api/vcenter/vm-template/library-items/{template_library_item}/check-outs/{vm}"
        let templateLibraryItemPreEscape = "\(templateLibraryItem)"
        let templateLibraryItemPostEscape = templateLibraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_library_item}", with: templateLibraryItemPostEscape, options: .literal, range: nil)
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Deletes the checked out virtual machine.
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter vm: (path) Identifier of the checked out virtual machine to delete. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete_0(templateLibraryItem: String, vm: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        delete_0WithRequestBuilder(templateLibraryItem: templateLibraryItem, vm: vm).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Deletes the checked out virtual machine.
     - DELETE /rest/vcenter/vm-template/library-items/{template_library_item}/check-outs/{vm}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter vm: (path) Identifier of the checked out virtual machine to delete. 

     - returns: RequestBuilder<Void> 
     */
    open class func delete_0WithRequestBuilder(templateLibraryItem: String, vm: String) -> RequestBuilder<Void> {
        var path = "/rest/vcenter/vm-template/library-items/{template_library_item}/check-outs/{vm}"
        let templateLibraryItemPreEscape = "\(templateLibraryItem)"
        let templateLibraryItemPostEscape = templateLibraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_library_item}", with: templateLibraryItemPostEscape, options: .literal, range: nil)
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns commonly used information about the virtual machines that are checked out of the library item.
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(templateLibraryItem: String, completion: @escaping ((_ data: [VcenterVmTemplateLibraryItemsCheckOutsSummary]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(templateLibraryItem: templateLibraryItem).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns commonly used information about the virtual machines that are checked out of the library item.
     - GET /api/vcenter/vm-template/library-items/{template_library_item}/check-outs
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 

     - returns: RequestBuilder<[VcenterVmTemplateLibraryItemsCheckOutsSummary]> 
     */
    open class func listWithRequestBuilder(templateLibraryItem: String) -> RequestBuilder<[VcenterVmTemplateLibraryItemsCheckOutsSummary]> {
        var path = "/api/vcenter/vm-template/library-items/{template_library_item}/check-outs"
        let templateLibraryItemPreEscape = "\(templateLibraryItem)"
        let templateLibraryItemPostEscape = templateLibraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_library_item}", with: templateLibraryItemPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[VcenterVmTemplateLibraryItemsCheckOutsSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns commonly used information about the virtual machines that are checked out of the library item.
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list_0(templateLibraryItem: String, completion: @escaping ((_ data: VcenterVmTemplateLibraryItemsCheckOutsListResp?,_ error: Error?) -> Void)) {
        list_0WithRequestBuilder(templateLibraryItem: templateLibraryItem).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns commonly used information about the virtual machines that are checked out of the library item.
     - GET /rest/vcenter/vm-template/library-items/{template_library_item}/check-outs
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter templateLibraryItem: (path) Identifier of the VM template library item. 

     - returns: RequestBuilder<VcenterVmTemplateLibraryItemsCheckOutsListResp> 
     */
    open class func list_0WithRequestBuilder(templateLibraryItem: String) -> RequestBuilder<VcenterVmTemplateLibraryItemsCheckOutsListResp> {
        var path = "/rest/vcenter/vm-template/library-items/{template_library_item}/check-outs"
        let templateLibraryItemPreEscape = "\(templateLibraryItem)"
        let templateLibraryItemPostEscape = templateLibraryItemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{template_library_item}", with: templateLibraryItemPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterVmTemplateLibraryItemsCheckOutsListResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
