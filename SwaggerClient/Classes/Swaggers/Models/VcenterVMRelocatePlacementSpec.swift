//
// VcenterVMRelocatePlacementSpec.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct VcenterVMRelocatePlacementSpec: Codable {

    /** Virtual machine folder into which the virtual machine should be placed. If this field is unset, the virtual machine will stay in the current folder. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder. */
    public var folder: String?
    /** Resource pool into which the virtual machine should be placed. If this field is unset, the virtual machine will stay in the current resource pool. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ResourcePool. */
    public var resourcePool: String?
    /** Host onto which the virtual machine should be placed.   If VM.RelocatePlacementSpec.host and VM.RelocatePlacementSpec.resource-pool are both specified, VM.RelocatePlacementSpec.resource-pool must belong to VM.RelocatePlacementSpec.host.    If VM.RelocatePlacementSpec.host and VM.RelocatePlacementSpec.cluster are both specified, VM.RelocatePlacementSpec.host must be a member of VM.RelocatePlacementSpec.cluster.  If this field is unset, if VM.RelocatePlacementSpec.resource-pool is unset, the virtual machine will remain on the current host. if VM.RelocatePlacementSpec.resource-pool is set, and the target is a standalone host, the host is used. if VM.RelocatePlacementSpec.resource-pool is set, and the target is a DRS cluster, a host will be picked by DRS. if VM.RelocatePlacementSpec.resource-pool is set, and the target is a cluster without DRS, InvalidArgument will be thrown. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: HostSystem. When operations return a value of this structure as a result, the field will be an identifier for the resource type: HostSystem. */
    public var host: String?
    /** Cluster into which the virtual machine should be placed.   If VM.RelocatePlacementSpec.cluster and VM.RelocatePlacementSpec.resource-pool are both specified, VM.RelocatePlacementSpec.resource-pool must belong to VM.RelocatePlacementSpec.cluster.    If VM.RelocatePlacementSpec.cluster and VM.RelocatePlacementSpec.host are both specified, VM.RelocatePlacementSpec.host must be a member of VM.RelocatePlacementSpec.cluster.  If VM.RelocatePlacementSpec.resource-pool or VM.RelocatePlacementSpec.host is specified, it is recommended that this field be unset. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource. */
    public var cluster: String?
    /** Datastore on which the virtual machine&#39;s configuration state should be stored. This datastore will also be used for any virtual disks that are associated with the virtual machine, unless individually overridden. If this field is unset, the virtual machine will remain on the current datastore. When clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Datastore. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Datastore. */
    public var datastore: String?

    public init(folder: String?, resourcePool: String?, host: String?, cluster: String?, datastore: String?) {
        self.folder = folder
        self.resourcePool = resourcePool
        self.host = host
        self.cluster = cluster
        self.datastore = datastore
    }

    public enum CodingKeys: String, CodingKey { 
        case folder
        case resourcePool = "resource_pool"
        case host
        case cluster
        case datastore
    }


}

