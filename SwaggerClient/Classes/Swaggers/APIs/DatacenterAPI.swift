//
// DatacenterAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DatacenterAPI {
    /**
     Retrieves information about the datacenter corresponding to datacenter.
     
     - parameter datacenter: (path) Identifier of the datacenter. The parameter must be an identifier for the resource type: Datacenter. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(datacenter: String, completion: @escaping ((_ data: VcenterDatacenterInfo?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(datacenter: datacenter).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves information about the datacenter corresponding to datacenter.
     - GET /api/vcenter/datacenter/{datacenter}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter datacenter: (path) Identifier of the datacenter. The parameter must be an identifier for the resource type: Datacenter. 

     - returns: RequestBuilder<VcenterDatacenterInfo> 
     */
    open class func callGetWithRequestBuilder(datacenter: String) -> RequestBuilder<VcenterDatacenterInfo> {
        var path = "/api/vcenter/datacenter/{datacenter}"
        let datacenterPreEscape = "\(datacenter)"
        let datacenterPostEscape = datacenterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{datacenter}", with: datacenterPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterDatacenterInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves information about the datacenter corresponding to datacenter.
     
     - parameter datacenter: (path) Identifier of the datacenter. The parameter must be an identifier for the resource type: Datacenter. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet_0(datacenter: String, completion: @escaping ((_ data: VcenterDatacenterResp?,_ error: Error?) -> Void)) {
        callGet_0WithRequestBuilder(datacenter: datacenter).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves information about the datacenter corresponding to datacenter.
     - GET /rest/vcenter/datacenter/{datacenter}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter datacenter: (path) Identifier of the datacenter. The parameter must be an identifier for the resource type: Datacenter. 

     - returns: RequestBuilder<VcenterDatacenterResp> 
     */
    open class func callGet_0WithRequestBuilder(datacenter: String) -> RequestBuilder<VcenterDatacenterResp> {
        var path = "/rest/vcenter/datacenter/{datacenter}"
        let datacenterPreEscape = "\(datacenter)"
        let datacenterPostEscape = datacenterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{datacenter}", with: datacenterPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterDatacenterResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a new datacenter in the vCenter inventory
     
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(requestBody: VcenterDatacenterCreate? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a new datacenter in the vCenter inventory
     - POST /api/vcenter/datacenter
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={
  "blank": true,
  "bytes": [],
  "empty": true
}}]
     
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func createWithRequestBuilder(requestBody: VcenterDatacenterCreate? = nil) -> RequestBuilder<String> {
        let path = "/api/vcenter/datacenter"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a new datacenter in the vCenter inventory
     
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create_0(requestBody: VcenterDatacenterCreate, completion: @escaping ((_ data: VcenterDatacenterCreateResp?,_ error: Error?) -> Void)) {
        create_0WithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a new datacenter in the vCenter inventory
     - POST /rest/vcenter/datacenter
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter requestBody: (body)  

     - returns: RequestBuilder<VcenterDatacenterCreateResp> 
     */
    open class func create_0WithRequestBuilder(requestBody: VcenterDatacenterCreate) -> RequestBuilder<VcenterDatacenterCreateResp> {
        let path = "/rest/vcenter/datacenter"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterDatacenterCreateResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete an empty datacenter from the vCenter Server
     
     - parameter datacenter: (path) Identifier of the datacenter to be deleted. The parameter must be an identifier for the resource type: Datacenter. 
     - parameter force: (query) If true, delete the datacenter even if it is not empty. If unset a ResourceInUse error will be reported if the datacenter is not empty. This is the equivalent of passing the value false. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(datacenter: String, force: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(datacenter: datacenter, force: force).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete an empty datacenter from the vCenter Server
     - DELETE /api/vcenter/datacenter/{datacenter}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter datacenter: (path) Identifier of the datacenter to be deleted. The parameter must be an identifier for the resource type: Datacenter. 
     - parameter force: (query) If true, delete the datacenter even if it is not empty. If unset a ResourceInUse error will be reported if the datacenter is not empty. This is the equivalent of passing the value false. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(datacenter: String, force: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/api/vcenter/datacenter/{datacenter}"
        let datacenterPreEscape = "\(datacenter)"
        let datacenterPostEscape = datacenterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{datacenter}", with: datacenterPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "force": force
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete an empty datacenter from the vCenter Server
     
     - parameter datacenter: (path) Identifier of the datacenter to be deleted. The parameter must be an identifier for the resource type: Datacenter. 
     - parameter force: (query) If true, delete the datacenter even if it is not empty. If unset a ResourceInUse error will be reported if the datacenter is not empty. This is the equivalent of passing the value false. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete_0(datacenter: String, force: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        delete_0WithRequestBuilder(datacenter: datacenter, force: force).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete an empty datacenter from the vCenter Server
     - DELETE /rest/vcenter/datacenter/{datacenter}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter datacenter: (path) Identifier of the datacenter to be deleted. The parameter must be an identifier for the resource type: Datacenter. 
     - parameter force: (query) If true, delete the datacenter even if it is not empty. If unset a ResourceInUse error will be reported if the datacenter is not empty. This is the equivalent of passing the value false. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func delete_0WithRequestBuilder(datacenter: String, force: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/rest/vcenter/datacenter/{datacenter}"
        let datacenterPreEscape = "\(datacenter)"
        let datacenterPostEscape = datacenterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{datacenter}", with: datacenterPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "force": force
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns information about at most 1000 visible (subject to permission checks) datacenters in vCenter matching the Datacenter.FilterSpec.
     
     - parameter datacenters: (query) Identifiers of datacenters that can match the filter. If unset or empty, datacenters with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter. (optional)
     - parameter names: (query) Names that datacenters must have to match the filter (see Datacenter.Info.name). If unset or empty, datacenters with any name match the filter. (optional)
     - parameter folders: (query) Folders that must contain the datacenters for the datacenter to match the filter. If unset or empty, datacenters in any folder match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(datacenters: [String]? = nil, names: [String]? = nil, folders: [String]? = nil, completion: @escaping ((_ data: [VcenterDatacenterSummary]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(datacenters: datacenters, names: names, folders: folders).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about at most 1000 visible (subject to permission checks) datacenters in vCenter matching the Datacenter.FilterSpec.
     - GET /api/vcenter/datacenter
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]
     
     - parameter datacenters: (query) Identifiers of datacenters that can match the filter. If unset or empty, datacenters with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter. (optional)
     - parameter names: (query) Names that datacenters must have to match the filter (see Datacenter.Info.name). If unset or empty, datacenters with any name match the filter. (optional)
     - parameter folders: (query) Folders that must contain the datacenters for the datacenter to match the filter. If unset or empty, datacenters in any folder match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. (optional)

     - returns: RequestBuilder<[VcenterDatacenterSummary]> 
     */
    open class func listWithRequestBuilder(datacenters: [String]? = nil, names: [String]? = nil, folders: [String]? = nil) -> RequestBuilder<[VcenterDatacenterSummary]> {
        let path = "/api/vcenter/datacenter"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "datacenters": datacenters, 
            "names": names, 
            "folders": folders
        ])

        let requestBuilder: RequestBuilder<[VcenterDatacenterSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns information about at most 1000 visible (subject to permission checks) datacenters in vCenter matching the Datacenter.FilterSpec.
     
     - parameter filterDatacenters: (query) Identifiers of datacenters that can match the filter. If unset or empty, datacenters with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter. (optional)
     - parameter filterNames: (query) Names that datacenters must have to match the filter (see Datacenter.Info.name). If unset or empty, datacenters with any name match the filter. (optional)
     - parameter filterFolders: (query) Folders that must contain the datacenters for the datacenter to match the filter. If unset or empty, datacenters in any folder match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list_0(filterDatacenters: [String]? = nil, filterNames: [String]? = nil, filterFolders: [String]? = nil, completion: @escaping ((_ data: VcenterDatacenterListResp?,_ error: Error?) -> Void)) {
        list_0WithRequestBuilder(filterDatacenters: filterDatacenters, filterNames: filterNames, filterFolders: filterFolders).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns information about at most 1000 visible (subject to permission checks) datacenters in vCenter matching the Datacenter.FilterSpec.
     - GET /rest/vcenter/datacenter
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter filterDatacenters: (query) Identifiers of datacenters that can match the filter. If unset or empty, datacenters with any identifier match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter. (optional)
     - parameter filterNames: (query) Names that datacenters must have to match the filter (see Datacenter.Info.name). If unset or empty, datacenters with any name match the filter. (optional)
     - parameter filterFolders: (query) Folders that must contain the datacenters for the datacenter to match the filter. If unset or empty, datacenters in any folder match the filter. When clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder. (optional)

     - returns: RequestBuilder<VcenterDatacenterListResp> 
     */
    open class func list_0WithRequestBuilder(filterDatacenters: [String]? = nil, filterNames: [String]? = nil, filterFolders: [String]? = nil) -> RequestBuilder<VcenterDatacenterListResp> {
        let path = "/rest/vcenter/datacenter"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter.datacenters": filterDatacenters, 
            "filter.names": filterNames, 
            "filter.folders": filterFolders
        ])

        let requestBuilder: RequestBuilder<VcenterDatacenterListResp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
