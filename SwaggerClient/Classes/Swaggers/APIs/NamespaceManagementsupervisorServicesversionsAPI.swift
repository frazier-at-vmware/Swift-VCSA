//
// NamespaceManagementsupervisorServicesversionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class NamespaceManagementsupervisorServicesversionsAPI {
    /**
     Activate a Supervisor Service version. This operation will change the Versions.State of the version to ACTIVATED state. if you do not have all of the privileges described as follows:     -  Operation execution requires SupervisorServices.Manage.  
     
     - parameter supervisorService: (path) Identifier for the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 
     - parameter version: (path) Identifier of the version. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor_services.Version. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func activate(supervisorService: String, version: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        activateWithRequestBuilder(supervisorService: supervisorService, version: version).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Activate a Supervisor Service version. This operation will change the Versions.State of the version to ACTIVATED state. if you do not have all of the privileges described as follows:     -  Operation execution requires SupervisorServices.Manage.  
     - PATCH /api/vcenter/namespace-management/supervisor-services/{supervisor_service}/versions/{version}?action=activate
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter supervisorService: (path) Identifier for the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 
     - parameter version: (path) Identifier of the version. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor_services.Version. 

     - returns: RequestBuilder<Void> 
     */
    open class func activateWithRequestBuilder(supervisorService: String, version: String) -> RequestBuilder<Void> {
        var path = "/api/vcenter/namespace-management/supervisor-services/{supervisor_service}/versions/{version}?action=activate"
        let supervisorServicePreEscape = "\(supervisorService)"
        let supervisorServicePostEscape = supervisorServicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{supervisor_service}", with: supervisorServicePostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(version)"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Return the information for the specified Supervisor Service version. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     
     - parameter supervisorService: (path) Identifier of the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 
     - parameter version: (path) Identifier of the version. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor_services.Version. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(supervisorService: String, version: String, completion: @escaping ((_ data: VcenterNamespaceManagementSupervisorServicesVersionsInfo?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(supervisorService: supervisorService, version: version).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Return the information for the specified Supervisor Service version. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     - GET /api/vcenter/namespace-management/supervisor-services/{supervisor_service}/versions/{version}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter supervisorService: (path) Identifier of the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 
     - parameter version: (path) Identifier of the version. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor_services.Version. 

     - returns: RequestBuilder<VcenterNamespaceManagementSupervisorServicesVersionsInfo> 
     */
    open class func callGetWithRequestBuilder(supervisorService: String, version: String) -> RequestBuilder<VcenterNamespaceManagementSupervisorServicesVersionsInfo> {
        var path = "/api/vcenter/namespace-management/supervisor-services/{supervisor_service}/versions/{version}"
        let supervisorServicePreEscape = "\(supervisorService)"
        let supervisorServicePostEscape = supervisorServicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{supervisor_service}", with: supervisorServicePostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(version)"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterNamespaceManagementSupervisorServicesVersionsInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a Supervisor Service version based on the provided service definition information for the version. if you do not have all of the privileges described as follows:     -  Operation execution requires SupervisorServices.Manage.  
     
     - parameter supervisorService: (path) Identifier of the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(supervisorService: String, requestBody: VcenterNamespaceManagementSupervisorServicesVersionsCreate? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(supervisorService: supervisorService, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create a Supervisor Service version based on the provided service definition information for the version. if you do not have all of the privileges described as follows:     -  Operation execution requires SupervisorServices.Manage.  
     - POST /api/vcenter/namespace-management/supervisor-services/{supervisor_service}/versions
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter supervisorService: (path) Identifier of the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func createWithRequestBuilder(supervisorService: String, requestBody: VcenterNamespaceManagementSupervisorServicesVersionsCreate? = nil) -> RequestBuilder<Void> {
        var path = "/api/vcenter/namespace-management/supervisor-services/{supervisor_service}/versions"
        let supervisorServicePreEscape = "\(supervisorService)"
        let supervisorServicePostEscape = supervisorServicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{supervisor_service}", with: supervisorServicePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Deactivate a Supervisor Service version. This operation will change the Versions.State of the version to DEACTIVATED state, which will make sure the version cannot be created on any Supervisor cluster. Note that this operation should be called before deleting the version. if you do not have all of the privileges described as follows:     -  Operation execution requires SupervisorServices.Manage.  
     
     - parameter supervisorService: (path) Identifier for the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 
     - parameter version: (path) Identifier of the version. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor_services.Version. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deactivate(supervisorService: String, version: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deactivateWithRequestBuilder(supervisorService: supervisorService, version: version).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Deactivate a Supervisor Service version. This operation will change the Versions.State of the version to DEACTIVATED state, which will make sure the version cannot be created on any Supervisor cluster. Note that this operation should be called before deleting the version. if you do not have all of the privileges described as follows:     -  Operation execution requires SupervisorServices.Manage.  
     - PATCH /api/vcenter/namespace-management/supervisor-services/{supervisor_service}/versions/{version}?action=deactivate
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter supervisorService: (path) Identifier for the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 
     - parameter version: (path) Identifier of the version. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor_services.Version. 

     - returns: RequestBuilder<Void> 
     */
    open class func deactivateWithRequestBuilder(supervisorService: String, version: String) -> RequestBuilder<Void> {
        var path = "/api/vcenter/namespace-management/supervisor-services/{supervisor_service}/versions/{version}?action=deactivate"
        let supervisorServicePreEscape = "\(supervisorService)"
        let supervisorServicePostEscape = supervisorServicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{supervisor_service}", with: supervisorServicePostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(version)"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a Supervisor Service version. This operation only deletes the Supervisor Service version from vCenter if the version is in DEACTIVATED state and all instances of the version are removed from all Supervisors. Note that the Versions.deactivate operation should be called to deactivate the version before the version can be deleted.   Note that deleting the last version of the supervisorService does not delete the supervisorService instance automatically.  if you do not have all of the privileges described as follows:     -  Operation execution requires SupervisorServices.Manage.  
     
     - parameter supervisorService: (path) Identifier of the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 
     - parameter version: (path) Identifier of the version. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor_services.Version. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(supervisorService: String, version: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(supervisorService: supervisorService, version: version).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a Supervisor Service version. This operation only deletes the Supervisor Service version from vCenter if the version is in DEACTIVATED state and all instances of the version are removed from all Supervisors. Note that the Versions.deactivate operation should be called to deactivate the version before the version can be deleted.   Note that deleting the last version of the supervisorService does not delete the supervisorService instance automatically.  if you do not have all of the privileges described as follows:     -  Operation execution requires SupervisorServices.Manage.  
     - DELETE /api/vcenter/namespace-management/supervisor-services/{supervisor_service}/versions/{version}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter supervisorService: (path) Identifier of the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 
     - parameter version: (path) Identifier of the version. The parameter must be an identifier for the resource type: vcenter.namespace_management.supervisor_services.Version. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(supervisorService: String, version: String) -> RequestBuilder<Void> {
        var path = "/api/vcenter/namespace-management/supervisor-services/{supervisor_service}/versions/{version}"
        let supervisorServicePreEscape = "\(supervisorService)"
        let supervisorServicePostEscape = supervisorServicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{supervisor_service}", with: supervisorServicePostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(version)"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Return the information about all versions of the Supervisor Service. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     
     - parameter supervisorService: (path) Identifier of the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(supervisorService: String, completion: @escaping ((_ data: [VcenterNamespaceManagementSupervisorServicesVersionsSummary]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(supervisorService: supervisorService).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Return the information about all versions of the Supervisor Service. if you do not have all of the privileges described as follows:     -  Operation execution requires System.Read.  
     - GET /api/vcenter/namespace-management/supervisor-services/{supervisor_service}/versions
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]
     
     - parameter supervisorService: (path) Identifier of the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 

     - returns: RequestBuilder<[VcenterNamespaceManagementSupervisorServicesVersionsSummary]> 
     */
    open class func listWithRequestBuilder(supervisorService: String) -> RequestBuilder<[VcenterNamespaceManagementSupervisorServicesVersionsSummary]> {
        var path = "/api/vcenter/namespace-management/supervisor-services/{supervisor_service}/versions"
        let supervisorServicePreEscape = "\(supervisorService)"
        let supervisorServicePostEscape = supervisorServicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{supervisor_service}", with: supervisorServicePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[VcenterNamespaceManagementSupervisorServicesVersionsSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
