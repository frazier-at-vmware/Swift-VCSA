//
// VcenterNamespacesInstancesUpdateSpec.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct VcenterNamespacesInstancesUpdateSpec: Codable {

    /** Description for the namespace. If unset, the description of the namespace will not be modified. */
    public var _description: String?
    /** Resource quota updates on the namespace. Refer to vcenter.namespace_management.NamespaceResourceOptions.Info#updateResourceQuotaType and use vcenter.namespace_management.NamespaceResourceOptions#get for retrieving the type for the value for this field. For an example of this, see ResourceQuotaOptionsV1Update. If unset, the resource constraints on the namespace will not be modified. */
    public var resourceSpec: JSONValue?
    /** Access control associated with the namespace. If unset, access controls on the namespace will not be modified. Existing pods from users will continue to run. */
    public var accessList: [VcenterNamespacesInstancesAccess]?
    /** Storage associated with the namespace. If unset, storage policies and their limit will not be modified. Pods which are already using persistent storage from the earlier version of storage policies will be able to access them till the datastores are attached to the worker nodes. */
    public var storageSpecs: [VcenterNamespacesInstancesStorageSpec]?
    /** VM Service specification associated with the namespace. This field is optional because it was added in a newer version than its parent node. */
    public var vmServiceSpec: VcenterNamespacesInstancesVMServiceSpec?
    /** Image Registry Service specification associated with the namespace. If unset, the existing image registry specification associated with the namespace will not be modified. */
    public var imageRegistrySpec: VcenterNamespacesInstancesImageRegistrySpec?

    public init(_description: String?, resourceSpec: JSONValue?, accessList: [VcenterNamespacesInstancesAccess]?, storageSpecs: [VcenterNamespacesInstancesStorageSpec]?, vmServiceSpec: VcenterNamespacesInstancesVMServiceSpec?, imageRegistrySpec: VcenterNamespacesInstancesImageRegistrySpec?) {
        self._description = _description
        self.resourceSpec = resourceSpec
        self.accessList = accessList
        self.storageSpecs = storageSpecs
        self.vmServiceSpec = vmServiceSpec
        self.imageRegistrySpec = imageRegistrySpec
    }

    public enum CodingKeys: String, CodingKey { 
        case _description = "description"
        case resourceSpec = "resource_spec"
        case accessList = "access_list"
        case storageSpecs = "storage_specs"
        case vmServiceSpec = "vm_service_spec"
        case imageRegistrySpec = "image_registry_spec"
    }


}

