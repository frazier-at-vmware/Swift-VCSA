//
// VmguestfilesystemtransfersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class VmguestfilesystemtransfersAPI {
    /**
     Initiates an operation to transfer a file to or from the guest.   If the power state of the Virtual Machine is changed when the file transfer is in progress, or the Virtual Machine is migrated, then the transfer operation is aborted.    When transferring a file into the guest and overwriting an existing file, the old file attributes are not preserved.    In order to ensure a secure connection to the host when transferring a file using HTTPS, the X.509 certificate for the host must be used to authenticate the remote end of the connection. The certificate of the host that the virtual machine is running on can be retrieved using the following fields: XXX insert link to certificate in Host config XXX     if you do not have all of the privileges described as follows:     -  The resource VirtualMachine referenced by the parameter vm requires VirtualMachine.GuestOperations.Modify.  
     
     - parameter vm: (path) Virtual Machine to perform the operation on. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(vm: String, requestBody: VcenterVmGuestFilesystemTransfersCreate, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(vm: vm, requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Initiates an operation to transfer a file to or from the guest.   If the power state of the Virtual Machine is changed when the file transfer is in progress, or the Virtual Machine is migrated, then the transfer operation is aborted.    When transferring a file into the guest and overwriting an existing file, the old file attributes are not preserved.    In order to ensure a secure connection to the host when transferring a file using HTTPS, the X.509 certificate for the host must be used to authenticate the remote end of the connection. The certificate of the host that the virtual machine is running on can be retrieved using the following fields: XXX insert link to certificate in Host config XXX     if you do not have all of the privileges described as follows:     -  The resource VirtualMachine referenced by the parameter vm requires VirtualMachine.GuestOperations.Modify.  
     - POST /api/vcenter/vm/{vm}/guest/filesystem?action=create
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={
  "blank": false,
  "bytes": [
    104,
    116,
    116,
    112,
    58,
    47,
    47,
    101,
    120,
    97,
    109,
    112,
    108,
    101,
    46,
    99,
    111,
    109,
    47,
    97,
    101,
    105,
    111,
    117
  ],
  "empty": false
}}]
     
     - parameter vm: (path) Virtual Machine to perform the operation on. The parameter must be an identifier for the resource type: VirtualMachine. 
     - parameter requestBody: (body)  

     - returns: RequestBuilder<String> 
     */
    open class func createWithRequestBuilder(vm: String, requestBody: VcenterVmGuestFilesystemTransfersCreate) -> RequestBuilder<String> {
        var path = "/api/vcenter/vm/{vm}/guest/filesystem?action=create"
        let vmPreEscape = "\(vm)"
        let vmPostEscape = vmPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vm}", with: vmPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
