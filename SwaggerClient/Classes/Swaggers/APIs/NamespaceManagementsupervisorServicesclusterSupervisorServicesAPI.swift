//
// NamespaceManagementsupervisorServicesclusterSupervisorServicesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class NamespaceManagementsupervisorServicesclusterSupervisorServicesAPI {
    /**
     Return information about the specific Supervisor Service on the specified vSphere Supervisor. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  The resource ClusterComputeResource referenced by the parameter cluster requires SupervisorServices.Manage.  
     
     - parameter cluster: (path) Identifier for the cluster on which to get the service. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter supervisorService: (path) Identifier for the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(cluster: String, supervisorService: String, completion: @escaping ((_ data: VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(cluster: cluster, supervisorService: supervisorService).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Return information about the specific Supervisor Service on the specified vSphere Supervisor. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  The resource ClusterComputeResource referenced by the parameter cluster requires SupervisorServices.Manage.  
     - GET /api/vcenter/namespace-management/clusters/{cluster}/supervisor-services/{supervisor_service}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter cluster: (path) Identifier for the cluster on which to get the service. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter supervisorService: (path) Identifier for the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 

     - returns: RequestBuilder<VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo> 
     */
    open class func callGetWithRequestBuilder(cluster: String, supervisorService: String) -> RequestBuilder<VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo> {
        var path = "/api/vcenter/namespace-management/clusters/{cluster}/supervisor-services/{supervisor_service}"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let supervisorServicePreEscape = "\(supervisorService)"
        let supervisorServicePostEscape = supervisorServicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{supervisor_service}", with: supervisorServicePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set a new configuration to the specified Supervisor Service on the specified vSphere Supervisor. This operation will apply the new Supervisor Service version's service definition to the existing Supervisor Service on the cluster. This operation requires that the specified Supervisor Service is already installed in the specified Supervisor. Note that this operation doesn't interfere with the application instances that are created by the associated operator(s). So users should make sure the new version is still compatible with the existing application instances. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  The resource ClusterComputeResource referenced by the parameter cluster requires SupervisorServices.Manage.  
     
     - parameter cluster: (path) Identifier for the Supervisor from which to delete the service. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter supervisorService: (path) Identifier for the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callSet(cluster: String, supervisorService: String, requestBody: VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesSet? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        callSetWithRequestBuilder(cluster: cluster, supervisorService: supervisorService, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Set a new configuration to the specified Supervisor Service on the specified vSphere Supervisor. This operation will apply the new Supervisor Service version's service definition to the existing Supervisor Service on the cluster. This operation requires that the specified Supervisor Service is already installed in the specified Supervisor. Note that this operation doesn't interfere with the application instances that are created by the associated operator(s). So users should make sure the new version is still compatible with the existing application instances. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  The resource ClusterComputeResource referenced by the parameter cluster requires SupervisorServices.Manage.  
     - PUT /api/vcenter/namespace-management/clusters/{cluster}/supervisor-services/{supervisor_service}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter cluster: (path) Identifier for the Supervisor from which to delete the service. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter supervisorService: (path) Identifier for the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func callSetWithRequestBuilder(cluster: String, supervisorService: String, requestBody: VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesSet? = nil) -> RequestBuilder<Void> {
        var path = "/api/vcenter/namespace-management/clusters/{cluster}/supervisor-services/{supervisor_service}"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let supervisorServicePreEscape = "\(supervisorService)"
        let supervisorServicePostEscape = supervisorServicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{supervisor_service}", with: supervisorServicePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a Supervisor Service on the specified vSphere Supervisor. This operation will apply the Supervisor Service version's service definition on the cluster. This operation is possible only when the Supervisor Service and Supervisor Service version are in the ACTIVATED state. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  The resource ClusterComputeResource referenced by the parameter cluster requires SupervisorServices.Manage.  
     
     - parameter cluster: (path) Identifier for the Supervisor on which to create the service. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter requestBody: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(cluster: String, requestBody: VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesCreate? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(cluster: cluster, requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create a Supervisor Service on the specified vSphere Supervisor. This operation will apply the Supervisor Service version's service definition on the cluster. This operation is possible only when the Supervisor Service and Supervisor Service version are in the ACTIVATED state. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  The resource ClusterComputeResource referenced by the parameter cluster requires SupervisorServices.Manage.  
     - POST /api/vcenter/namespace-management/clusters/{cluster}/supervisor-services
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter cluster: (path) Identifier for the Supervisor on which to create the service. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter requestBody: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func createWithRequestBuilder(cluster: String, requestBody: VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesCreate? = nil) -> RequestBuilder<Void> {
        var path = "/api/vcenter/namespace-management/clusters/{cluster}/supervisor-services"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a Supervisor Service on the specified vSphere Supervisor. This operation will remove the Supervisor Service with the specified identifier from the cluster, by removing the corresponding namespace and deleting the operator(s) associated with the Supervisor Service. Note that this operation doesn't deal with the application instances that are created by the associated operator(s), so existing application instances could be orphaned if users don't clean or migrate them. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  The resource ClusterComputeResource referenced by the parameter cluster requires SupervisorServices.Manage.  
     
     - parameter cluster: (path) Identifier for the Supervisor from which to delete the service. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter supervisorService: (path) Identifier for the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(cluster: String, supervisorService: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(cluster: cluster, supervisorService: supervisorService).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a Supervisor Service on the specified vSphere Supervisor. This operation will remove the Supervisor Service with the specified identifier from the cluster, by removing the corresponding namespace and deleting the operator(s) associated with the Supervisor Service. Note that this operation doesn't deal with the application instances that are created by the associated operator(s), so existing application instances could be orphaned if users don't clean or migrate them. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  The resource ClusterComputeResource referenced by the parameter cluster requires SupervisorServices.Manage.  
     - DELETE /api/vcenter/namespace-management/clusters/{cluster}/supervisor-services/{supervisor_service}
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     
     - parameter cluster: (path) Identifier for the Supervisor from which to delete the service. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter supervisorService: (path) Identifier for the Supervisor Service. The parameter must be an identifier for the resource type: vcenter.namespace_management.SupervisorService. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(cluster: String, supervisorService: String) -> RequestBuilder<Void> {
        var path = "/api/vcenter/namespace-management/clusters/{cluster}/supervisor-services/{supervisor_service}"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let supervisorServicePreEscape = "\(supervisorService)"
        let supervisorServicePostEscape = supervisorServicePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{supervisor_service}", with: supervisorServicePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Return the summaries about all Supervisor Services on the specified vSphere Supervisor. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  The resource ClusterComputeResource referenced by the parameter cluster requires SupervisorServices.Manage.  
     
     - parameter cluster: (path) Identifier for the cluster on which to list the services. The parameter must be an identifier for the resource type: ClusterComputeResource. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(cluster: String, completion: @escaping ((_ data: [VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesSummary]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(cluster: cluster).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Return the summaries about all Supervisor Services on the specified vSphere Supervisor. A Supervisor can be running on one or multiple vSphere Zones, and each vSphere Zone is associated with one or more vSphere Clusters. If a Supervisor running on the specified vSphere Cluster is running on additional vSphere Clusters, this operation will apply to Supervisor components running on the other vSphere Clusters in addition to the specified vSphere Cluster. To call this API on a Supervisor with multiple vSphere Clusters, use vcenter.namespace_management.supervisors.Topology#get to get the vSphere Clusters associated with the given Supervisor. Any cluster from the list returned can be used as the input of this API. if you do not have all of the privileges described as follows:     -  The resource ClusterComputeResource referenced by the parameter cluster requires SupervisorServices.Manage.  
     - GET /api/vcenter/namespace-management/clusters/{cluster}/supervisor-services
     - API Key:
       - type: apiKey vmware-api-session-id 
       - name: session_id
     - examples: [{contentType=application/json, example={}}]
     
     - parameter cluster: (path) Identifier for the cluster on which to list the services. The parameter must be an identifier for the resource type: ClusterComputeResource. 

     - returns: RequestBuilder<[VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesSummary]> 
     */
    open class func listWithRequestBuilder(cluster: String) -> RequestBuilder<[VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesSummary]> {
        var path = "/api/vcenter/namespace-management/clusters/{cluster}/supervisor-services"
        let clusterPreEscape = "\(cluster)"
        let clusterPostEscape = clusterPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cluster}", with: clusterPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[VcenterNamespaceManagementSupervisorServicesClusterSupervisorServicesSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
